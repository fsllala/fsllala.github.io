<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>https</title>
      <link href="/articles/3ef665a6.html"/>
      <url>/articles/3ef665a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="调研背景"><a href="#调研背景" class="headerlink" title="调研背景"></a>调研背景</h2><blockquote><p>公司项目打算采用HTTPS来保证数据的安全性。在计划零成本的前提下，看是否可以实现HTTPS。</p></blockquote><h2 id="HTTP与HTTPS区别"><a href="#HTTP与HTTPS区别" class="headerlink" title="HTTP与HTTPS区别"></a>HTTP与HTTPS区别</h2><ul><li>数据加密：HTTPS 使用 SSL&#x2F;TLS 协议对传输数据进行加密，使得第三方无法窃取数据内容。HTTP 传输的数据是明文，容易被黑客窃取和篡改。</li><li>数据完整性：在数据传输过程中，HTTPS 使用消息认证码（MAC）校验数据完整性，如果数据被篡改或者损坏，在传输过程中会被损坏。</li><li>身份验证：HTTPS 使用证书机制来验证网络通信的双方身份，加强了验证的强度和客户端和服务器之间的信任。HTTP 没有身份验证机制，容易遭受中间人攻击。</li></ul><blockquote><p>HTTPS 并不是一种新的协议，我们可以理解为HTTPS协议 &#x3D; HTTP协议 + SSL&#x2F;TLS协议。通常来说，HTTP 是直接和 TCP 进行通信的。当我们使用  SSL&#x2F;TLS 时，会变成先和  SSL&#x2F;TLS 通信，然后再由  SSL&#x2F;TLS 和 TCP 进行通信。</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/https.png" alt="https"></p><h2 id="SSL-x2F-TLS"><a href="#SSL-x2F-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h2><blockquote><p>SSL（Secure Sockets Layer）和 TLS（Transport Layer Security）都是网络通信中的加密协议，它们的主要目的是在网络通信中保护传输数据的机密性和完整性。SSL是TLS的前身，TLS是SSL的升级版，这两者之间的区别如下：</p></blockquote><ul><li>名称： SSL是早期加密协议的名称，后来被TLS所取代。目前常用的是TLS协议。</li><li>历史：SSL协议是在1995年由Netscape开发的。随着时间的推移，SSL逐渐被其他安全协议所取代。TLS是SSL的继任者，旨在改进SSL协议中的一些安全问题。TLS协议于1999年发布，TLS 1.0成为Internet工程任务组（IETF）的正式标准。</li><li>版本：SSL协议共有三个版本，分别为SSL 1.0、SSL 2.0和SSL 3.0，但是SSL 2.0存在一些安全性问题，并且被证明不可靠，已经不再使用。TLS协议目前有四个版本，分别为TLS 1.0、TLS 1.1、TLS 1.2和TLS 1.3。</li><li>安全性：TLS协议比SSL协议更加安全，因为TLS协议改进了一些SSL协议中的安全问题。例如，TLS协议使用更强的加密算法，可以保护数据传输的安全性，并防止中间人攻击。TLS 1.3版本还可以提高握手过程的效率，并提供更好的安全保障。</li><li>应用：SSL和TLS协议都可以用于加密HTTP请求，从而保护用户数据的安全性。HTTPS（HTTP over SSL&#x2F;TLS）是使用SSL或TLS协议加密的HTTP请求。</li></ul><p>总之，SSL和TLS协议都是用于在网络上保护数据传输的安全性的加密协议。虽然SSL协议已经不再使用，但TLS协议已经取代了SSL协议，并成为了现代互联网上加密通信的标准。</p><p>注：可以F12，选择Security进行查看单管网站所用的版本；</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/tlsVersion.png" alt="tlsVersion"></p><h2 id="证书颁发机构（CA）"><a href="#证书颁发机构（CA）" class="headerlink" title="证书颁发机构（CA）"></a>证书颁发机构（CA）</h2><ul><li><p>证书颁发机构（Certificate Authority，CA）是一种受信任的第三方实体，它负责验证数字证书中的信息，并将其绑定到公钥上，从而帮助确保证书的真实性和完整性。</p></li><li><p>数字证书是一种用于加密通信和保护数据完整性的安全证书。数字证书包含一个公钥和与该公钥相关联的信息，例如证书的所有者和有效期。当客户端连接到一个使用SSL&#x2F;TLS协议保护的服务时，服务器会向客户端发送一个数字证书，以证明自己的身份和服务器的公钥。</p></li><li><p>在数字证书中，公钥由证书颁发机构签名，以验证证书中的信息的真实性和完整性。因此，证书颁发机构是数字证书中非常重要的一个组成部分，它为证书的真实性和完整性提供了保障。</p></li><li><p>通过使用受信任的证书颁发机构签名的数字证书，客户端可以确信服务器的身份，从而可以信任与服务器之间的通信。在Web浏览器中，浏览器会预装一组受信任的证书颁发机构，以验证访问的网站的证书是否有效。如果证书不是由受信任的证书颁发机构签发的，浏览器就会发出警告，提示用户访问的网站可能不安全。</p></li></ul><h2 id="mkcert"><a href="#mkcert" class="headerlink" title="mkcert"></a>mkcert</h2><blockquote><p><a href="https://github.com/FiloSottile/mkcert">mkcert</a>  是一个用于制作本地可信任开发证书的简单工具，不需要配置。</p><p>使用来自真实证书颁发机构 (CA) 的证书进行开发可能是危险的或不可能的（对于主机，如<code>example.test</code>,<code>localhost</code>或<code>127.0.0.1</code>），但<strong>自签名证书</strong>会导致信任错误。</p><p>mkcert 自动在系统根存储中创建并安装本地 CA，并生成本地信任的证书。</p></blockquote><h2 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h2><ul><li>Let’s Encrypt是国外一个公共的免费SSL项目，由 Linux 基金会托管，由Mozilla、思科、Akamai、IdenTrust和EFF等组织发起，<strong>靠谱！</strong></li><li>Let’s Encrypt安装部署简单、方便，目前Cpanel、Oneinstack等面板都已经集成了Let’s Encrypt一键申请安装，<strong>简单！</strong></li><li>Let’s Encrypt证书<strong>有效期三个月</strong>，每三个月需要续签证书 <a href="https://letsencrypt.org/2015/11/09/why-90-days.html">see why</a> </li><li>Let’s Encrypt注册主域名<strong>认证频率</strong>20个&#x2F;周，同一域名重复认证 5次&#x2F;周 <a href="https://letsencrypt.org/docs/rate-limits/">see more</a></li><li>Let’s Encrypt不支持绑定IP，只能绑定域名，域名需可以在公共 Internet 上被访问到</li></ul><h2 id="mkcert与Let’s-Encrypt区别"><a href="#mkcert与Let’s-Encrypt区别" class="headerlink" title="mkcert与Let’s Encrypt区别"></a>mkcert与Let’s Encrypt区别</h2><ul><li>认证机构：Let’s Encrypt是一个公共的免费认证机构，可以为任何人免费签发SSL证书。与之相反，mkcert是一个自签名证书工具，它创建的证书只能用于开发和测试目的。</li><li>证书的有效期：Let’s Encrypt签发的证书的有效期为90天。在证书即将过期时，您可以自动更新证书。相反，mkcert默认情况下签发的证书有效期为2年，需要手动更新证书。</li><li>使用场景：Let’s Encrypt适用于需要为公共访问的网站签发证书的情况，例如在线商店、社交媒体等。而mkcert适用于开发和测试环境中使用，例如本地开发机器、测试环境等。</li><li>验证方式：Let’s Encrypt使用ACME协议来验证证书请求者的身份。ACME是一种自动化的验证协议，需要您在域名系统中创建一个特殊的DNS记录或在您的Web服务器上放置一个特殊的文件。ACME协议将验证这些信息，以确定您对域名或服务器的控制权；相反，mkcert使用本地证书颁发机构（CA）来签署证书，因此只能用于本地开发环境和测试环境。当您安装mkcert时，它将在您的计算机上创建一个本地CA，并将其添加到操作系统的信任列表中。这使得mkcert能够签署您本地环境中的SSL证书，而无需进行任何验证。</li><li>配置和使用：使用Let’s Encrypt需要您安装ACME客户端，并将其配置为与您的Web服务器配合使用。您还需要将域名解析为您的Web服务器，并公开暴露您的服务器以接受来自Let’s Encrypt的验证请求。相反，使用mkcert只需要在您的计算机上安装它，并使用它来生成证书。由于mkcert是自签名的，您无需将域名解析为Web服务器或公开暴露Web服务器以进行验证。您可以使用mkcert在本地生成SSL证书，并将其用于开发和测试目的。</li><li>安全性：Let’s Encrypt签发的证书使用公共密钥加密技术，可以提供与任何其他公共CA颁发的证书相同的安全保障。它还提供了TLSA记录，可防止DNS中间人攻击。由于mkcert是自签名的，因此不能提供与公共CA颁发的证书相同的安全保障。它仅适用于开发和测试环境，并不适合用于公共网站。但是，在本地环境中使用mkcert仍然比在未加密的HTTP连接上运行应用程序要更安全。</li></ul><p>总结：如果您需要在公共网站上使用SSL证书，建议使用Let’s Encrypt，因为Let’s Encrypt是一个针对公共网站的免费证书颁发机构。而如果您只是在开发和测试环境中使用SSL证书，则建议使用mkcert，因为mkcert则是一个针对本地开发和测试环境的工具，用于快速创建自签名的SSL证书。</p><h2 id="关于IP绑定"><a href="#关于IP绑定" class="headerlink" title="关于IP绑定"></a>关于IP绑定</h2><h3 id="Let’s-Encrypt-1"><a href="#Let’s-Encrypt-1" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h3><blockquote><p>Let’s Encrypt不支持绑定IP地址，它只能绑定域名。Let’s Encrypt是一个免费的公共SSL证书颁发机构，它的证书是基于域名颁发的。在颁发证书时，Let’s Encrypt需要验证域名的所有权和控制权，而不能验证IP地址的所有权和控制权。因此，如果您想使用Let’s Encrypt证书保护您的网站，您必须使用域名来访问您的网站，而不能使用IP地址。如果您的网站必须使用IP地址来访问，您可以考虑使用其他证书颁发机构颁发的证书，这些机构可能支持使用IP地址来验证证书的所有权和控制权。</p></blockquote><h3 id="mkcert-1"><a href="#mkcert-1" class="headerlink" title="mkcert"></a>mkcert</h3><blockquote><p>mkcert不支持直接绑定IP地址，因为SSL&#x2F;TLS证书的设计是基于域名而非IP地址的。然而，您可以通过使用一个本地的域名解析器，例如 <code>dnsmasq</code>，来将您的IP地址映射到一个本地的域名上。这样，您可以在本地使用这个域名来访问您的服务，然后使用mkcert来为这个域名生成SSL&#x2F;TLS证书。生成的证书将会包含这个本地的域名，而不是您的IP地址。请注意，这种方法只适用于本地开发和测试，因为这个本地的域名不能被公共的DNS服务器解析。如果您需要在公共网络上使用SSL&#x2F;TLS证书来保护您的服务，您必须使用一个真实的域名，并将它绑定到您的IP地址上。</p></blockquote><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote><p>win11，node(v16.18.0)、<a href="http://nginx.org/en/download.html"> nginx&#x2F;Windows-1.24.0</a></p></blockquote><h2 id="内网HTTPS-free"><a href="#内网HTTPS-free" class="headerlink" title="内网HTTPS(free)"></a>内网HTTPS(free)</h2><blockquote><p>综上所述，内网HTTPS采用mkcert进行开发。</p></blockquote><ol><li>mkcert下载：<a href="https://github.com/FiloSottile/mkcert/releases/tag/v1.4.4">下载链接</a></li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step1.png" alt="mkcert_step1"></p><ol start="2"><li>生成CA（certificate authority，即证书颁发机构）：输入cmd，初次安装mkcert</li></ol><p>输入<code>mkcert-v1.4.4-windows-amd64 -install</code> 命令 ，安装mkcert。将CA证书加入本地可信CA，使用此命令，就能帮助我们将mkcert使用的根证书加入了本地可信CA中，以后由该CA签发的证书在本地都是可信的。卸载命令 <code>mkcert-v1.4.4-windows-amd64 -uninstall</code></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step2.png" alt="mkcert_step2"></p><ol start="3"><li>安装成功，提示创建一个新的本地CA，本地CA现在已安装在系统信任存储中。</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step3.png" alt="mkcert_step3"></p><ol start="4"><li>测试mkcert是否安装成功</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step4.png" alt="mkcert_step4"></p><ol start="5"><li>查看CA证书存放位置</li></ol><p>输入<code>mkcert-v1.4.4-windows-amd64.exe -CAROOT</code>命令</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step5.png" alt="mkcert_step5"></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step5_1.png" alt="mkcert_step5_1"></p><p>按“Windows键+R”调出运行框，输入certmgr.msc命令。打开证书控制台。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step5_2.png" alt="mkcert_step5_2"></p><ol start="6"><li>生成自签证书,可供局域网内使用其他主机访问。</li></ol><ul><li><p>直接跟多个要签发的域名或 ip 就行了，比如签发一个仅本机访问的证书(可以通过127.0.0.1和localhost，以及 ipv6 地址::1访问)</p></li><li><p>需要在局域网内测试 https 应用，这种环境可能不对外，因此也无法使用像Let’s encrypt这种免费证书的方案给局域网签发一个可信的证书，而且Let’s encrypt本身也不支持认证 Ip。</p></li><li><p>证书可信的三个要素：</p><ul><li>由可信的 CA 机构签发；</li><li>访问的地址跟证书认证地址相符；</li><li>证书在有效期内；</li></ul></li><li><p>如果期望自签证书在局域网内使用，以上三个条件都需要满足。很明显自签证书一定可以满足证书在有效期内，那么需要保证前两条。我们签发的证书必须匹配浏览器的地址栏，比如局域网的 ip 或者域名，此外还需要信任 CA。操作如下：</p></li></ul><blockquote><p>创建自签名证书，例如要为域名：<code>fsllala.philisense.com</code>(随便输入的域名)和IP：<code>127.0.0.1 </code>、<code>192.168.11.242</code>(本机IP)创建证书，可以使用如下的命令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkcert-v1<span class="number">.4</span><span class="number">.4</span>-windows-amd64.<span class="property">exe</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.11</span><span class="number">.242</span> fsllala.<span class="property">philisense</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step6.png" alt="mkcert_step6"></p><p>在mkcert软件同目录下，生成了自签证书。如图所示。</p><blockquote><p>上述命令会自动使用第2步创建的CA生成证书文件，其中<code>xxx.pem</code>为证书，<code>xxx-key.pem</code>为私钥。生成了证书和私钥以后，就可以在web服务器开启https了。</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step6_1.png" alt="mkcert_step6_1"></p><ol start="7"><li>通过nginx搭建web服务器并开启https</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nginx常用命令</span></span><br><span class="line">start nginx 开启</span><br><span class="line">nginx -s stop 停止</span><br><span class="line">nginx -s reload 重新加载</span><br></pre></td></tr></table></figure><p>修改nginx.conf文件中的证书和私钥的路径，别的暂时不做修改。<img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step7.png" alt="mkcert_step7"></p><p>进入nginx文件夹，开启nginx</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step7_1.png" alt="mkcert_step7_1"></p><ol start="8"><li>访问搭建的服务</li></ol><p>通过步骤6配置的IP进行访问，这里经测试，目前127.0.0.1:443和fsllala.philisense.com:443穆目前不能访问。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step8.png" alt="mkcert_step8"></p><p>将vue项目通过<code>npm run build</code>进行打包，然后将dist文件下中的打包文件放到nginx的html目录中</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step8_1.png" alt="mkcert_step8_1"></p><p>再次通过步骤6配置的IP进行访问</p><p>注：这里可能会遇到<code>Invalid Host header</code>的错误，<a href="https://www.cnblogs.com/z937741304/p/10536237.html">解决方法</a></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step8_2.png" alt="mkcert_step8_2"></p><blockquote><p>这里可以看到警告，意思大概为：请求并未升级到https，因为访问地址是ip地址，应该采用域名进行https访问。</p></blockquote><ol start="9"><li>本地开发指定 Host</li></ol><p>因为网上没有特定的概念词语，因此我这边总结的标题是本地开发指定 Host，但其实简单点就是：<code>localhost -&gt; devlopment.com</code>。</p><p>通过win+R，然后输入<code>C:\Windows\System32\drivers\etc</code>，可以找到hosts文件</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step9.png" alt="mkcert_step9"></p><p>然后将步骤6中的域名与本地ip进行映射</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step9_1.png" alt="mkcert_step9_1"></p><p>稍等片刻，然后进行域名访问(这里不能挂代理，不然会访问不了)，可以看到，没有上面IP的提示了。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step9_2.png" alt="mkcert_step9_2"></p><ol start="10"><li>此时用局域网的<strong>另一台电脑</strong>进行访问，通过<code>https://192.168.11.242/#/</code>可以进行访问，通过<code>https://fsllala.philisense.com/#/</code>不能进行访问。</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/unsafe.png"></p><p>可以看到另一台电脑上显示此证书是不安全的，因为我们用的证书是自签的，而不是公认的CA。我们需要将第2步产生的CA：</p><p><code>rootCA-key.pem</code> 和 <code>rootCA.pem</code>，将 <code>rootCA.pem</code> 复制到 另一台PC 上，并将其后缀改为 <code>.crt</code>。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/rootCA.webp" alt="rootCA"></p><p>双击 <code>rootCA.crt</code>，根据提示安装证书，步骤如下：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/rootCA_install.webp" alt="rootCA_install"></p><p>重启浏览器再次访问，可以看到连接已经变为安全。</p><ol start="11"><li>另一台机器使用域名进行访问</li></ol><p>同搭建环境的机器一样，在另一台机器上，也需要本地开发指定 Host，即：<code>192.168.11.242 fsllala.philisense.com</code>，然后稍等片刻，即可进行访问。(步骤10解决了HTTPS不信任的问题)</p><ol start="12"><li>接口全部不能通信</li></ol><p>因为HTTP和HTTPS是两个不同的协议，所以两者不能进行通信。项目虽然是HTTPS了，但是接口都噶了，肯定是不行的，所以需要通过nginx进行接口的代理，将原来的HTTP接口，反向代理成HTTPS接口。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step12.png" alt="mkcert_step12"></p><ol start="13"><li>反向代理 接口HTTP为HTTPS，WS为WSS</li></ol><p>因为项目用到了HTTP和WS，所以都需要进行代理：以下代码意思为：接口中带有<code>/fsl/</code>的都会走<code>http://192.168.13.102:9003/</code>代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen       <span class="number">443</span> ssl;</span><br><span class="line">   server_name  localhost;</span><br><span class="line"></span><br><span class="line">#    ssl_certificate      cert.<span class="property">pem</span>;</span><br><span class="line">#    ssl_certificate_key  cert.<span class="property">key</span>;</span><br><span class="line">   #证书</span><br><span class="line">   ssl_certificate /mkcert2/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>+<span class="number">2.</span>pem;</span><br><span class="line">   #私钥</span><br><span class="line">   ssl_certificate_key /mkcert2/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>+<span class="number">2</span>-key.<span class="property">pem</span>;</span><br><span class="line"></span><br><span class="line">   ssl_session_cache    <span class="attr">shared</span>:<span class="attr">SSL</span>:1m;</span><br><span class="line">   ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">   ssl_ciphers  <span class="attr">HIGH</span>:!<span class="attr">aNULL</span>:!<span class="title class_">MD5</span>;</span><br><span class="line">   ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /fsl/ &#123;</span><br><span class="line"># root   html;</span><br><span class="line"># index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">    proxy_pass <span class="attr">http</span>:<span class="comment">//192.168.13.102:9003/; #现接口地址</span></span><br><span class="line"></span><br><span class="line"># websocket</span><br><span class="line"># proxy_pass <span class="attr">http</span>:<span class="comment">//192.168.13.102:9003/;  #websocket服务器</span></span><br><span class="line">proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">proxy_set_header <span class="title class_">Upgrade</span> $http_upgrade;</span><br><span class="line">proxy_set_header <span class="title class_">Connection</span> <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">       root   html;</span><br><span class="line">       index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step13.png" alt="mkcert_step13"></p><p>然后将vue项目中的接口服务地址和协议进行修改，如下图所示：</p><blockquote><p>需要修改IP，https&#x2F;wss、端口号、进行nginx代理的关键字(&#x2F;fsl&#x2F;)</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step13_1.png" alt="mkcert_step13_1"></p><p>然后将vue进行打包，放到nginx下的html目录下；nginx通过<code>nginx -s reload</code>进行重新加载。</p><ol start="14"><li>通过上述映射的域名(<a href="https://fsllala.philisense.com)进行访问/">https://fsllala.philisense.com)进行访问</a></li></ol><p>可能会出现一些图片&#x2F;标乱码的情况，关闭浏览器，重新打开即可。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step14.png" alt="mkcert_step14"></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/mkcert_step14_1.png" alt="mkcert_step14_1"></p><p>可以看到，此时接口(http、ws)均进行了代理，可以进行正常的访问。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>虽然可以将 SSL&#x2F;TLS 证书与 IP 地址绑定，但出于安全和兼容性考虑，建议尽可能使用域名来保护您的应用程序；</li><li>使用mkcert可以进行内网的https，但是局域网内的另一台PC，会显示此https不安全，需要安装CA根证书解决不安全的问题；</li><li>局域网的另一台PC，同搭建环境PC一样，不能直接通过映射的域名进行访问，需要修改host进行域名映射。</li></ul><h2 id="外网HTTPS"><a href="#外网HTTPS" class="headerlink" title="外网HTTPS"></a>外网HTTPS</h2><blockquote><p>外网免费HTTPS是不能绑定IP的，无论是上面提及的Let’s Encrypt，还是腾讯云，阿里云等。</p></blockquote><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p><a href="https://cloud.tencent.com/document/product/400/89868">免费SSL</a></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/tencentSSL.png" alt="tencentSSL"></p><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p><a href="https://help.aliyun.com/document_detail/205510.html?spm=5176.21213303.J_6704733920.9.411353c9TKatgq&scm=20140722.S_help@@%E6%96%87%E6%A1%A3@@205510._.ID_help@@%E6%96%87%E6%A1%A3@@205510-RL_%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6-LOC_main-OR_ser-V_2-RK_rerank-P0_0">免费SSL</a></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/aliSSL.png" alt="aliSSL"></p><h2 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a>相关文献</h2><ul><li><a href="https://blog.csdn.net/qq_34375473/article/details/122310838">为什么 HTTPS 比 HTTP 更安全？HTTPS 如何保证数据传输安全性</a></li><li><a href="https://blog.csdn.net/qq_36631580/article/details/126272277?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-126272277-blog-122310838.235%5Ev32%5Epc_relevant_increate_t0_download_v2_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-126272277-blog-122310838.235%5Ev32%5Epc_relevant_increate_t0_download_v2_base&utm_relevant_index=6">HTTPS为什么是安全的</a></li><li><a href="https://juejin.cn/post/7141308011921801223#heading-0">前端本地开发指定域名以及 HTTPS 配置方案</a></li><li><a href="https://zhuanlan.zhihu.com/p/379501905">mkcert 使用指南：如何快速创建自签名 SSL 证书</a></li><li><a href="https://xybdiy.blog.csdn.net/article/details/119676301?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-119676301-blog-128340862.235%5Ev32%5Epc_relevant_increate_t0_download_v2_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-119676301-blog-128340862.235%5Ev32%5Epc_relevant_increate_t0_download_v2_base&utm_relevant_index=5&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTE4MDcxL2FydGljbGUvZGV0YWlscy8xMjgzNDA4NjI/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NTAuNCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VDVFJMSVNUJTdFUmF0ZS00LTEyODM0MDg2Mi1ibG9nLTEyMzE2MDM1Ny4yMzUlNUV2MzIlNUVwY19yZWxldmFudF9pbmNyZWF0ZV90MF9kb3dubG9hZF92Ml9iYXNlJmRlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtNC0xMjgzNDA4NjItYmxvZy0xMjMxNjAzNTcuMjM1JTVFdjMyJTVFcGNfcmVsZXZhbnRfaW5jcmVhdGVfdDBfZG93bmxvYWRfdjJfYmFzZSZ1dG1fcmVsZXZhbnRfaW5kZXg9Ng==">使用mkcert工具生成受信任的SSL证书，解决局域网本地https访问问题</a></li><li><a href="https://blog.zwying.com/archives/51.html">windows使用mkcert配置本地https环境</a></li><li><a href="https://www.bilibili.com/read/cv19764245">本地 https 环境解决方案</a></li><li><a href="https://juejin.cn/post/6844903834272153613">使用mkcert创建自签名证书</a></li><li><a href="https://www.cnblogs.com/z937741304/p/10536237.html">解决Invalid Host header问题</a></li><li><a href="https://youyongba.github.io/doc/html/mkcert/">mkcert + nginx 搭建https</a></li><li><a href="https://blog.csdn.net/weixin_38242293/article/details/112214657?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-112214657-blog-128340862.235%5Ev32%5Epc_relevant_increate_t0_download_v2_base&spm=1001.2101.3001.4242.2&utm_relevant_index=4">window使用mkcert，nginx的配置https证书</a></li><li><a href="https://blog.csdn.net/m0_37814112/article/details/123737847">Linux运维实战：Nginx方向代理wss或ws</a></li><li><a href="https://blog.csdn.net/weixin_42714661/article/details/122978829">Host相关</a></li><li><a href="https://zhuanlan.zhihu.com/p/110168484">Let’s Encrypt实践指北</a></li><li><a href="https://www.cnblogs.com/teamblog/p/6219204.html">免费SSL证书 之Let’s Encrypt申请与部署(Windows Nginx)</a></li><li><a href="https://xsphehe.com/blogDetail?id=8">windows环境免费申请SSL证书</a></li><li><a href="https://blog.csdn.net/qq_33313155/article/details/124746273">windows使用Certbot配置nginx的https证书</a></li><li><a href="https://www.51cto.com/article/750673.html">如何使用 Nginx 和 Certbot 创建一个安全的 Web 服务器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/articles/7067fd0d.html"/>
      <url>/articles/7067fd0d.html</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript是什么"><a href="#TypeScript是什么" class="headerlink" title="TypeScript是什么"></a>TypeScript是什么</h2><ul><li>TS是JS的超集，所以JS基础的类型都包含在内</li></ul><h2 id="TypeScript开发环境搭建"><a href="#TypeScript开发环境搭建" class="headerlink" title="TypeScript开发环境搭建"></a>TypeScript开发环境搭建</h2><ol><li>全局安装typescript：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><ol start="2"><li>查看typescript当前版本号：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><ol start="3"><li>将TS编译成JS( TS 不能直接在浏览器执行，需要编译器将TS转为JS)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.<span class="property">ts</span></span><br></pre></td></tr></table></figure><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>基础类型：Number、String、Boolean、null、undefined以及 ES6 的 <a href="http://es6.ruanyifeng.com/#docs/symbol">Symbol</a> 和 ES10 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>。</li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;这是字符串类型&quot;</span>;</span><br><span class="line"><span class="comment">//上方我们将str这个变量定义为了string类型，如果对他输入其他类型的内容就会报错，例如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span> = <span class="number">666</span>;</span><br><span class="line"><span class="comment">//这个就会报错了，会提示你不能将类型&quot;number&quot;分配给类型&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">muban</span>: <span class="built_in">string</span> = <span class="string">`web<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line"><span class="comment">//我们也可以使用ES6中的模板字符串</span></span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>支持十六进制、十进制、八进制和<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">123</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">notANumber</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">infinityNumber</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b2</span>:<span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>); <span class="comment">//隐式转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`b:<span class="subst">$&#123;b&#125;</span>,b2:<span class="subst">$&#123;b2&#125;</span>`</span>); <span class="comment">//b:false,b2:true</span></span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3><blockquote><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fnVoid</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test void&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">//可以这样后面啥也不跟</span></span><br><span class="line">    <span class="comment">// 函数也可以定义为空值，如果定义了void则不能返回内容,否则就会报错，例如：</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnVoid2</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    <span class="comment">//这个就会报错了，会提示你不能将类型“number”分配给类型“void”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></p></blockquote><p><strong>void也可以定义undefined 和 null类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="built_in">void</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>TIPS:</strong></p><p>如果你配置了tsconfig.json 开启了严格模式: 则 null 不能 赋予 void 类型 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/void1674789861382.png" alt="void"></p><p><strong>解决方法：</strong></p><ol><li><code>tsc --init</code>创建tsconfig文件；</li><li><code>tsconfig.json</code>文件内搜索<code>strict</code>，值改为<code>false</code>；</li></ol><h3 id="Null和undefined类型"><a href="#Null和undefined类型" class="headerlink" title="Null和undefined类型"></a>Null和undefined类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;<span class="comment">//定义undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;<span class="comment">//定义null</span></span><br></pre></td></tr></table></figure><h3 id="void-和-undefined-和-null-最大的区别"><a href="#void-和-undefined-和-null-最大的区别" class="headerlink" title="void 和 undefined 和 null 最大的区别"></a>void 和 undefined 和 null 最大的区别</h3><blockquote><p>void的内容也是不能去赋值给别人的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">str = u;</span><br><span class="line"><span class="comment">// 这个就会报错了，会提示你不能将类型“void”分配给类型“string”</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/void21674791309884.png" alt="void"></p><blockquote><p>下面这样undefined与null可以赋值</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">str = u;</span><br></pre></td></tr></table></figure><h2 id="NodeJs-环境执行TS"><a href="#NodeJs-环境执行TS" class="headerlink" title="NodeJs 环境执行TS"></a>NodeJs 环境执行TS</h2><blockquote><p>上面每次执行代码，都需要将TS编译成JS，然后再通过NodeJs来执行JS，有点繁琐。</p></blockquote><p>NodeJs直接运行TS需要安装两个依赖：</p><ul><li><code>npm install @types/node -D</code>（node环境支持的依赖必装）</li><li><code>npm install ts-node -g</code></li><li>输出版本号：<code>ts-node -v</code></li><li>NodeJs执行TS：<code>ts-node xxx.ts</code></li></ul><h2 id="Any-类型-和-unknown-顶级类型"><a href="#Any-类型-和-unknown-顶级类型" class="headerlink" title="Any 类型 和 unknown 顶级类型"></a>Any 类型 和 unknown 顶级类型</h2><blockquote><p>any与unknown没有强制限定哪种类型，可以定义任何类型的值，被称为顶级类型(top type)。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//any 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anys</span>: <span class="built_in">any</span>;</span><br><span class="line">anys = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">anys = <span class="number">18</span>;               <span class="comment">// OK</span></span><br><span class="line">anys = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">anys = [];               <span class="comment">// OK</span></span><br><span class="line">anys = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">anys = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">anys = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">anys = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">18</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h3 id="any与unknow区别"><a href="#any与unknow区别" class="headerlink" title="any与unknow区别"></a>any与unknow区别</h3><blockquote><p>TypeScript 3.0中引入的 unknown 类型也被认为是 top type ，但它更安全。与 any 一样，所有类型都可以分配给unknown</p><p>unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow</p></blockquote><ol><li>unknown可赋值对象只有unknown 和 any</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown类型不能赋值给unknown 和 any之外的其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">names2</span>: <span class="built_in">string</span> = names;  <span class="comment">// 不能将类型“unknown”分配给类型“string”。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ages</span>: <span class="built_in">any</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ages2</span>: <span class="built_in">string</span> = ages;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ccc</span>: <span class="built_in">any</span> = <span class="string">&quot;789&quot;</span>;</span><br><span class="line"></span><br><span class="line">aaa = bbb;</span><br><span class="line">aaa = ccc;</span><br></pre></td></tr></table></figure><ol start="2"><li>unknow 不能调用属性和方法</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是any类型在对象没有这个属性的时候还在获取是不会报错的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">any</span> = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">a</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是unknow 不能调用属性和方法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj2</span>: <span class="built_in">unknown</span> = &#123; <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">ccc</span>: (): <span class="function"><span class="params">number</span> =&gt;</span> <span class="number">213</span> &#125;;</span><br><span class="line">obj2.<span class="property">b</span>;  <span class="comment">//类型“unknown”上不存在属性“b”。</span></span><br><span class="line">obj2.<span class="title function_">ccc</span>(); <span class="comment">//类型“unknown”上不存在属性“ccc”。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>声明变量的时候没有指定任意类型默认为any(如果使用any 就失去了TS类型检测的作用)</li></ol><h2 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a>接口和对象类型</h2><h3 id="interface定义对象类型"><a href="#interface定义对象类型" class="headerlink" title="interface定义对象类型"></a>interface定义对象类型</h3><blockquote><p>在JS中，我们声明对象，直接写就好了</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在TS中，我们定义对象的方式要用关键字<strong>interface</strong>（接口），我的理解是使用<strong>interface</strong>来定义一种约束(类型)，让数据的结构满足约束的格式。定义方式如下：</p></blockquote><ul><li>有点类似于<strong>类</strong>的写法</li></ul><ol><li>使用接口约束的时候不能多一个属性也不能少一个属性，必须与接口保持一致</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *这样写是会报错的 因为我们在Person定义了name、age 但是对象里面缺少age属性</span></span><br><span class="line"><span class="comment"> *使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment"> *必须与接口保持一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  这个就会报错了，会提示 类型 &quot;&#123; name: string; &#125;&quot; 中缺少属性 &quot;age&quot;，但类型 &quot;Person&quot; 中需要该属性。</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;fsllala&quot;</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>重名interface  可以合并</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: A = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123; name: &#x27;fsllala&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>可选属性 使用?操作符</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所以说这样写也是没问题的</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然这样写也没问题</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person2</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsl&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>索引签名[propName: string]</li></ol><blockquote><p>后端给我们返回的字段不确定，类型也不确定的时候可以用任意属性；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在这个例子当中我们看到接口中并没有定义ccc和ddd但是并没有报错</span></span><br><span class="line"><span class="comment"> * 因为我们定义了[propName: string]: any;</span></span><br><span class="line"><span class="comment"> * 允许添加新的任意属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsl&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">ccc</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">ddd</span>:<span class="string">&#x27;456&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>只读属性 readonly</li></ol><blockquote><p>readonly 只读属性是不允许被赋值的只能读取；(跟input的readonly属性类似)；</p><p>常用于<code>函数</code>和后台返回的数据<code>ID</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>,</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">cb</span>: <span class="function">() =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsl&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">ccc</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">cb</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样写是会报错的 会提示: 无法为“id”赋值，因为它是只读属性。</span></span><br><span class="line">person.<span class="property">id</span> = <span class="number">3</span>;  </span><br></pre></td></tr></table></figure><ol start="6"><li>添加函数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>,</span><br><span class="line">    <span class="title function_">cb</span>(): <span class="built_in">number</span>, <span class="comment">//定义函数和函数返回值</span></span><br><span class="line">    <span class="attr">foo</span>: <span class="function">() =&gt;</span> <span class="built_in">boolean</span>  <span class="comment">//定义函数和函数返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsl&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">ccc</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">dd</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">cb</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">456</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>继承</li></ol><blockquote><p>和ES6中类的继承类似；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: B = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="interface定义函数类型"><a href="#interface定义函数类型" class="headerlink" title="interface定义函数类型"></a>interface定义函数类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">    <span class="comment">// 函数是个方法,所以是 ();返回一个 number类型的数组;参数是name,为string类型</span></span><br><span class="line">    (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="title class_">Fn</span> = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><blockquote><p>数组类型有多种声明方法：</p></blockquote><ol><li>普通方式：类型[ ]</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">//数组类型的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];  <span class="comment">//字符串类型的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: <span class="built_in">boolean</span>[] = [<span class="literal">true</span>, <span class="literal">false</span>];<span class="comment">//布尔类型的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="literal">true</span>,[],&#123;&#125;]; <span class="comment">//任意类型的数组</span></span><br></pre></td></tr></table></figure><ol start="2"><li>数组泛型 ：Array&lt;类型&gt;</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">//数组类型的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];  <span class="comment">//字符串类型的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">true</span>, <span class="literal">false</span>];<span class="comment">//布尔类型的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="literal">true</span>, [], &#123;&#125;]; <span class="comment">//任意类型的数组</span></span><br></pre></td></tr></table></figure><ol start="3"><li>用接口表示数组：一般用来描述类数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">NumArray</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//表示：只要索引的类型是数字时，那么值的类型必须是数字。</span></span><br></pre></td></tr></table></figure><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><blockquote><p>使用<code>interface</code>方式来定义对象数组</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表示对象类型的数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr1</span>: X[] = [&#123; <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;fsl&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[][] = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]; <span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">number</span>[][][] = [[[<span class="number">1</span>]], [[<span class="number">2</span>]]];<span class="comment">//三维数组</span></span><br><span class="line"><span class="comment">//泛型写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;&gt; = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]; <span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt;&gt;&gt; = [[[<span class="number">1</span>]], [[<span class="number">2</span>,<span class="string">&quot;lala&quot;</span>]]];<span class="comment">//三维数组</span></span><br></pre></td></tr></table></figure><h3 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h3><blockquote><p>函数内置的arguments，是个类数组，其实就是有length属性的对象；所以没有数组的方法：push、pop…</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// [Arguments] &#123; &#x27;0&#x27;: 2, &#x27;1&#x27;: 3, &#x27;2&#x27;: 4 &#125;  伪(类)数组(没有数组的方法:push、pop...)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [ 2, 3, 4 ]  数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>所以就会导致如下情况：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">//错误的arguments 是类数组不能这样定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = <span class="variable language_">arguments</span>; <span class="comment">// 这样写是会报错的 会提示: 类型“IArguments”缺少类型“number[]”的以下属性: pop, push, concat, join 及其他 27 项。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">number</span>[] = args; <span class="comment">// 这个是可以的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ts内置对象IArguments 定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr3</span>:<span class="title class_">IArguments</span>=<span class="variable language_">arguments</span>; <span class="comment">//类数组用IArguments</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">[<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line"><span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数拓展"><a href="#函数拓展" class="headerlink" title="函数拓展"></a>函数拓展</h2><ol><li>参数不能多传，也不能少传 必须按照约定的类型来</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表示：实参name是string,age是number类型，函数的返回值是 string类型;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// fsllala18</span></span><br></pre></td></tr></table></figure><ol start="2"><li>少传参数：定义默认的参数</li></ol><ul><li>ES6默认实参</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = <span class="number">24</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表示：实参name是string,age是number类型，函数的返回值是 string类型;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//fsllala24</span></span><br></pre></td></tr></table></figure><ul><li>可选属性 使用?操作符(不传默认为undefined)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表示：实参name是string,age是number类型，函数的返回值是 string类型;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//fsllalaundefined</span></span><br></pre></td></tr></table></figure><ul><li>接口定义函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">user: User</span>): <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示：实参是定义的 接口User类型，函数的返回值是 传入的参数;</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &#123; name: &#x27;fsllala&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>函数重载</li></ul><blockquote><p>函数重载：方法名字相同，而参数不同，与返回值无关。</p><p>如果参数类型不同，则参数类型应设置为 <strong>any</strong>。</p><p>参数数量不同你可以将不同的参数设置为可选。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span>, params2: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> <span class="comment">// 上面定义的两个是重载函数,下面是执行函数 (遵循上面两个重载函数,执行函数是写逻辑的)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">any</span>, params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Tip：JS好像是不能这样写的，JS重载是通过函数内部的arguments的长度来实现的；</p></blockquote><h2 id="类型断言-联合类型-交叉类型"><a href="#类型断言-联合类型-交叉类型" class="headerlink" title="类型断言 | 联合类型 | 交叉类型"></a>类型断言 | 联合类型 | 交叉类型</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><blockquote><p>可以是多种类型，中间用<code>|</code>隔开</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是17XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone2</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>函数使用联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = (<span class="attr">types</span>:<span class="built_in">number</span> | <span class="built_in">boolean</span>):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !!types</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result =<span class="title function_">fn1</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">fn1</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><blockquote><p>类似于<code>extends</code></p><p>多种类型的集合，联合对象将具有所联合类型的所有成员，中间用<code>&amp;</code>隔开；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Man</span> &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsllala</span> = (<span class="params">man: People &amp; Man</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">age</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">height</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">sex</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fsllala</span>(&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">173</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><blockquote><p>在使用<code>联合类型</code>的时候，可能会遇到某个属性A类型没有，B类型有，比如<code>length</code>属性<code>number没有</code>，<code>string有</code>；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn1 = <span class="keyword">function</span>(<span class="params">params:<span class="built_in">number</span>|<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">length</span>);  <span class="comment">//  类型“number”上不存在属性“length”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>(<span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个时候就得用到<code>类型断言</code>：需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值 <span class="keyword">as</span> 类型　　或　　&lt;类型&gt;值  value <span class="keyword">as</span> <span class="built_in">string</span>  &lt;<span class="built_in">string</span>&gt;value</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn1 = <span class="keyword">function</span> (<span class="params">params: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((params <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>(<span class="string">&quot;123456&quot;</span>); <span class="comment">//6</span></span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">123456</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h3 id="使用any临时断言"><a href="#使用any临时断言" class="headerlink" title="使用any临时断言"></a>使用any临时断言</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//这样写会报错因为window没有abc这个东西</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><blockquote><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p></blockquote><h3 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h3><p>Boolean、Number、string、RegExp、Date、Error</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;lala~&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><h3 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h3><p><strong><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">body</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">allDiv</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">div</span>:<span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: MouseEvent</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//dom元素的映射表</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HTMLElementTagNameMap</span> &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="title class_">HTMLAnchorElement</span>;</span><br><span class="line">    <span class="string">&quot;abbr&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;applet&quot;</span>: <span class="title class_">HTMLAppletElement</span>;</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="title class_">HTMLAreaElement</span>;</span><br><span class="line">    <span class="string">&quot;article&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;aside&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;audio&quot;</span>: <span class="title class_">HTMLAudioElement</span>;</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;base&quot;</span>: <span class="title class_">HTMLBaseElement</span>;</span><br><span class="line">    <span class="string">&quot;bdi&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;bdo&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;blockquote&quot;</span>: <span class="title class_">HTMLQuoteElement</span>;</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: <span class="title class_">HTMLBodyElement</span>;</span><br><span class="line">    <span class="string">&quot;br&quot;</span>: <span class="title class_">HTMLBRElement</span>;</span><br><span class="line">    <span class="string">&quot;button&quot;</span>: <span class="title class_">HTMLButtonElement</span>;</span><br><span class="line">    <span class="string">&quot;canvas&quot;</span>: <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">    <span class="string">&quot;caption&quot;</span>: <span class="title class_">HTMLTableCaptionElement</span>;</span><br><span class="line">    <span class="string">&quot;cite&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;col&quot;</span>: <span class="title class_">HTMLTableColElement</span>;</span><br><span class="line">    <span class="string">&quot;colgroup&quot;</span>: <span class="title class_">HTMLTableColElement</span>;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="title class_">HTMLDataElement</span>;</span><br><span class="line">    <span class="string">&quot;datalist&quot;</span>: <span class="title class_">HTMLDataListElement</span>;</span><br><span class="line">    <span class="string">&quot;dd&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;del&quot;</span>: <span class="title class_">HTMLModElement</span>;</span><br><span class="line">    <span class="string">&quot;details&quot;</span>: <span class="title class_">HTMLDetailsElement</span>;</span><br><span class="line">    <span class="string">&quot;dfn&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;dialog&quot;</span>: <span class="title class_">HTMLDialogElement</span>;</span><br><span class="line">    <span class="string">&quot;dir&quot;</span>: <span class="title class_">HTMLDirectoryElement</span>;</span><br><span class="line">    <span class="string">&quot;div&quot;</span>: <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="string">&quot;dl&quot;</span>: <span class="title class_">HTMLDListElement</span>;</span><br><span class="line">    <span class="string">&quot;dt&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;em&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;embed&quot;</span>: <span class="title class_">HTMLEmbedElement</span>;</span><br><span class="line">    <span class="string">&quot;fieldset&quot;</span>: <span class="title class_">HTMLFieldSetElement</span>;</span><br><span class="line">    <span class="string">&quot;figcaption&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;figure&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;font&quot;</span>: <span class="title class_">HTMLFontElement</span>;</span><br><span class="line">    <span class="string">&quot;footer&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;form&quot;</span>: <span class="title class_">HTMLFormElement</span>;</span><br><span class="line">    <span class="string">&quot;frame&quot;</span>: <span class="title class_">HTMLFrameElement</span>;</span><br><span class="line">    <span class="string">&quot;frameset&quot;</span>: <span class="title class_">HTMLFrameSetElement</span>;</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h2&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h3&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h4&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h5&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h6&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;head&quot;</span>: <span class="title class_">HTMLHeadElement</span>;</span><br><span class="line">    <span class="string">&quot;header&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;hgroup&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;hr&quot;</span>: <span class="title class_">HTMLHRElement</span>;</span><br><span class="line">    <span class="string">&quot;html&quot;</span>: <span class="title class_">HTMLHtmlElement</span>;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;iframe&quot;</span>: <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="title class_">HTMLImageElement</span>;</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    <span class="string">&quot;ins&quot;</span>: <span class="title class_">HTMLModElement</span>;</span><br><span class="line">    <span class="string">&quot;kbd&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;label&quot;</span>: <span class="title class_">HTMLLabelElement</span>;</span><br><span class="line">    <span class="string">&quot;legend&quot;</span>: <span class="title class_">HTMLLegendElement</span>;</span><br><span class="line">    <span class="string">&quot;li&quot;</span>: <span class="title class_">HTMLLIElement</span>;</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: <span class="title class_">HTMLLinkElement</span>;</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;map&quot;</span>: <span class="title class_">HTMLMapElement</span>;</span><br><span class="line">    <span class="string">&quot;mark&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;marquee&quot;</span>: <span class="title class_">HTMLMarqueeElement</span>;</span><br><span class="line">    <span class="string">&quot;menu&quot;</span>: <span class="title class_">HTMLMenuElement</span>;</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: <span class="title class_">HTMLMetaElement</span>;</span><br><span class="line">    <span class="string">&quot;meter&quot;</span>: <span class="title class_">HTMLMeterElement</span>;</span><br><span class="line">    <span class="string">&quot;nav&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;noscript&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;object&quot;</span>: <span class="title class_">HTMLObjectElement</span>;</span><br><span class="line">    <span class="string">&quot;ol&quot;</span>: <span class="title class_">HTMLOListElement</span>;</span><br><span class="line">    <span class="string">&quot;optgroup&quot;</span>: <span class="title class_">HTMLOptGroupElement</span>;</span><br><span class="line">    <span class="string">&quot;option&quot;</span>: <span class="title class_">HTMLOptionElement</span>;</span><br><span class="line">    <span class="string">&quot;output&quot;</span>: <span class="title class_">HTMLOutputElement</span>;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="title class_">HTMLParagraphElement</span>;</span><br><span class="line">    <span class="string">&quot;param&quot;</span>: <span class="title class_">HTMLParamElement</span>;</span><br><span class="line">    <span class="string">&quot;picture&quot;</span>: <span class="title class_">HTMLPictureElement</span>;</span><br><span class="line">    <span class="string">&quot;pre&quot;</span>: <span class="title class_">HTMLPreElement</span>;</span><br><span class="line">    <span class="string">&quot;progress&quot;</span>: <span class="title class_">HTMLProgressElement</span>;</span><br><span class="line">    <span class="string">&quot;q&quot;</span>: <span class="title class_">HTMLQuoteElement</span>;</span><br><span class="line">    <span class="string">&quot;rp&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;rt&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;ruby&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;s&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;samp&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;script&quot;</span>: <span class="title class_">HTMLScriptElement</span>;</span><br><span class="line">    <span class="string">&quot;section&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;select&quot;</span>: <span class="title class_">HTMLSelectElement</span>;</span><br><span class="line">    <span class="string">&quot;slot&quot;</span>: <span class="title class_">HTMLSlotElement</span>;</span><br><span class="line">    <span class="string">&quot;small&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="title class_">HTMLSourceElement</span>;</span><br><span class="line">    <span class="string">&quot;span&quot;</span>: <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">    <span class="string">&quot;strong&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;style&quot;</span>: <span class="title class_">HTMLStyleElement</span>;</span><br><span class="line">    <span class="string">&quot;sub&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;summary&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;sup&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;table&quot;</span>: <span class="title class_">HTMLTableElement</span>;</span><br><span class="line">    <span class="string">&quot;tbody&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;td&quot;</span>: <span class="title class_">HTMLTableDataCellElement</span>;</span><br><span class="line">    <span class="string">&quot;template&quot;</span>: <span class="title class_">HTMLTemplateElement</span>;</span><br><span class="line">    <span class="string">&quot;textarea&quot;</span>: <span class="title class_">HTMLTextAreaElement</span>;</span><br><span class="line">    <span class="string">&quot;tfoot&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;th&quot;</span>: <span class="title class_">HTMLTableHeaderCellElement</span>;</span><br><span class="line">    <span class="string">&quot;thead&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="title class_">HTMLTimeElement</span>;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="title class_">HTMLTitleElement</span>;</span><br><span class="line">    <span class="string">&quot;tr&quot;</span>: <span class="title class_">HTMLTableRowElement</span>;</span><br><span class="line">    <span class="string">&quot;track&quot;</span>: <span class="title class_">HTMLTrackElement</span>;</span><br><span class="line">    <span class="string">&quot;u&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;ul&quot;</span>: <span class="title class_">HTMLUListElement</span>;</span><br><span class="line">    <span class="string">&quot;var&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;video&quot;</span>: <span class="title class_">HTMLVideoElement</span>;</span><br><span class="line">    <span class="string">&quot;wbr&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义Promise"><a href="#定义Promise" class="headerlink" title="定义Promise"></a>定义Promise</h3><p>如果我们不指定返回的类型TS是推断不出来返回的是什么类型</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/promise1675065334340.png" alt="promise"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定返回的类型</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/promise21675065518550.png" alt="promise"></p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 函数定义返回promise 语法规则：<code>Promise&lt;T&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;  <span class="comment">//  这里定义了 Promise&lt;number&gt; </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><blockquote><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。详见：<a href="https://fsllala.eu.org/articles/28239a8d.html">面向对象</a></p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在TypeScript是不允许直接在constructor 定义变量的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sub: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="comment">//这里为了更好的区分,采用的不同的属性名;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name11</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age11</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sub11</span> = sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/class1675069121527.png" alt="class"></p><p> 需要在constructor上面先声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name11</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">age11</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="attr">sub11</span>:<span class="built_in">boolean</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sub: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="comment">//这里为了更好的区分,采用的不同的属性名;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name11</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age11</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sub11</span> = sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h3><blockquote><p> 总共有三个：public private protected</p></blockquote><ul><li>public(class默认)：class定义的属性或方法内部外部都能访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name11</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age11</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">sub11</span>: <span class="built_in">boolean</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sub: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="comment">//这里为了更好的区分,采用的不同的属性名;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name11</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age11</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sub11</span> = sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name11</span>);  <span class="comment">// fsllala</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age11</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><ul><li>private：只能在内部访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name11</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age11</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">sub11</span>: <span class="built_in">boolean</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sub: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="comment">//这里为了更好的区分,采用的不同的属性名;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name11</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age11</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sub11</span> = sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name11</span>);  <span class="comment">// fsllala</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age11</span>); <span class="comment">// 这里会报错，提示: 属性“age11”为私有属性，只能在类“Person”中访问</span></span><br></pre></td></tr></table></figure><ul><li>protected：只能在内部和继承的子类中访问 不能在外部访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name11</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age11</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">sub11</span>: <span class="built_in">boolean</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sub: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="comment">//这里为了更好的区分,采用的不同的属性名;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name11</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age11</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sub11</span> = sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name11</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age11</span>);  <span class="comment">// 这里会报错，提示: 属性“age11”为私有属性，只能在类“Person”中访问</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sub11</span>); <span class="comment">// 这里没问题,因为是继承的子类</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-静态属性-和-静态方法"><a href="#static-静态属性-和-静态方法" class="headerlink" title="static 静态属性 和 静态方法"></a>static 静态属性 和 静态方法</h3><blockquote><p>静态方法中的this指向类本身，非静态方法的this指向实例对象；</p><p>即：静态方法中的this，只能调用<code>static</code>定义的属性或方法；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name11</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age11</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">sub11</span>: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">static</span> <span class="attr">aaa</span>:<span class="built_in">string</span>=<span class="string">&quot;静态属性直接赋值&quot;</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sub: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="comment">//这里为了更好的区分,采用的不同的属性名;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name11</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age11</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sub11</span> = sub;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">run</span>():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="comment">// this.name11;  //这里会报错，提示:  类型“typeof Person”上不存在属性“name11”。</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">aaa</span>; <span class="comment">//这里没问题,静态方法中的this指向对象本身</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;静态方法中的this指向对象本身&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">aaa</span>);<span class="comment">// 静态属性直接赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">run</span>());<span class="comment">// 静态方法中的this指向对象本身</span></span><br></pre></td></tr></table></figure><h3 id="interface-定义类"><a href="#interface-定义类" class="headerlink" title="interface 定义类"></a>interface 定义类</h3><blockquote><p>TS interface 定义类，使用关键字 implements ；后面跟interface的名字，多个用逗号隔开；继承还是用extends；</p><p>与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。</p><p>extends可以接口继承接口，可以类继承类；implements是类实现接口；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass</span> &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="attr">type</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass2</span> &#123;</span><br><span class="line">    <span class="title function_">set</span>(): <span class="built_in">void</span>,</span><br><span class="line">    <span class="attr">asd</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> <span class="keyword">implements</span> <span class="title class_">PersonClass</span>, <span class="title class_">PersonClass2</span> &#123;</span><br><span class="line">    <span class="attr">asd</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">asd</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><blockquote><p>应用场景：如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p><p>或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</p></blockquote><ul><li>下面这段代码会报错，因为抽象类无法被实例化</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><ul><li>我们在A类定义了 getName 抽象方法但未实现；</li><li>我们B类实现了A定义的抽象方法 如果实现就不报错 <strong>我们定义的抽象方法必须在派生类实现</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有 abstract 的可以直接定义方法</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法“getName”不能具有实现，因为它标记为抽象。</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;lala&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">b.<span class="title function_">setName</span>(<span class="string">&quot;haha~&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">getName</span>()); <span class="comment">// haha~</span></span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><ul><li>元组就是数组的变种；</li><li>如果需要一个固定大小的不同类型值的集合，我们需要使用元组；</li><li>元组（Tuple）是固定数量的不同类型的元素的组合。</li><li>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>, <span class="built_in">boolean</span>, <span class="built_in">string</span>, <span class="literal">undefined</span>] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&#x27;sring&#x27;</span>, <span class="literal">undefined</span>] </span><br></pre></td></tr></table></figure><p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">arr[<span class="number">0</span>].<span class="property">length</span> <span class="comment">// 这里会报错,提示：类型“number”上不存在属性“length”</span></span><br><span class="line">arr[<span class="number">1</span>].<span class="property">length</span> <span class="comment">// 这里 么的问题</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//数字是没有length 的</span></span><br></pre></td></tr></table></figure><p>越界元素</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于越界的元素他的类型被限制为 联合类型（就是你在元组中定义的类型）==&gt;  string | number[]</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="built_in">boolean</span>); <span class="comment">// 这里会报错,提示： “boolean”仅表示类型，但在此处却作为值使用。</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>);<span class="comment">// 这里 么的问题</span></span><br></pre></td></tr></table></figure><p>应用场景 例如定义excel返回的数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">excel</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">string</span>][] = [</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><ul><li>在JavaScript中是没有枚举的概念的TS帮我们定义了枚举这个类型；</li><li>使用枚举：通过enum关键字定义我们的枚举；</li><li>作用：定义常量，约束统一；</li></ul><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>例如 红绿蓝 Red &#x3D; 0 Green &#x3D; 1 Blue&#x3D; 2 分别代表红色0 绿色为1 蓝色为2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Red</span>); <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Green</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始的所以也就是</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Blue</span> = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Red</span>); <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Green</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>); <span class="comment">//2</span></span><br><span class="line"><span class="comment">//默认就是从0开始的 可以不写值</span></span><br></pre></td></tr></table></figure><p>增长枚举</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="number">5</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Red</span>); <span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Green</span>); <span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>); <span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>自定义枚举</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="number">5</span>,</span><br><span class="line">    <span class="title class_">Green</span> = <span class="number">13</span>,</span><br><span class="line">    <span class="title class_">Blue</span> = <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Red</span>); <span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Green</span>); <span class="comment">//13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="title class_">Blue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Red</span>); <span class="comment">//red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Green</span>); <span class="comment">//green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>); <span class="comment">//blue</span></span><br></pre></td></tr></table></figure><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><p>枚举可以混合字符串和数字成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">    <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h3><p>定义一个枚举Color 定义一个接口AA 他有一个属性red 值为Color.Yes</p><p>声明对象的时候要遵循这个规则</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">    <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> AA &#123;</span><br><span class="line">    <span class="attr">red</span>: <span class="title class_">Color</span>.<span class="property">Yes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: <span class="variable constant_">AA</span> = &#123;</span><br><span class="line">    <span class="comment">// 下面两种写法都可以</span></span><br><span class="line">    <span class="comment">// red: Color.Yes</span></span><br><span class="line">    <span class="attr">red</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><blockquote><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 <code>const</code>枚举。 常量枚举通过在枚举上使用 <code>const</code>修饰符来定义</p></blockquote><ul><li>let 和 var 都是不允许声明enum的，只能使用const声明</li><li>const 声明的枚举会被编译成常量</li><li>普通声明的枚举编译完后是个对象</li></ul><ol><li>普通声明编译之后</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Yes</span>,</span><br><span class="line">    <span class="title class_">No</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">code</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (code === <span class="title class_">Color</span>.<span class="property">No</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Color</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Color</span>) &#123;</span><br><span class="line">    <span class="title class_">Color</span>[<span class="title class_">Color</span>[<span class="string">&quot;Yes&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="title class_">Color</span>[<span class="title class_">Color</span>[<span class="string">&quot;No&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Color</span> || (<span class="title class_">Color</span> = &#123;&#125;));</span><br><span class="line"><span class="keyword">var</span> code = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (code === <span class="title class_">Color</span>.<span class="property">No</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>const声明编译之后</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Yes</span>,</span><br><span class="line">    <span class="title class_">No</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">code</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (code === <span class="title class_">Color</span>.<span class="property">No</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (code === <span class="number">1</span> <span class="comment">/* Color.No */</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><ul><li>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</li><li>要注意的是 <em>不会</em>为字符串枚举成员生成反向映射。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">    success</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="title class_">Enum</span>.<span class="property">success</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title class_">Enum</span>[result];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">//success</span></span><br></pre></td></tr></table></figure><h2 id="类型推论-类型别名"><a href="#类型推论-类型别名" class="headerlink" title="类型推论|类型别名"></a>类型推论|类型别名</h2><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><blockquote><p>我声明了一个变量但是没有定义类型</p><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/lxtl1675250862922.png" alt="类型推论"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line"><span class="comment">// 会报错，虽然我们没用明确限制类型，但是TS编辑器会自动推论为string类型。就不能够在赋值给别的类型</span></span><br><span class="line">str = <span class="number">18</span>;  <span class="comment">//这里会报错,提示: 不能将类型“number”分配给类型“string”。 </span></span><br></pre></td></tr></table></figure><p>如果你声明变量没有定义类型也没有赋值这时候 TS 会推断成 any 类型可以进行任何操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str<span class="comment">//为any类型</span></span><br><span class="line">str = <span class="number">123</span></span><br><span class="line">str = <span class="string">&quot;马杀鸡&quot;</span></span><br><span class="line">str = <span class="literal">false</span></span><br><span class="line">str = []</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><blockquote><p>type 关键字（可以给一个类型定义一个名字）多用于复合类型</p></blockquote><ul><li>定义类型别名</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> s = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: s = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// fsllala</span></span><br></pre></td></tr></table></figure><ul><li>联合类型：指定多种类型，在前文有提到；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> s = <span class="built_in">string</span>|<span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:s = <span class="string">&quot;永恒的紫罗兰花园&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:s = <span class="number">520</span><span class="comment">//这有这两种类型可以</span></span><br></pre></td></tr></table></figure><ul><li>定义函数别名</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> s = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: s = <span class="function">() =&gt;</span> <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">str</span>()); <span class="comment">//fsllala</span></span><br></pre></td></tr></table></figure><ul><li>定义值的别名</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;213&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的值  只能是上面value定义的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: value = <span class="string">&quot;213&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: value = <span class="string">&quot;111&quot;</span>; <span class="comment">//这里会报错,提示:  不能将类型“&quot;111&quot;”分配给类型“value”。</span></span><br></pre></td></tr></table></figure><h2 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h2><blockquote><p>TypeScript 将使用 never 类型来表示不应该存在的状态，也就是值永不存在的类型。</p></blockquote><ul><li>值会永不存在的两种情况：<ol><li>如果一个函数执行时抛出了<strong>异常</strong>，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；</li><li>数中执行无限循环的代码（<strong>死循环</strong>），使得程序永远无法运行到函数返回值那一步，永不存在返回。</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举一个我们可能会见到的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;保安&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;草莓&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = <span class="title class_">Foo</span> | <span class="title class_">Bar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleValue</span>(<span class="params">val: All</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (val.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;保安&#x27;</span>:</span><br><span class="line">            <span class="comment">// 这里 val 被收窄为 Foo</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;草莓&#x27;</span>:</span><br><span class="line">            <span class="comment">// val 在这里是 Bar</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="comment">//兜底逻辑 一般是不会进入这儿  如果进来了就是程序异常了</span></span><br><span class="line">            <span class="comment">// val 在这里是 never</span></span><br><span class="line">            <span class="keyword">const</span> <span class="attr">exhaustiveCheck</span>: <span class="built_in">never</span> = val</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleValue</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;草莓&quot;</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>比如新来了一个同事他新增了一个C接口，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG 。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;保安&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;草莓&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;卷心菜&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = <span class="title class_">Foo</span> | <span class="title class_">Bar</span> | C</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleValue</span>(<span class="params">val: All</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (val.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;保安&#x27;</span>:</span><br><span class="line">            <span class="comment">// 这里 val 被收窄为 Foo</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;草莓&#x27;</span>:</span><br><span class="line">            <span class="comment">// val 在这里是 Bar</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="comment">//兜底逻辑 一般是不会进入这儿  如果进来了就是程序异常了</span></span><br><span class="line">            <span class="keyword">const</span> <span class="attr">exhaustiveCheck</span>: <span class="built_in">never</span> = val;  <span class="comment">// 这里会报错,会提示: 不能将类型“C”分配给类型“never”</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleValue</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;草莓&quot;</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>所以通过这个办法，你可以确保 handleValue 总是穷尽 (exhaust) 了所有 All 的可能类型。</p></blockquote><h2 id="symbol类型"><a href="#symbol类型" class="headerlink" title="symbol类型"></a>symbol类型</h2><blockquote><p>ES6 引入了一种新的基本数据类型<code>Symbol</code>，表示独一无二的值；</p><p>内存地址的指针位置不同，所以是唯一值；</p></blockquote><ul><li><a href="https://es6.ruruanyifeng.com/#docs/symbol">阮一峰</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN</a></li><li><a href="https://zhuanlan.zhihu.com/p/22652486">JS 中的 Symbol 是什么？</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Symbol(params)为基本数据类型,所以不能new;</span></span><br><span class="line"><span class="comment"> * params 可以不传,没啥实际意义,唯一作用是为了区分声明的symbol</span></span><br><span class="line"><span class="comment"> * params 一般传 number或者string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name1</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name2</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">symbol</span>=<span class="title class_">Symbol</span>(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个值看似一样，其实因为内存地址指针位置不同，所以是唯一值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1 === name2);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>普通方法获取不到对象中的symbol属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name1</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name2</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    [name1]: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">    [age]: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">173</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// //只会打印出sex跟height，[name1]与[age]将打印不出来</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1));  <span class="comment">// [ &#x27;sex&#x27;, &#x27;height&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj1));  <span class="comment">// [ &#x27;sex&#x27;, &#x27;height&#x27; ]</span></span><br></pre></td></tr></table></figure><ul><li>获取对象中的symbol的属性的两种方式</li></ul><blockquote><p>静态方法 Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组(Array)。</p><p>语法：Reflect.ownKeys(target) &#x3D;&gt; target 获取自身属性键的目标对象。</p><p>Reflect.ownKeys 方法返回一个由目标对象自身的属性键组成的<strong>数组</strong>。它的返回值等同于 Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target) ) 。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name1</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name2</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;fsllala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    [name1]: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">    [age]: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">173</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//能打印出来两个Symbol，另外两个普通的不会打印出来</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1)); <span class="comment">// [ Symbol(fsllala), Symbol(18) ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.ownKeys() 此属性是将所有的属性都列出来</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1)); <span class="comment">//[ &#x27;sex&#x27;, &#x27;height&#x27;, Symbol(fsllala), Symbol(18) ]</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-iterator-迭代器-和-生成器-for-of"><a href="#Symbol-iterator-迭代器-和-生成器-for-of" class="headerlink" title="Symbol.iterator 迭代器 和 生成器 for of"></a>Symbol.iterator 迭代器 和 生成器 for of</h3><ul><li>一般来说Object对象是不能通过for…of来进行遍历的；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里会报错</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> obj1); <span class="comment">// 类型“&#123; name: string; age: number; sex: number; &#125;”必须具有返回迭代器的 &quot;[Symbol.iterator]()&quot; 方法。</span></span><br></pre></td></tr></table></figure><ul><li>可以给Object对象提供一个Iterator方法，使对象也能使用for…of遍历；</li></ul><blockquote><ul><li>迭代器:Symbol.iterator</li></ul><p>要知道js的迭代器，我们就要先知道迭代的意思，实际上迭代的本意是遍历，随着不断有新的数据类型加入，我们就要用不同的for语句去循环，这就显得很麻烦，所以就有了迭代的概念 </p><ul><li>迭代</li></ul><p>所有数据类型的遍历都遵循的一个协议。所以以后你对遵循了迭代协议的数据类型 你只需要用迭代去遍历就可以了。顺便一提：for…of是用迭代器来实现的，只要你能用for…of来遍历的数据都是实现了迭代协议的数据</p><ul><li>实现的迭代协议的数据类型：</li></ul><p>string，array，map，set，arguments，Nodelist等dom元素 ；注意注意；<strong>没有object</strong> </p><ul><li>生成器: for…of</li></ul><p>for…of 会遍历可迭代的对象，调用对象上的 Symbol.iterator 方法。(此对象非彼对象，这个对 象是指你即将下手的目标)</p><p>对象也是不支持的，因为对象没用 Symbol.iterator 方法。</p></blockquote><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><blockquote><p>迭代器Iterator 的用法</p><ol><li><p>Iterator 是 es6 引入的一种新的遍历机制 ，两个核心：</p><ol><li>迭代器是一个统一的接口，它的作用是使各种 数据结构 可被便捷的访问，它是通过一个键为 Symbol.iterator 的方法来实现。</li><li>迭代器是用于 遍历 数据结构元素的指针（如数据库中的游标）。</li></ol></li><li><p>使用迭代：</p><ol><li>实现的迭代协议的数据类型，里面都会有一个 [Symbol.iterator]方法</li><li>进行迭代的时候用迭代器的next来取值，这个next返回的是一个对象：<code>&#123;value：value,done:&quot;是否完成遍历&quot;&#125;</code></li><li>当 value是underfined 、done 为 true 时则遍历结束</li></ol></li><li><p>实现的迭代协议的数据类型：</p><p><code>string、array、map、set、arguments、Nodelist等dom元素;注意注意；没有object  </code></p></li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;fsl&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">iterator</span>: <span class="title class_">Iterator</span>&lt;<span class="built_in">string</span>&gt; = str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="comment">//next一次只遍历一个数，下一次调用将从上一次遍历到的位置开始下一个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;f&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;s&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;l&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">//返回的有两个属性，一个value，一个done。value当读取到值的时候，done为false、读取不到为true</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>]; <span class="comment">// 泛型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">iterator</span>: <span class="title class_">Iterator</span>&lt;<span class="built_in">number</span>&gt; = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()<span class="comment">//注意这里的接收类型&lt;number&gt;是固定要写的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//next一次只遍历一个数，下一次调用将从上一次遍历到的位置开始下一个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123; value: 5, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">//返回的有两个属性，一个value，一个done。value当读取到值的时候，done为false、读取不到为true</span></span><br></pre></td></tr></table></figure><ul><li>实现一个简易的迭代器</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt; = [<span class="string">&quot;泛型&quot;</span>, <span class="string">&quot;实现简单的迭代器&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">set</span>: <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iteratorFun</span>(<span class="params">args: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123; <span class="comment">//这里定义为any类型是因为上面要传到这里的有多种不同类型</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">it</span>: <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = args[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">next</span>: <span class="built_in">any</span> = &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123; <span class="comment">//判断next，由于next默认为fasle，while循环只有true会通过，所以需要 取反</span></span><br><span class="line">        next = it.<span class="title function_">next</span>(); <span class="comment">//刚开始是声明next给个默认值，等到开始循环的时候再把真正的值赋给他</span></span><br><span class="line">        <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">iteratorFun</span>(arr);</span><br><span class="line"><span class="title function_">iteratorFun</span>(set);</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性</p></blockquote><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><p>我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同，实现的功能是一样的，这时候我们就可以使用泛型来优化。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">str</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">num</span>(<span class="number">1</span>, <span class="number">2</span>));  <span class="comment">// [ 1, 2 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">str</span>(<span class="string">&#x27;fsllala&#x27;</span>, <span class="string">&#x27;18&#x27;</span>)); <span class="comment">// [ &#x27;fsllala&#x27;, &#x27;18&#x27; ]</span></span><br></pre></td></tr></table></figure><ul><li>泛型优化</li></ul><blockquote><p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T；</p><p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）；</p><p>即：定义这个函数的时候，不定义参数的类型，而是让调用者告知我这里的参数是什么类型；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> add&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">add&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;fsllala&quot;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//甚至我们可以简写</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)<span class="comment">//编辑器会自动推断类型，但最好还是写一下，如果你知道你具体需要的是什么的话</span></span><br></pre></td></tr></table></figure><blockquote><p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sub&lt;T, U&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: U): <span class="title class_">Array</span>&lt;T | U&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;T | U&gt; = [a, b];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub&lt;<span class="built_in">number</span>,<span class="built_in">boolean</span>&gt;(<span class="number">66</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><ul><li>泛型约束(函数类)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码是会报错的</span></span><br><span class="line"><span class="keyword">function</span> getLength&lt;T&gt;(<span class="attr">args</span>:T)&#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="property">length</span>; <span class="comment">//这里会报错,提示: 类型“T”上不存在属性“length”。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加泛型约束：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">args</span>: T) &#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要传入的实参有length属性,且值是number类型的就行;</span></span><br><span class="line"><span class="comment">// 即：有number类型的length就实现了接口Len</span></span><br><span class="line"><span class="title function_">getLength</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="title function_">getLength</span>([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="title function_">getLength</span>(&#123; <span class="attr">length</span>: <span class="number">77</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="使用keyof-约束对象"><a href="#使用keyof-约束对象" class="headerlink" title="使用keyof 约束对象"></a>使用keyof 约束对象</h3><p>下面现场不会报错：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> prop&lt;T&gt;(<span class="attr">obj</span>: T, keys) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[keys];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="title function_">prop</span>(o, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">prop</span>(o, <span class="string">&quot;d&quot;</span>));  <span class="comment">// undefined  现在没有 o[&quot;d&quot;];但是不报错;</span></span><br></pre></td></tr></table></figure><blockquote><p>解决方法：其中使用了TS泛型和泛型约束。首先定义了T类型并使用extends关键字继承object类型的子类型，然后使用keyof操作符获取T类型的所有键，它的返回 类型是联合 类型，最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用keyof 分隔 T,分隔完之后,T就是联合类型: &quot;a&quot; | &quot;b&quot; | &quot;c&quot;,最后用K继承联合类型,即K就是:&quot;a&quot; | &quot;b&quot; | &quot;c&quot;</span></span><br><span class="line"><span class="keyword">function</span> prop&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">keys</span>: K) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[keys];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="title function_">prop</span>(o, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">prop</span>(o, <span class="string">&quot;d&quot;</span>));  <span class="comment">// 现在报错了,提示: 类型“&quot;d&quot;”的参数不能赋给类型“&quot;a&quot; | &quot;b&quot; | &quot;c&quot;”的参数。</span></span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">attr</span>: T[] = [];</span><br><span class="line">    <span class="title function_">say</span>(<span class="attr">a</span>: T): T[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [a]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="keyword">new</span> <span class="title class_">Sub</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">num.<span class="property">attr</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="keyword">new</span> <span class="title class_">Sub</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> results =str.<span class="title function_">say</span>(<span class="string">&quot;lala&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results); <span class="comment">// [ &#x27;lala&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><blockquote><p>声明接口的时候 在名字后面加一个 &lt;参数&gt;</p><p>使用的时候传递类型</p></blockquote><ul><li>使用含有泛型的接口来定义对象的形状：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cart</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">list</span>: T[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">cart</span>: <span class="title class_">Cart</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;3&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用含有泛型的接口来定义函数的形状：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateArrayFunc</span>&lt;T&gt; &#123;</span><br><span class="line">    (<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArrayFunc</span>: <span class="title class_">CreateArrayFunc</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">createArrayFunc = <span class="keyword">function</span> &lt;T&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results = <span class="title function_">createArrayFunc</span>(<span class="number">3</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);  <span class="comment">// [ &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://juejin.cn/post/7006483218765447182#heading-3">TS系列篇｜泛型</a></p><h2 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h2><blockquote><p>TS文件中，即使两个不同的TS文件，比如<code>index.ts</code>和<code>index2.ts</code>，命名同一个变量，也会起冲突。因为它的内容被视为全局可见的（因此对模块也是可见的）</p></blockquote><blockquote><p>TypeScript与ECMAScript 2015一样，任何包含顶级import或者export的文件都被当成一个模块。相反地，如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的（因此对模块也是可见的）</p></blockquote><ul><li>不同TS模块下会产生命名冲突：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name1 = <span class="string">&quot;fsllala123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name1=<span class="string">&quot;fsllala456&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/namespace1675417635460.png" alt="namespace"></p><p>那么如何解决呢？</p><ul><li>我们在工作中无法避免全局变量造成的污染，TypeScript提供了namespace 避免这个问题出现<ul><li>内部模块，主要用于组织代码，避免命名冲突</li><li>命名空间内的类默认私有</li><li>通过 <code>namespace</code> 关键字定义，然后通过 <code>export</code> 暴露；(<code>namespace</code>里面如果不通过<code>export</code>暴露，那么外面访问不到)</li></ul></li></ul><h3 id="namespace常规写法"><a href="#namespace常规写法" class="headerlink" title="namespace常规写法"></a>namespace常规写法</h3><ul><li>namespace，里面不使用export：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不能获取到里面的属性,在命名空间外访问是一个空对象</span></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> age1 = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AA</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>namespace，里面使用export：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以获取到里面的属性了</span></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> age1 = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AA</span>); <span class="comment">// 是个对象 &#123; name1: &#x27;fsllala&#x27;, age1: 18 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>同一模块(不同模块)下有重名的namespace，里面属性会合并</li></ul><blockquote><p>因为属性会合并，所以会出现以下情况：</p></blockquote><ul><li>重名namespace属性合并，情况一：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同命名空间的属性名不冲突</span></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> age1 = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AA</span>); <span class="comment">// &#123; name1: &#x27;fsllala&#x27;, age1: 18 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>重名namespace属性合并，情况二：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性或方法使用const/let定义,会报错:</span></span><br><span class="line"><span class="comment"> * 其实也不难理解：</span></span><br><span class="line"><span class="comment"> * 命名空间一样的合并,即:在一个对象里面,const/let在一个对象里面会有产生块级作用域;</span></span><br><span class="line"><span class="comment"> * const/let在同一作用域无法重新声明变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;  <span class="comment">// 无法重新声明块范围变量“name1”。</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> age1 = <span class="number">18</span>;  <span class="comment">// 无法重新声明块范围变量“age1”。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;  <span class="comment">// 无法重新声明块范围变量“name1”。</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> age1 = <span class="number">18</span>; <span class="comment">// 无法重新声明块范围变量“age1”。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重名namespace属性合并，情况三：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性或方法使用var定义,么的问题:</span></span><br><span class="line"><span class="comment"> * 后者会覆盖前者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">var</span> name1 = <span class="string">&quot;fsllala&quot;</span>; </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">var</span> age1 = <span class="number">18</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">var</span> name1 = <span class="string">&quot;fsllala&quot;</span>; </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">var</span> age1 = <span class="number">18</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AA</span>); <span class="comment">// &#123; name1: &#x27;fsllala&#x27;, age1: 18 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// namespace里面套namespace(ps:同理里面的namespace如果没有export,外面访问不到)</span></span><br><span class="line"><span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> BB &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> age1 = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AA</span>); <span class="comment">// 是个对象  &#123; BB: &#123; name1: &#x27;fsllala&#x27;, age1: 18 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="抽离命名空间"><a href="#抽离命名空间" class="headerlink" title="抽离命名空间"></a>抽离命名空间</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts里导出文件</span></span><br><span class="line"><span class="comment">// 将最外层 namespace 通过 export导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> AA &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> BB &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> name1 = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> age1 = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.ts里面导入文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">AA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AA</span>);  <span class="comment">// &#123; BB: &#123; name1: &#x27;fsllala&#x27;, age1: 18 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="简化命名空间"><a href="#简化命名空间" class="headerlink" title="简化命名空间"></a>简化命名空间</h3><blockquote><p>除了使用<code>const</code>还可以使用<code>import</code>来简化；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.ts里面导入文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">AA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">AA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 感觉太长了</span></span><br><span class="line"><span class="comment">// console.log(AA.BB.name1);  // fsllala</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//method1:</span></span><br><span class="line"><span class="keyword">const</span> method1 = <span class="variable constant_">AA</span>.<span class="property">BB</span>.<span class="property">name1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(method1);  <span class="comment">//fsllala</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//method2:</span></span><br><span class="line"><span class="keyword">import</span> method2 = <span class="variable constant_">AA</span>.<span class="property">BB</span>.<span class="property">name1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`method2:<span class="subst">$&#123;method2&#125;</span>`</span>); <span class="comment">// method2:fsllala</span></span><br></pre></td></tr></table></figure><h2 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h2><blockquote><p>重点：我们知道在 TS 项目中，文件之间相互引用是通过<code> import</code>来实现的，那么声明文件之间的引用呢？没错通过<strong>三斜线指令</strong>。</p></blockquote><p>三斜线指令常用的就两个功能：</p><ul><li>倒入声明文件</li><li>倒入第三方包</li></ul><p>如果对比 import 的功能，我们可以写出如下的等式：</p><ul><li><code>/// &lt;reference path=&quot;...&quot; /&gt;</code> &#x3D;&#x3D; <code>import filename.xxx</code></li><li><code>/// &lt;reference types=&quot;...&quot; /&gt;</code> &#x3D;&#x3D; <code>import lodash from &quot;lodash&quot;</code></li></ul><blockquote><p>PS：下方代码使用<code>ts-node</code>输出有有问题，暂未找到解决方法；</p><p>But 通过<code>tsc --outFile sample.js index.ts</code>将<code>index.ts</code>编译成<code>sample.js</code>方法可行</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在a.ts</span></span><br><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在b.ts</span></span><br><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在index.ts</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./index2.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./index3.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">//引入之后直接可以使用变量 A</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br></pre></td></tr></table></figure><h2 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h2><blockquote><p>TypeScript 混入 Mixins 其实 vue 也有 mixins 这个东西 你可以把他看作为合并</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs连接MySQL</title>
      <link href="/articles/46635768.html"/>
      <url>/articles/46635768.html</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJs连接MySQL"><a href="#NodeJs连接MySQL" class="headerlink" title="NodeJs连接MySQL"></a>NodeJs连接MySQL</h1><h2 id="mysql与mysql2"><a href="#mysql与mysql2" class="headerlink" title="mysql与mysql2"></a>mysql与mysql2</h2><ul><li>如何可以在Node的代码中执行SQL语句呢?这里我们可以借助于两个库：<ul><li>mysql：最早的Node连接MySQL的数据库驱动；</li><li>mysql2：在mysql的基础之上，进行了很多的优化、改进；</li></ul></li><li>目前相对来说，更偏向于使用mysql2，mysql2兼容mysql的API，并且提供了一些附加功能；<ul><li>更快&#x2F;更好的性能；</li><li>Prepared Statement (预编译语句)：<ul><li>提高性能：将创建的语句模块发送给MySQL，然后MySQL编译（解析、优化、转换）语句模块，并且存储它但是不执行，之 后我们在真正执行时会给?提供实际的参数才会执行；就算多次执行，也只会编译一次，所以性能是更高的；</li><li>防止SQL注入：之后传入的值不会像模块引擎那样就编译，那么一些SQL注入的内容不会被执行；or 1 &#x3D; 1不会被执行；</li></ul></li><li>支持Promise，所以我们可以使用async和await语法；</li></ul></li></ul><h2 id="mysql2的使用"><a href="#mysql2的使用" class="headerlink" title="mysql2的使用"></a>mysql2的使用</h2><ol><li>安装mysql2：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysql2</span><br></pre></td></tr></table></figure><ol start="2"><li>mysql2的使用过程如下：<ul><li>第一步：创建连接（通过createConnection），并且获取连接对象；</li><li>第二步：执行SQL语句即可（通过query）；</li></ul></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建数据库链接</span></span><br><span class="line"><span class="keyword">const</span> connection =mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&quot;bili&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行sql语句 使用query执行</span></span><br><span class="line"><span class="keyword">const</span> statement=<span class="string">`</span></span><br><span class="line"><span class="string">SELECT * FROM products where price&gt;6000</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">connection.<span class="title function_">query</span>(statement,<span class="function">(<span class="params">err,result,fields</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//返回的是个数组对象;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="预处理语句（Prepared-Statement）"><a href="#预处理语句（Prepared-Statement）" class="headerlink" title="预处理语句（Prepared Statement）"></a>预处理语句（Prepared Statement）</h3><blockquote><p>如果再次执行该SQL语句，它将会从缓存中获取，省略了编译 statement 的时间来提高性能。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建数据库链接</span></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;bili&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预处理语句   prepared</span></span><br><span class="line"><span class="comment">// 使用execute执行 (execute先执行了prepare 然后执行了 query)</span></span><br><span class="line"><span class="keyword">const</span> statement = <span class="string">`</span></span><br><span class="line"><span class="string">SELECT * FROM products where price&gt;? and score&gt;?</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">connection.<span class="title function_">execute</span>(statement, [<span class="number">6000</span>, <span class="number">7</span>], <span class="function">(<span class="params">err, result, fields</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//返回的是个数组对象;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="连接池（Connection-Pools）"><a href="#连接池（Connection-Pools）" class="headerlink" title="连接池（Connection Pools）"></a>连接池（Connection Pools）</h3><blockquote><p>前面我们是创建了一个连接（connection），但是如果我们有多个请求的话，该连接很有可能正在被占用，那么 我们是否需要每次一个请求都去创建一个新的连接呢？</p></blockquote><ul><li>事实上，mysql2给我们提供了连接池（connection pools）；</li><li>连接池可以在需要的时候自动创建连接，并且创建的连接不会被销毁，会放到连接池中，后续可以继续使用；</li><li>我们可以在创建连接池的时候设置LIMIT，也就是最大创建个数；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建连接池</span></span><br><span class="line"><span class="keyword">const</span> connections = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;bili&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">connectionLimit</span>: <span class="number">10</span>, <span class="comment">//最多建立几个连接</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用连接池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> statement = <span class="string">`</span></span><br><span class="line"><span class="string">SELECT * FROM products where price&gt;? and score&gt;?</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">connections.<span class="title function_">execute</span>(statement, [<span class="number">6000</span>, <span class="number">7</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);<span class="comment">//返回的是个数组对象;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>但是上面是通过<strong>回调函数</strong>来获取到的数据。回调函数容易产生<strong>回调地狱</strong>的问题；那如何解决呢？</p></blockquote><ul><li>连接池<code>connections</code>有<code>promise()</code>方法,可以直接调用;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建连接池</span></span><br><span class="line"><span class="keyword">const</span> connections =mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&quot;bili&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">connectionLimit</span>:<span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用连接池  connections有promise()方法,可以直接调用;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> statement=<span class="string">` </span></span><br><span class="line"><span class="string">SELECT * FROM products where price&gt;? and score&gt;?</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数形式;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// connections.execute(statement,[6000, 7],(err,results)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(results);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// connections有promise()方法,可以直接调用;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里.then中result是个数组是因为用到了数组解构,直接填result进去会得到一堆别的数据</span></span><br><span class="line">connections.<span class="title function_">promise</span>().<span class="title function_">execute</span>(statement,[<span class="number">6000</span>, <span class="number">7</span>]).<span class="title function_">then</span>(<span class="function">(<span class="params">[result]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//返回的是个数组对象;</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="常用SQL语句"><a href="#常用SQL语句" class="headerlink" title="常用SQL语句"></a>常用SQL语句</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><ul><li>查询所有字段和所有数据;<br>SELECT * FROM <code>products</code>;</li><li>查询指定字段和所有数据;<br>SELECT id,title,price FROM <code>products</code>;</li><li>对字段结果起别名(as可以省略不写)<br>SELECT id,title as phoneTitle,price as currentPrice FROM <code>products</code>;</li></ul><h3 id="where查询"><a href="#where查询" class="headerlink" title="where查询"></a>where查询</h3><ul><li>查询价格小于1000的手机<br>SELECT * FROM <code>products</code> WHERE price&lt;1000;</li><li>查询价格等于999的手机 (SQL是一个&#x3D;，和JS别搞混了)<br>SELECT * FROM <code>products</code> WHERE price&#x3D;999;</li><li>查询价格不等于999的手机<br>SELECT * FROM <code>products</code> WHERE price!&#x3D;999;<br>SELECT * FROM <code>products</code> WHERE price&lt;&gt;999;</li><li>查询品牌是华为，并且小于2000元的手机<br>SELECT * FROM <code>products</code> WHERE <code>brand</code> &#x3D; ‘华为’ &amp;&amp; <code>price</code> &lt; 2000;</li><li>查询所有的华为手机或者价格小于1000的手机<br>SELECT * FROM <code>products</code> WHERE <code>brand</code> &#x3D; ‘华为’ || <code>price</code> &lt; 1000;</li></ul><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><ul><li><p>将id 85-88的url设置为NULL</p><p>UPDATE <code>products</code> SET url&#x3D;NULL WHERE id&gt;&#x3D;85&amp;&amp;id&lt;&#x3D;88;</p></li><li><p>查询某个值为NULL  用 IS 不能用 &#x3D;<br>SELECT * FROM <code>products</code> WHERE url IS NULL;</p></li><li><p>查询某个值不为NULL<br>SELECT * FROM <code>products</code> WHERE url IS NOT NULL;</p></li></ul><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ul><li><p>查询所有以v开头的title</p><p>SELECT * FROM <code>products</code> WHERE title LIKE ‘v%’;</p></li><li><p>查询带M的title</p><p>SELECT * FROM <code>products</code> WHERE title LIKE ‘%M%’;</p></li><li><p>查询带M的title必须是第三个字符</p><p>SELECT * FROM <code>products</code> WHERE title LIKE ‘__M%’;</p></li><li><p>IN表示取多个值中的其中一个即可<br>SELECT * FROM <code>products</code> WHERE brand &#x3D;”华为”||brand&#x3D;”小米”||brand&#x3D;”苹果”;<br>SELECT * FROM <code>products</code> WHERE brand IN(“华为”,”小米”,”苹果”);</p></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><p>根据哪个字段进行怎么样的排序 ASC 升序  DESC 降序</p></li><li><p>根据价格的升序,价格一样时，根据评分降序,中间用逗号隔开;<br>SELECT * FROM <code>products</code> WHERE brand IN(“华为”,”小米”,”苹果”) ORDER BY price ASC,score DESC;</p></li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ul><li>查询20条,偏移0条(1-20)<br>SELECT * FROM <code>products</code> LIMIT 20 OFFSET 0;</li><li>查询20条,偏移20条(21-40)<br>SELECT * FROM <code>products</code> LIMIT 20 OFFSET 20;</li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul><li><p>将表中所有数据看成一个整体;一个组;</p></li><li><p>求所有手机价格的总和,key改为 totalPrice;<br>SELECT SUM(price) totalPrice FROM <code>products</code>;</p></li><li><p>求华为手机价格的总和,key改为 totalPrice;<br>SELECT SUM(price) totalPrice FROM <code>products</code> WHERE brand&#x3D;”华为”;</p></li><li><p>求华为手机平均价格<br>SELECT AVG(price) FROM <code>products</code> WHERE brand&#x3D;”华为”;</p></li><li><p>求最高手机价格和最低手机价格<br>SELECT MAX(price) FROM <code>products</code>;<br>SELECT MIN(price) FROM <code>products</code>;</p></li><li><p>求华为手机个数<br>SELECT COUNT(*) FROM <code>products</code> WHERE brand&#x3D;”华为”;</p></li><li><p>求苹果手机存在url的个数 (url不为NULL)<br>SELECT COUNT(url) FROM <code>products</code> WHERE brand&#x3D;”苹果”;</p></li><li><p>求price不为null的个数<br>SELECT COUNT(price) FROM <code>products</code>;</p></li><li><p>求price不为null的个数，并进行去重处理;<br>SELECT COUNT(DISTINCT price) FROM <code>products</code>;</p></li></ul><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><ul><li><p>GROUP BY通常和聚合函数一起使用 将数据分为多个组;<br>SELECT brand,AVG(price),COUNT(*),AVG(score)FROM <code>products</code> GROUP BY brand;</p></li><li><p>GROUP BY通常和聚合函数一起使用 将数据分为多个组;并且平均价格&gt;2000的</p></li><li><p>WHERE不能放在GROUP BY之后,语法错误;<br>SELECT brand,AVG(price) avgPrice,COUNT(<em>),AVG(score)FROM <code>products</code> GROUP BY brand WHERE avgPrice&gt;2000;</em></p></li><li><p>使用HAVING(HAVING是对分组之后的数据进行筛选的)<br>SELECT brand,AVG(price) avgPrice,COUNT(*),AVG(score)FROM <code>products</code> GROUP BY brand HAVING avgPrice&gt;2000;</p></li><li><p>求平均分score&gt;7.5分的手机,按照品牌进行分类,求出每个品牌的平均价格;(WHERE可以写在GROUP BY之前)<br>SELECT brand,AVG(price) avgPrice FROM <code>products</code>WHERE score&gt;7.5 GROUP BY brand ;</p></li></ul><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ol><li><p>先添加一个 brand_id 字段<br>ALTER TABLE <code>products</code> ADD <code>brand_id</code> INT;</p></li><li><p>建立外键<br>ALTER TABLE <code>products</code> ADD FOREIGN KEY(brand_id) REFERENCES brand(id);</p></li><li><p>将brand_id的值填入<br>UPDATE <code>products</code> SET <code>brand_id</code>&#x3D;1 WHERE <code>brand</code>&#x3D;”华为”;<br>UPDATE <code>products</code> SET <code>brand_id</code>&#x3D;2 WHERE <code>brand</code>&#x3D;”小米”;<br>UPDATE <code>products</code> SET <code>brand_id</code>&#x3D;3 WHERE <code>brand</code>&#x3D;”苹果”;<br>UPDATE <code>products</code> SET <code>brand_id</code>&#x3D;4 WHERE <code>brand</code>&#x3D;”OPPO”;</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs Koa</title>
      <link href="/articles/799084bf.html"/>
      <url>/articles/799084bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>koa是express同一个团队开发的一个新的Web框架；</li><li>相对于express具有更强的异步处理能力；**(Koa框架的next()函数返回的是一个promise)**</li><li>Koa的核心代码只有1600+行，是一个更加轻量级的框架，我们可以根据需要安装和使用中间件；</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>node下载koa模块</li><li>命令：<ul><li>初始化服务：<code>npm init -y</code></li><li>下载koa：<code>npm i express</code></li></ul></li></ul><h2 id="koa初体验"><a href="#koa初体验" class="headerlink" title="koa初体验"></a>koa初体验</h2><ul><li>koa并没有像express一样，将req和res分开，而是将它们作为 ctx的属性；</li><li>ctx代表依次请求的上下文对象；</li><li>ctx.request：获取请求对象；</li><li>ctx.response：获取响应对象；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span>  <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa所有中间件执行完,没有返回结果res.end(),默认返回 NOT FOUND; express则会一直pending;</span></span><br><span class="line"><span class="comment">// 与express相比,koa两个参数,第一个是context,表示上下文,缩写ctx; </span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// context有 request与response</span></span><br><span class="line">    <span class="comment">// ctx.request;</span></span><br><span class="line">    <span class="comment">// ctx.response;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// koa不是res.end(&quot;xxx&quot;)返回了,而是ctx.response.body=xxx; xxx可以为 string,json,array,buffer...</span></span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa中间件"><a href="#koa中间件" class="headerlink" title="koa中间件"></a>koa中间件</h2><blockquote><p>koa注册中间件没有methods方式,只有use；且use第一个参数不能设置为路径；且不能连续注册中间件；</p></blockquote><ul><li>即：没有提供以下的注册方式：<ul><li>methods方式：app.get()&#x2F;.post()</li><li>第一个参数为路径：app.use(“&#x2F;home”,(ctx,next)&#x3D;&gt;{})</li><li>连续注册中间件：app.use((ctx,next)&#x3D;&gt;{},(ctx,next)&#x3D;&gt;{},(ctx,next)&#x3D;&gt;{})</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * koa注册中间件没有methods方式,只有use,而且use第一个参数不能设置为路径;而且不能连续注册中间件；</span></span><br><span class="line"><span class="comment"> * 即：没有提供以下的注册方式</span></span><br><span class="line"><span class="comment"> *  methods方式：    app.get()/.post()</span></span><br><span class="line"><span class="comment"> *  第一个参数为路径：app.use(&quot;/home&quot;,(ctx,next)=&gt;&#123;&#125;)</span></span><br><span class="line"><span class="comment"> *  连续注册中间件：  app.use((ctx,next)=&gt;&#123;&#125;,(ctx,next)=&gt;&#123;&#125;,(ctx,next)=&gt;&#123;&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">request</span>.<span class="property">url</span> == <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx.<span class="property">request</span>.<span class="property">method</span> == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            ctx.<span class="property">response</span>.<span class="property">body</span> = <span class="string">&quot;login success&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">body</span> = <span class="string">&quot;login flase&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不难发现，上面请求方式，路径之类的都需要我们自己来做判断，写法太复杂了，那如何简单化呢？答案是使用koa的路由。</p></blockquote><h2 id="koa路由"><a href="#koa路由" class="headerlink" title="koa路由"></a>koa路由</h2><blockquote><p>在<code>express</code>中，<code>router</code>是集成在框架中的；由于<code>koa</code>是个轻量级的框架，所以没有集成路由，我们需要安装第三方库<code>npm i koa-router</code>；路由里面有 <code>get post put......</code></p></blockquote><ul><li>我们可以先封装一个 router的 user.js 的文件：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个router文件夹,下面创建user.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="comment">// 同koa一样 引入的是个类，需要实例化;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;<span class="attr">prefix</span>:<span class="string">&quot;/users&quot;</span>&#125;);  <span class="comment">//perfix就是接口的前缀;</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;user lists~&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;put request~&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router;</span><br></pre></td></tr></table></figure><ul><li>在app中引入 user.js文件，然后通过<code>app.use()</code>将其注册为中间件；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在app文件里引入路由</span></span><br><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span>  <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa很轻量,使用路由需要下载第三方库: yarn add koa-router; 路由里面有 get post put......</span></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/user.js&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(userRouter.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在一直返回的NOT FOUND ,我没有写post,更希望返回的是 Method Not Allowed 状态码：405;</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="POST请求body参数解析"><a href="#POST请求body参数解析" class="headerlink" title="POST请求body参数解析"></a>POST请求body参数解析</h2><h3 id="中间件应用-json-urlencoded-解析"><a href="#中间件应用-json-urlencoded-解析" class="headerlink" title="中间件应用 - json-urlencoded 解析"></a>中间件应用 - json-urlencoded 解析</h3><blockquote><p>在<code>express</code>中，<code>body-parser</code>是集成在框架中的；由于<code>koa</code>是个轻量级的框架，所以没有集成路由，我们需要安装第三方库<code>npm i koa-bodyparser</code>；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span>  <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="comment">// 因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// express是内置的body-parser ;koa没有内置,需要下载: yarn add koa-bodyparser</span></span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&quot;koa-bodyparser&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyparser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">request</span>.<span class="property">body</span>); <span class="comment">//json和 urlencoded都可以解析; </span></span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;POST请求~~&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件应用-form-data-解析"><a href="#中间件应用-form-data-解析" class="headerlink" title="中间件应用 - form-data 解析"></a>中间件应用 - form-data 解析</h3><ul><li><strong>注：此章节更多细节看express文章；</strong></li></ul><blockquote><p>form-data 解析：一般用于上传图片文件；</p><p>同<code>express</code>一样，框架没有内置解析<code>form-data</code>的库，需要下载：<code>npm i koa-multer</code>；</p></blockquote><h4 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span>  <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="comment">// 因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// form-data无法获取,需要下载: yarn add koa-multer;</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;koa-multer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> upload =<span class="title function_">multer</span>();</span><br><span class="line">app.<span class="title function_">use</span>(upload.<span class="title function_">any</span>());  <span class="comment">//不建议全局 router可以连续注册中间件，可以放在后面; Router.post(&quot;/login&quot;,upload.any(),(ctx,next)=&gt;&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">req</span>.<span class="property">body</span>); <span class="comment">// multer是ctx.req,而不是ctx.request;其实form取数据基本都是文件，数据不常用;</span></span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;POST请求form-data参数,不常用，基本用来传文件~&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跟express基本一样</span></span><br><span class="line"><span class="keyword">const</span> path= <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> =<span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;koa-multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app =<span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> uploadRouter = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;<span class="attr">prefix</span>:<span class="string">&quot;/upload&quot;</span>&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(uploadRouter.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个不会自动创建文件夹,需要手动先创建;</span></span><br><span class="line"><span class="keyword">const</span> storage =multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>:<span class="function">(<span class="params">req,file,cb</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>,<span class="string">&quot;./uploads/&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>:<span class="function">(<span class="params">req,file,cb</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>()+path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> upload =<span class="title function_">multer</span>(&#123;</span><br><span class="line">    storage,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploadRouter.<span class="title function_">post</span>(<span class="string">&quot;/avator&quot;</span>,upload.<span class="title function_">single</span>(<span class="string">&quot;avatorss&quot;</span>),<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">req</span>.<span class="property">file</span>);</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;文件上传成功!&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GET请求参数解析"><a href="#GET请求参数解析" class="headerlink" title="GET请求参数解析"></a>GET请求参数解析</h2><blockquote><p>params获取路由参数；request获取地址栏?之后的参数；下面是两者结合的demo；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span>  <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="comment">// 因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;<span class="attr">prefix</span>:<span class="string">&quot;/users&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(userRouter.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(userRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://127.0.0.1:3000/users/abc?username=123&amp;password=456</span></span><br><span class="line">userRouter.<span class="title function_">get</span>(<span class="string">&quot;/:id&quot;</span>,<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">request</span>.<span class="property">params</span>);  <span class="comment">//&#123; id: &#x27;abc&#x27; &#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">request</span>.<span class="property">query</span>);  <span class="comment">// [Object: null prototype] &#123; username: &#x27;123&#x27;, password: &#x27;456&#x27; &#125;</span></span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span>=<span class="string">&quot;GET请求~~&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h2><ul><li>输出结果：body将响应主体设置为以下之一：<ul><li>string ：字符串数据</li><li>Buffer ：Buffer数据</li><li>Stream ：流数据</li><li>Object|| Array：对象或者数组</li><li>null ：不输出任何内容</li><li>如果response.status尚未设置，Koa会自动将状态设置为200或204。</li></ul></li><li>ctx.response.body 可以简写为 ctx.body</li><li>ctx.status&#x3D;xxx  设置状态码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ctx.response.body=&quot;hello world&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ctx.response.body=&#123;</span></span><br><span class="line">    <span class="comment">//     name:&quot;fsllala&quot;,</span></span><br><span class="line">    <span class="comment">//     age:18</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ctx.response.body=[123,123,&quot;123ads&quot;];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置状态码</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">    <span class="comment">// ctx.response.body 可以简写为 ctx.body</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;hahahaa&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running port is 3000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul><li><p>使用<code>ctx.app.emit(&quot;error&quot;,new Error(&quot;xxxx&quot;),ctx)</code>传参；(第一个”error”的监听错误信息，第二个是传递的错误信息参数，第三个是ctx参数)</p></li><li><p>使用<code>app.on(&quot;error&quot;,(error,ctx)=&gt;&#123;&#125;)</code>接收错误信息；(第一个”error”的监听错误信息，第二个是回调函数，接收传送来的 错误信息参数和ctx参数)</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isLogin =<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!isLogin)&#123;</span><br><span class="line">        <span class="comment">// 使用ctx里面的app的emit方法 发送一个事件;</span></span><br><span class="line">        ctx.<span class="property">app</span>.<span class="title function_">emit</span>(<span class="string">&quot;error&quot;</span>,<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;您还没有登录&quot;</span>),ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听错误事件</span></span><br><span class="line"><span class="comment">// 这个和上面的 ctx.app.emit(&quot;error&quot;,new Error(&quot;您还没有登录&quot;),ctx)变量是一一对应的;</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>,<span class="function">(<span class="params">err,ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.<span class="property">status</span>=<span class="number">401</span>;</span><br><span class="line">    ctx.<span class="property">body</span>=err.<span class="property">message</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running port is 3000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Koa与express区别"><a href="#Koa与express区别" class="headerlink" title="Koa与express区别"></a>Koa与express区别</h2><ul><li>从架构设计上来说：<ul><li>express是完整和强大的，其中帮助我们内置了非常多好用的功能；</li><li>koa是简洁和自由的，它只包含最核心的功能，并不会对我们使用其他中间件进行任何的限制。<ul><li>甚至是在app中连最基本的get、post都没有给我们提供；</li><li>我们需要通过自己或者路由来判断请求方式或者其他功能；</li></ul></li></ul></li><li>express和koa框架他们的核心其实都是中间件：<ul><li>但是他们的中间件事实上，它们的中间件的执行机制是不同的，特别是针对某个中间件中包含异步操作时；</li><li>所以，接下来，我们再来研究一下express和koa中间件的执行顺序问题；</li></ul></li></ul><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><blockquote><p>这里通过一个需求来演示所有的过程；</p></blockquote><ul><li><p>假如有三个中间件会在一次请求中匹配到，并且按照顺序执行；</p></li><li><p>我希望最终实现的方案是：</p><ul><li>在middleware1中，在req.message中添加一个字符串 aaa；  <code>res.message=&quot;aaa&quot;;</code></li><li>在middleware2中，在req.message中添加一个 字符串bbb； <code>res.message+=&quot;bbb&quot;;</code></li><li>在middleware3中，在req.message中添加一个 字符串ccc； <code>res.message+=&quot;ccc&quot;;</code></li><li>当所有内容添加结束后，在middleware1中，通过res返回最终的结果；<code>aaabbbccc</code>(必须在第一个中间件里返回)</li></ul></li><li><p>实现方案：</p><ul><li>Express同步数据的实现；</li><li>Express异步数据的实现；</li><li>Koa同步数据的实现；</li><li>Koa异步数据的实现；**(Koa的next()函数返回的是一个<code>promise</code>)**</li></ul><blockquote><p>Express同步数据的实现；</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware1</span> = (<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    res.<span class="property">message</span>=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();  <span class="comment">//因为是同步代码,所以next(),会先执行middleware2</span></span><br><span class="line">    res.<span class="title function_">end</span>(res.<span class="property">message</span>);  <span class="comment">// aaabbbccc   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware2</span> = (<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    res.<span class="property">message</span>+=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();<span class="comment">//因为是同步代码,所以next(),会先执行middleware3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware3</span> = (<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    res.<span class="property">message</span>+=<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(middleware1,middleware2,middleware3);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Express异步数据的实现；这里使用<code>axios</code></p></blockquote><ul><li>npm i axios</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    res.<span class="property">message</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">    <span class="comment">// res.end(res.message);  //aaabbb</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    res.<span class="property">message</span> += <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware3</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里是异步,上面next()到这里之后，跳过异步,看异步后面的；</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.vvhan.com/api/love&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        res.<span class="property">message</span> += result.<span class="property">data</span>;</span><br><span class="line">        res.<span class="title function_">end</span>(res.<span class="property">message</span>);  <span class="comment">//要是想以中间件的形式获取到完整的res.message,express比较难处理;(可以将异步以函数的形式写在middleware1里,但不是中间件了)；</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先看异步后面的,即看这里,这里啥也没有,就返回middleware1了；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(middleware1, middleware2, middleware3);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Koa同步数据的实现；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> =<span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware1</span> = (<span class="params">ctx,next</span>)=&gt;&#123;</span><br><span class="line">    ctx.<span class="property">message</span>=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();  <span class="comment">//因为是同步代码,所以next(),会先执行middleware2</span></span><br><span class="line">    ctx.<span class="property">body</span>=ctx.<span class="property">message</span>;  <span class="comment">// aaabbbccc   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware2</span> = (<span class="params">ctx,next</span>)=&gt;&#123;</span><br><span class="line">    ctx.<span class="property">message</span>+=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();<span class="comment">//因为是同步代码,所以next(),会先执行middleware3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware3</span> = (<span class="params">ctx,next</span>)=&gt;&#123;</span><br><span class="line">    ctx.<span class="property">message</span>+=<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa不支持一次注册多个中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(middleware1);</span><br><span class="line">app.<span class="title function_">use</span>(middleware2);</span><br><span class="line">app.<span class="title function_">use</span>(middleware3);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Koa异步数据的实现；<strong>koa的next()函数返回的是一个promise</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa的next()函数返回的是一个promise</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware1</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">message</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    ctx.<span class="property">body</span> = ctx.<span class="property">message</span>; <span class="comment">//完整的ctx.message</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware2</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">message</span> += <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware3</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.vvhan.com/api/love&quot;</span>);</span><br><span class="line">    ctx.<span class="property">message</span> += result.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa不支持一次注册多个中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(middleware1);</span><br><span class="line">app.<span class="title function_">use</span>(middleware2);</span><br><span class="line">app.<span class="title function_">use</span>(middleware3);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> Koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs Express</title>
      <link href="/articles/8ba9ed2d.html"/>
      <url>/articles/8ba9ed2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Express 是一个简洁而灵活的 Node.js Web应用框架, 提供一系列强大特性帮助你创建各种Web应用</li><li>Express内部还是使用的http模块实现服务器创建和监听, 对http模块进行了二次封装</li><li>严格上来说  express就是NodeJS的一个模块  直接下载安装</li></ul><h2 id="中文官网"><a href="#中文官网" class="headerlink" title="中文官网"></a>中文官网</h2><p><a href="http://express.js.cn/">express中文官网</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>node下载express模块：</li><li>命令  ： <ul><li>初始化服务 ： <code>npm init -y</code>  </li><li>下载express：  <code>npm  i  express</code></li></ul></li><li>使用的时候  引入  需要实例化一个express应用  使用应用对象创建各种服务</li></ul><h2 id="express初体验"><a href="#express初体验" class="headerlink" title="express初体验"></a>express初体验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// express其实是一个函数;</span></span><br><span class="line"><span class="comment">// 调用函数返回 app,app本质也是一个函数;</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听默认路径(GET)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello GET express&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听默认路径(POST)</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello POST express&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a>express中间件</h2><h3 id="中间件基本概念"><a href="#中间件基本概念" class="headerlink" title="中间件基本概念"></a>中间件基本概念</h3><blockquote><p>Express是一个路由和中间件的Web框架，Express应用程序本质上是一系列中间件函数的调用；那么，中间件是什么呢？</p></blockquote><ul><li>中间件的本质是传递给express的一个回调函数；</li><li>这个回调函数接受三个参数：</li><li>请求对象（request对象）；</li><li>响应对象（response对象）；</li><li>next函数（在express中定义的用于执行下一个中间件的函数）；</li></ul><blockquote><p> 中间件中可以执行哪些任务呢？</p></blockquote><ul><li>执行任何代码；</li><li>更改请求（request）和响应（response）对象；</li><li>结束请求-响应周期（返回数据）；</li><li>调用栈中的下一个中间件；</li><li>如果当前中间件功能没有结束请求-响应周期，则必须调用next()将控制权传递给下一个中间件功能，否则，请求 将被挂起。</li></ul><h3 id="app-use创建最普通中间件-对method和路由均没有限制"><a href="#app-use创建最普通中间件-对method和路由均没有限制" class="headerlink" title="app.use创建最普通中间件(对method和路由均没有限制)"></a>app.use创建最普通中间件(对method和路由均没有限制)</h3><blockquote><p>使用<code>app.use</code>注册一个最普通的中间件，因为没有对<code>method</code>做限制，所以<code>GET请求</code>与<code>POST请求</code>都可以访问；因为没有对<code>路由</code>做限制，所以<code>所有路由</code>都可以访问；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写普通中间件</span></span><br><span class="line"><span class="comment">// use注册一个中间件(回调函数)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第01个普通中间件&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="app-use创建多个最普通中间件"><a href="#app-use创建多个最普通中间件" class="headerlink" title="app.use创建多个最普通中间件"></a>app.use创建多个最普通中间件</h3><blockquote><p>app.use注册多个最普通的中间件，当发送请求的时候，虽然这几个中间件都可以匹配成功，但是只会执行第01个中间件；后面的即使匹配成功了，也不会执行；</p><p>即：中间件永远查找匹配成功的第一个中间件，要想别的匹配成功的中间件也执行，需要在上一个匹配成功的中间件执行next()；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写普通中间件</span></span><br><span class="line"><span class="comment">// use注册一个中间件(回调函数)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第01个普通中间件&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第02个普通中间件&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第03个普通中间件&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>那么如何执行多个中间件呢？</p><p>答：使用<code>next()</code>调用栈中的下一个<code>可以匹配成功</code>的中间件；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写普通中间件</span></span><br><span class="line"><span class="comment">// use注册一个中间件(回调函数)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第01个普通中间件&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">//调用了下一个匹配成功的中间件</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第02个普通中间件&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">//调用了下一个匹配成功的中间件</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册了第03个普通中间件&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><blockquote><p> 路径匹配中间件：对路由做限制，对method不做限制</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径匹配中间件：对路由做限制，对method不做限制</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以下均可匹配成功</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/home</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/home?username=fwd&amp;password=123456</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/home&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home middleware 01&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;home middleware&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>多个路由中间件同上，需要调用next()执行下一个匹配成功的中间件；</p></blockquote><h3 id="路由和方法都匹配的中间件"><a href="#路由和方法都匹配的中间件" class="headerlink" title="路由和方法都匹配的中间件"></a>路由和方法都匹配的中间件</h3><blockquote><p>不使用<code>app.use</code>即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/home&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 01&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;home middleware&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;login path and method middleware 01&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;login middleware&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="连续注册中间件-koa不支持"><a href="#连续注册中间件-koa不支持" class="headerlink" title="连续注册中间件(koa不支持)"></a>连续注册中间件(koa不支持)</h3><blockquote><p>多个参数，每个参数都是回调函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样其实也只会匹配第一个匹配的中间件,即打印  home path and method middleware 01</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/home&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 01&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;home middleware&quot;</span>);</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 02&quot;</span>);</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 03&quot;</span>);</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 04&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>要想执行多个匹配成功的中间件，也还是调用next()；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/home&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 01&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;home middleware&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 02&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 03&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home path and method middleware 04&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="POST请求body参数解析"><a href="#POST请求body参数解析" class="headerlink" title="POST请求body参数解析"></a>POST请求body参数解析</h2><h3 id="中间件应用-json-urlencoded解析"><a href="#中间件应用-json-urlencoded解析" class="headerlink" title="中间件应用-json-urlencoded解析"></a>中间件应用-json-urlencoded解析</h3><blockquote><p>注册express内置的<code>body-parser</code>；使用<code>req.body</code>接收参数；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用body-parser  express内置成函数 即直接注册</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());  <span class="comment">//解析 JSON数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">true</span>&#125;)); <span class="comment">//解析 x-www-form-urlencoded 数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> info = req.<span class="property">body</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;使用req.body获取body参数&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>关于express.urlencoded({extended:true})中的extended：</p></blockquote><ul><li>true:  那么对urlencoded进行解析时,他使用的是第三方库：qs</li><li>false：那么对urlencoded进行解析时,他使用的是node内置模块：querystring</li></ul><h3 id="中间件应用-form-data解析"><a href="#中间件应用-form-data解析" class="headerlink" title="中间件应用-form-data解析"></a>中间件应用-form-data解析</h3><blockquote><p>form-data解析：一般用于上传图片文件；</p><p>express框架没有内置的解析中间件，但是有官方的库<code>multer</code>，需要下载安装一下：<code>npm i multer</code></p></blockquote><h4 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h4><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1671354368858formdata1.png" alt="multer初使用"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不推荐此写法</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 引入multer,是个函数</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用multer函数</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示 form-data中普通的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(upload.<span class="title function_">any</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;用户上传成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>但是上方写法存在个问题：<a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md%E5%86%99%E7%9D%80%22%E6%B0%B8%E8%BF%9C%E4%B8%8D%E8%A6%81%E5%B0%86">https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md写着&quot;永远不要将</a> multer 作为全局中间件使用，因为恶意用户可以上传文件到一个你没有预料到的路由，应该只在你需要处理上传文件的路由上使用；</p></blockquote><ul><li>如果你需要处理一个只有文本域的表单，你应当使用 <code>.none()</code>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 引入multer,是个函数</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>()</span><br><span class="line"><span class="comment">// 如果你需要处理一个只有文本域的表单，你应当使用 .none():</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">none</span>(), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.body 包含文本域</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;用户上传成功~&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><blockquote><p>上传图片文件，并且将上传的图片文件放在服务器中某位置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 引入multer,是个函数</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示将上传的文件指定地址存放，若没有该文件，则创建文件夹(启动服务的时候,没有的话会创建文件夹)</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    <span class="attr">dest</span>: <span class="string">&quot;./uploadImg/&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里使用连续中间件，upload.single(&#x27;img&#x27;)表示解析单个文件夹，且key值为 &quot;img&quot;,</span></span><br><span class="line"><span class="comment">// 进行处理后，传递给后面的中间件 next ，然后返回结果给客户端</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;avatar&quot;</span>), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.file 是 `avatar` 文件的信息</span></span><br><span class="line">    <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">file</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;用户上传成功~&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>此时我们图片没有后缀，而且不能直接打开，我们给图片添加后缀和重命名</p></blockquote><ul><li>磁盘存储引擎 (DiskStorage)：磁盘存储引擎可以让你控制文件的存储。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="comment">// 回调函数写法 这个文件夹必须自己手动创建,没有的话也不会自动创建;</span></span><br><span class="line">    <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&quot;./uploadImg/&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// path.extname(file.originalname))获取文件的拓展名 .png .jpg .gif</span></span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>() + path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    storage</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里使用连续中间件，upload.single(&#x27;img&#x27;)表示解析单个文件夹，且key值为 &quot;img&quot;,</span></span><br><span class="line"><span class="comment">// 进行处理后，传递给后面的中间件 next ，然后返回结果给客户端</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;avatar&quot;</span>), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.file 是 `avatar` 文件的信息</span></span><br><span class="line">    <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">file</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;用户上传成功~&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里使用diskStorage处理文件上传的地址和文件名，其中 destination可以为字符串也可以为函数，但是两者使用上有区别：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为上传的文件添加后缀和文件名</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="comment">// cb是callback回调函数的缩写</span></span><br><span class="line">    <span class="comment">// destination:(req,file,cb)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     cb(null,&#x27;./uploadImg/&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="attr">destination</span>:<span class="string">&quot;./uploadImg/&quot;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="function">(<span class="params">req,file,cb</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 文件名取 时间戳和原文件的后缀名进行组合</span></span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>()+path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>字符串，将根据字符串，创建文件夹；</li><li>回调函数中，传入的字符串表示文件放入的地址不会创建该文件夹（若没有的话）；</li></ul><blockquote><p>上面是一次上传一张图片的情形，其实还有一次上传多张图片的情形；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> multer  = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: <span class="string">&#x27;uploads/&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/profile&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;avatar&#x27;</span>), <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// req.file 是 `avatar` 文件的信息</span></span><br><span class="line">  <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/photos/upload&#x27;</span>, upload.<span class="title function_">array</span>(<span class="string">&#x27;photos&#x27;</span>, <span class="number">12</span>), <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// req.files 是 `photos` 文件数组的信息</span></span><br><span class="line">  <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cpUpload = upload.<span class="title function_">fields</span>([&#123; <span class="attr">name</span>: <span class="string">&#x27;avatar&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;gallery&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">8</span> &#125;])</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/cool-profile&#x27;</span>, cpUpload, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// req.files 是一个对象 (String -&gt; Array) 键是文件名，值是文件数组</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// 例如：</span></span><br><span class="line">  <span class="comment">//  req.files[&#x27;avatar&#x27;][0] -&gt; File</span></span><br><span class="line">  <span class="comment">//  req.files[&#x27;gallery&#x27;] -&gt; Array</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>.single(fieldname)：接受一个以 fieldname 命名的文件。这个文件的信息保存在 req.file。</li><li>.array(fieldname[, maxCount])：接受一个以 fieldname 命名的文件数组。可以配置 maxCount 来限制上传的最大数量。这些文件的信息保存在 req.files。</li><li>.fields(fields)：接受指定 fields 的混合文件。这些文件的信息保存在 req.files；fields 应该是一个对象数组，应该具有 name 和可选的 maxCount 属性。</li><li>array和fields区别是：array上传的多张文件名的key都是一样的，而fields因为参数是数组对象，所以可以多种key，每个key又能限制count；</li></ul><p>Example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;avatar&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;gallery&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">8</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>upload.any()不作为全局，作为局部中间件；也可以接收一次上传多张的情形，而且还不用指定key；更加自由；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个文件夹必须自己手动创建,没有的话也不会自动创建;</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>:<span class="string">&quot;./uploadImg/&quot;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// path.extname(file.originalname))获取文件的拓展名 .png .jpg .gif</span></span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>() + path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    storage</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// upload.any()作为中间件;</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">any</span>(), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.files 是文件的信息 数组对象</span></span><br><span class="line">    <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">files</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;用户上传成功~&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="GET请求参数解析"><a href="#GET请求参数解析" class="headerlink" title="GET请求参数解析"></a>GET请求参数解析</h2><h3 id="params解析-路由参数"><a href="#params解析-路由参数" class="headerlink" title="params解析(路由参数)"></a>params解析(路由参数)</h3><blockquote><p>&#x2F;products&#x2F;:id&#x2F;:name的这种的(<a href="http://127.0.0.1:3000/products/fsl/forward)%EF%BC%8C%E7%94%A8req.params%E8%A7%A3%E6%9E%90">http://127.0.0.1:3000/products/fsl/forward)，用req.params解析</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express= <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  http://127.0.0.1:3000/products/fsl/forward</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/products/:id/:name&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 通过req.params接收,接收的是一个对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>); <span class="comment">//&#123; id: &#x27;fsl&#x27;, name: &#x27;forward&#x27; &#125;</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;商品的详情数据~&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000~&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="query解析"><a href="#query解析" class="headerlink" title="query解析"></a>query解析</h3><blockquote><p>&#x2F;login这种的(<a href="http://127.0.0.1:3000/login?name=fsl&age=18)%EF%BC%8C%E7%94%A8req.query%E8%A7%A3%E6%9E%90">http://127.0.0.1:3000/login?name=fsl&amp;age=18)，用req.query解析</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express= <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://127.0.0.1:3000/login?name=fsl&amp;age=18</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 通过req.query接收,接收的是一个对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// &#123; name: &#x27;fsl&#x27;, age: &#x27;18&#x27; &#125;</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;登陆成功~&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000~&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h2><ul><li>res.end(xxx)：只能返回 字符串、buffer数据等，不能返回 JSON，数组；</li><li>res.json(xxx)：可以传入很多的类型：object、array、string、boolean、number、null等，它们会被转换成<br>json格式返回；</li><li>res.status(200)：用于设置状态码</li></ul><h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 举个例子： 这些所有的放在一个app文件里,接口看起来是有点重复的,而且太多了,不方便管理;</span></span><br><span class="line"><span class="comment"> *     请求所有的用户信息：get     /users</span></span><br><span class="line"><span class="comment"> *     请求某个用户信息：  get     /users/:id</span></span><br><span class="line"><span class="comment"> *     请求某个用户信息：  post    /users   body &#123;username:fsllala,password:123&#125;</span></span><br><span class="line"><span class="comment"> *     请求某个用户信息：  delete  /users/:id</span></span><br><span class="line"><span class="comment"> *     请求某个用户信息：  put     /users/:id</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以使用 <code>express.Router()</code>来创建一个路由处理程序：一个Router实例拥有完整的中间件和路由系统；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个router文件夹,下面创建user.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();  <span class="comment">//express.Router()是个函数</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>([<span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;fsllala&quot;</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(<span class="string">`<span class="subst">$&#123;req.params.id&#125;</span>用户的信息`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(<span class="string">&quot;create user success~&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在app文件里引入路由</span></span><br><span class="line"><span class="keyword">const</span> express= <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/user.js&quot;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(userRouter);  <span class="comment">//注册路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000~&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注册路由的时候,可以有两个参数 app.use(“&#x2F;公共路由”，”路由”)；上面的写法就可以写成下面这样：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个router文件夹,下面创建user.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();  <span class="comment">//express.Router()是个函数</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>([<span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;fsllala&quot;</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/:id&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(<span class="string">`<span class="subst">$&#123;req.params.id&#125;</span>用户的信息`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(<span class="string">&quot;create user success~&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在app文件里引入路由</span></span><br><span class="line"><span class="keyword">const</span> express= <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/user.js&quot;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/users&quot;</span>,userRouter);  <span class="comment">//注册路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running port is 3000~&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md">multer官方文档</a></p><p><a href="https://blog.csdn.net/qq_64841572/article/details/126254419?spm=1001.2014.3001.5506">Node中间件multer库学习</a></p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化规范</title>
      <link href="/articles/4dee6fea.html"/>
      <url>/articles/4dee6fea.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是模块化？"><a href="#什么是模块化？" class="headerlink" title="什么是模块化？"></a>什么是模块化？</h1><ul><li>模块化就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块；</li><li>将一个项目拆分为若干块，每块之间以一定的形式进行通信，而每块内部的内容都是独立的；</li><li>可以理解为一个js文件也就是一个模块；</li></ul><h1 id="模块化的好处？"><a href="#模块化的好处？" class="headerlink" title="模块化的好处？"></a>模块化的好处？</h1><ul><li>抽离公共的代码，提高了代码的维护性和复用性；</li><li>隔离作用域，避免变量的冲突；</li><li>将一个复杂的系统分解为多个子模块，便于开发和维护；</li></ul><h1 id="常用的模块化规范"><a href="#常用的模块化规范" class="headerlink" title="常用的模块化规范?"></a>常用的模块化规范?</h1><h2 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>CommonJs最大的特点就是同步加载；(缺点)</li><li>每一个文件都是一个Module对象，通过关键字module.exports或者exports来暴露内容，并可以通过require来引入指定模块；</li><li>模块一旦加载一次之后就会被缓存；</li></ul><h3 id="工作环境"><a href="#工作环境" class="headerlink" title="工作环境"></a>工作环境</h3><blockquote><p>服务端；两个原因使CommonJs无法在浏览器端使用：</p></blockquote><ul><li>根本原因：CommonJs中使用了Node的api，无法在浏览器中运行。</li><li>直接原因：作为一门同步加载的模块规范必须得在require完全加载好之后才能执行下一步，所以会有阻塞的情况，在网络状态比较差的情况下，就会导致浏览器的假死现象。(对于服务端，require的等待时间是硬盘读取时间，而对于浏览器端来说，这取决于网速的快慢。)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>使用 <code>exports.x </code>或者<code>module.exports</code>暴露模块；</li><li>通过<code>require</code>来完成对模块的引入；</li><li>一个文件就是一个模块，都拥有独立的作用域；</li></ul><h4 id="使用exports-x暴露；"><a href="#使用exports-x暴露；" class="headerlink" title="使用exports.x暴露；"></a>使用<code>exports.x</code>暴露；</h4><blockquote><p>使用<code>exports.x</code>暴露；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m1.js文件</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exports是个对象;给exports对象上面添加属性进行导出;</span></span><br><span class="line"><span class="comment">// exports.x</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num1</span>=num; <span class="comment">//num1是随便取的;尽量和变量名保持一致</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sum</span>=sum; </span><br><span class="line"><span class="built_in">exports</span>.<span class="property">Animal</span>=<span class="title class_">Animal</span>; </span><br></pre></td></tr></table></figure><blockquote><p>使用<code>require</code>引入<code>m1.js</code>；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建index.js文件用来引入m1.js</span></span><br><span class="line"><span class="comment">// require函数的返回值是个对象,是exports对象;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">M1</span> = <span class="built_in">require</span>(<span class="string">&quot;./m1.js&quot;</span>); <span class="comment">//这行代码的本质是  M1=exports;(对象赋值,其实是地址)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M1</span>); <span class="comment">//&#123; num1: 10, sum: [Function: sum], Animal: [class Animal] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M1</span>.<span class="property">num1</span>); <span class="comment">//10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M1</span>.<span class="title function_">sum</span>(<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DOG</span> = <span class="keyword">new</span> <span class="variable constant_">M1</span>.<span class="title class_">Animal</span>(); <span class="comment">//const声明的常量 建议大写;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DOG</span>.<span class="property">age</span>) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><h4 id="使用module-exports暴露多个；"><a href="#使用module-exports暴露多个；" class="headerlink" title="使用module.exports暴露多个；"></a>使用<code>module.exports</code>暴露多个；</h4><blockquote><p>使用<code>module.exports</code>暴露；在一个自定义模块中，默认情况下，module.exports&#x3D;{}；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m2.js文件</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// methods 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports是个对象;给module.exports对象上面添加属性进行导出;</span></span><br><span class="line"><span class="comment">// module.exports.num=num;</span></span><br><span class="line"><span class="comment">// module.exports.sum=sum;</span></span><br><span class="line"><span class="comment">// module.exports.Animal=Animal;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//methods 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports导出方式  es6对象简写形式(上面声明了变量,下面json的键值对名一样,可以简写;(值就是上面的变量))</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    num,</span><br><span class="line">    sum,</span><br><span class="line">    <span class="title class_">Animal</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>require</code>引入<code>m2.js</code>；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两种方式的引入方式都是一样的，都是require(&quot;相对路径&quot;);</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">M2</span> = <span class="built_in">require</span>(<span class="string">&quot;./m2.js&quot;</span>); <span class="comment">//require函数的返回值是个对象,是module.exports对象;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>); <span class="comment">//&#123; num: 10, sum: [Function: sum], Animal: [class Animal] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>.<span class="property">num</span>); <span class="comment">//10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>.<span class="title function_">sum</span>(<span class="number">5</span>,<span class="number">3</span>)); <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CAT</span> = <span class="keyword">new</span> <span class="variable constant_">M2</span>.<span class="title class_">Animal</span>(); <span class="comment">//const声明的常量 建议大写;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">CAT</span>.<span class="property">age</span>) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><h4 id="使用module-exports暴露单个；"><a href="#使用module-exports暴露单个；" class="headerlink" title="使用module.exports暴露单个；"></a>使用<code>module.exports</code>暴露单个；</h4><blockquote><p>使用<code>module.exports</code>暴露；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m2.js文件</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports是个对象,但是不加属性,直接导出;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=sum;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>require</code>引入<code>m2.js</code>；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">M2</span> = <span class="built_in">require</span>(<span class="string">&quot;./m2.js&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>); <span class="comment">//[Function: sum] 这里的M2就是m2.js里导出的东西,就不再是对象了;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(M2.sum(5,3)); // TypeError: M2.sum is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">M2</span>(<span class="number">5</span>,<span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h4 id="module-exports与exports有什么关系或者区别呢？"><a href="#module-exports与exports有什么关系或者区别呢？" class="headerlink" title="module.exports与exports有什么关系或者区别呢？"></a>module.exports与exports有什么关系或者区别呢？</h4><ul><li>我们追根溯源，通过维基百科中对CommonJS规范的解析：<ul><li>CommonJS中是没有module.exports的概念的；</li><li>但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是<br>module；</li><li>所以在Node中真正用于导出的其实根本不是exports，而是module.exports；</li><li>因为module才是导出的真正实现者；</li></ul></li><li>但是，为什么exports也可以导出呢？<ul><li>这是因为module对象的exports属性是exports对象的一个引用；</li><li>也就是说 module.exports &#x3D; exports &#x3D; index.js中的M2；</li></ul></li></ul><h5 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h5><blockquote><p>Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是module；</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/module.png" alt="module"></p><h5 id="module-exports-对象"><a href="#module-exports-对象" class="headerlink" title="module.exports 对象"></a>module.exports 对象</h5><blockquote><p>module.exports&#x3D;xxx的过程其实是引用赋值(浅拷贝)的过程；exports(也是一个对象)之所以可以导出，就是把exports对象的地址赋值给了module.exports，借助module.exports导出；</p></blockquote><ul><li>使用 require() 方法导入模块时，导入的结果，永远以 最下面的module.exports 指向的对象为准；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m2.js文件</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports是个对象;给module.exports对象上面添加属性进行导出;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">num</span>=num;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sum</span>=sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports开辟了新的引用类型地址;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;开辟新的引用类型地址&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">M2</span> = <span class="built_in">require</span>(<span class="string">&quot;./m2.js&quot;</span>); <span class="comment">//require函数的返回值是个对象,是module.exports对象;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>); <span class="comment">//&#123; name: &#x27;开辟新的引用类型地址&#x27; &#125;</span></span><br></pre></td></tr></table></figure><ul><li>上面的module.exports属性要是在下面结果就不一样了;相当于在原来的对象上添加了属性;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m2.js文件</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports开辟了新的引用类型地址;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;开辟新的引用类型地址&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports是个对象;给上面的那个module.exports对象上面添加属性进行导出;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">num</span>=num;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sum</span>=sum;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">M2</span> = <span class="built_in">require</span>(<span class="string">&quot;./m2.js&quot;</span>); <span class="comment">//require函数的返回值是个对象,是module.exports对象;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>); <span class="comment">//&#123; name: &#x27;开辟新的引用类型地址&#x27;, num: 10, sum: [Function: sum] &#125;</span></span><br></pre></td></tr></table></figure><ul><li>exports与module.exports同时导出</li></ul><blockquote><p>由于真正用于导出的其实根本不是exports，而是module.exports；所以同时导出的时候module.exports开辟了新的内存地址，exports就相当于被架空了;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m2.js文件</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">num</span>=num;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sum</span>=sum;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;开辟新的引用类型地址&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">M2</span> = <span class="built_in">require</span>(<span class="string">&quot;./m2.js&quot;</span>); <span class="comment">//require函数的返回值是个对象,是module.exports对象;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">M2</span>); <span class="comment">//&#123; num: 10, sum: [Function: sum] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>ES6最大的特点是按需加载；</li></ul><h3 id="工作环境-1"><a href="#工作环境-1" class="headerlink" title="工作环境"></a>工作环境</h3><ul><li>是浏览器端与服务器端通用的模块化开发规范；</li></ul><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul><li>使用 <code>export </code>或者<code>export default</code>暴露模块；</li><li>通过<code>import</code>来完成对模块的引入；</li><li><code>export defalut</code>每个js模块里面只能有一个；<code>export</code>可以有多个；</li></ul><h4 id="使用export直接导出"><a href="#使用export直接导出" class="headerlink" title="使用export直接导出"></a>使用<code>export</code>直接导出</h4><blockquote><p>使用<code>export</code>暴露；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m1.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>import &#123;xx,xx&#125; from &quot;xxx&quot;</code>引入；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建index.js文件用来引入m1.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">//12</span></span><br></pre></td></tr></table></figure><h4 id="使用export一起导出"><a href="#使用export一起导出" class="headerlink" title="使用export一起导出"></a>使用<code>export</code>一起导出</h4><blockquote><p>使用<code>export&#123;&#125;</code>暴露；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m1.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>import &#123;xx,xx&#125; from &quot;xxx&quot;</code>引入；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建index.js文件用来引入m1.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">//13</span></span><br></pre></td></tr></table></figure><h4 id="使用export-default导出"><a href="#使用export-default导出" class="headerlink" title="使用export default导出"></a>使用<code>export default</code>导出</h4><blockquote><p>使用<code>export default</code>暴露；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m1.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;  <span class="comment">//默认导出：一个js文件中只能写一次</span></span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>import xxx from &quot;xxx&quot;</code>引入；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建index.js文件用来引入m1.js</span></span><br><span class="line"><span class="keyword">import</span> m1 <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>; <span class="comment">//import 后面的 m1 是随便起的;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1); <span class="comment">//&#123; name: &#x27;张三&#x27;, age: 14 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">name</span>);<span class="comment">//张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">age</span>);<span class="comment">//14</span></span><br></pre></td></tr></table></figure><h4 id="混用"><a href="#混用" class="headerlink" title="混用"></a>混用</h4><blockquote><p>使用<code>export</code>和<code>export default</code>暴露；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建m1.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> email = <span class="string">&quot;nodeJs@163.com&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;  <span class="comment">//默认导出一个js文件中只能写一次</span></span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>import xxx,&#123;xx,xx&#125; from &quot;xxx&quot;</code>引入；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建index.js文件用来引入m1.js</span></span><br><span class="line"><span class="keyword">import</span> m1,&#123;email&#125; <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1); <span class="comment">//&#123; name: &#x27;张三&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">name</span>);<span class="comment">//张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">age</span>);<span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(email);<span class="comment">//nodeJs@163.com</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://blog.csdn.net/qq_32019935/article/details/124619833">模块化规范</a></li><li><a href="https://blog.csdn.net/icemwj/article/details/119606468?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~ESLANDING~default-2-119606468-blog-124619833.pc_relevant_landingrelevant&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~ESLANDING~default-2-119606468-blog-124619833.pc_relevant_landingrelevant&utm_relevant_index=5">了解模块化的相关规范</a></li><li><a href="https://www.jianshu.com/p/296446c457c2">模块化规范</a></li><li><a href="https://www.jianshu.com/p/58f49f69a2fb">commonjs 与 ES6 模块化</a></li><li><a href="https://blog.csdn.net/yezhihaobk/article/details/125225290">Node.js 模块化 module.exports 和 exports 的使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> CommonJs </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CommonJs </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm、npm与nrm</title>
      <link href="/articles/7cf6476b.html"/>
      <url>/articles/7cf6476b.html</url>
      
        <content type="html"><![CDATA[<h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><h2 id="nvm是什么"><a href="#nvm是什么" class="headerlink" title="nvm是什么?"></a>nvm是什么?</h2><blockquote><p><code>nvm(node.js version manager)</code>即<code>nodejs</code>版本管理器；可以简单操作node版本的切换、安装、查看。。。等等；与<code>npm</code>不同的是，<code>npm</code>是依赖包的管理工具。</p></blockquote><h2 id="为什么需要用nvm"><a href="#为什么需要用nvm" class="headerlink" title="为什么需要用nvm?"></a>为什么需要用nvm?</h2><blockquote><p><code>node</code>有很多的版本，切记，并不是新版一出现，旧的版本就不去用了；在不同的项目开发过程中，可能需要我们电脑中同时存在多个不同版本的<code>node</code>；这时候就需要一个软件，来更好的管理这些不同版本的<code>node</code>同时存在于我们的电脑中。</p></blockquote><h2 id="nvm的安装"><a href="#nvm的安装" class="headerlink" title="nvm的安装"></a>nvm的安装</h2><ol><li><p>安装<code>nvm</code>之前先删除现有的<code>node</code>；在控制面板里面删了就行；</p></li><li><p><code>nvm</code><a href="https://github.com/coreybutler/nvm-windows">下载链接</a>；</p></li><li><p>安装路径建议不要换，因为用默认的路径环境变量就自动配置好了；即一直<code>Next</code>，啥也不要改；</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nvmVersion.png" alt="nvm安装"></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nvmVersion2.png" alt="nvm安装"></p></li><li><p>通过<code>nvm -v</code>查看是否安装成功了；通过<code>nvm list</code>查看当前电脑上安装了那些版本的<code>node</code>(因为刚才卸载了，所以现在是<code>No installations recognized.</code>)</p></li><li><p>配置<code>nvm</code>：复制下面代码(配置镜像源)到<code>nvm</code>文件位置(过程3的第一张图)，点开<code>setting.txt</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node_mirror</span>: <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/node/</span></span><br><span class="line"><span class="attr">npm_mirror</span>: <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/npm/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nvmLocation.png" alt="配置淘宝镜像"></p></li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nvmLocation2.png" alt="配置淘宝镜像"></p><h2 id="nvm命令"><a href="#nvm命令" class="headerlink" title="nvm命令"></a>nvm命令</h2><ul><li><code>nvm version</code>：查看<code>nvm</code>版本</li><li><code>nvm list</code>：查看当前安装的<code>Node.js</code>的所有版本**(常用)**</li><li><code>nvm install 版本号</code>：安装指定版本的<code>Node.js</code><strong>(常用)</strong></li><li><code>nvm uninstall 版本号</code>：卸载指定版本的<code>Node.js</code></li><li><code>nvm use 版本号</code>：选择指定版本的<code>Node.js</code><strong>(常用)</strong></li></ul><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><ul><li><p><a href="https://nodejs.org/en/">官网链接</a></p></li><li><p>以管理员方式运行<code>cmd</code>命令行</p><ol><li>安装对应的版本</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 版本号 <span class="comment">// 例如：nvm install 16.18.0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>切换到安装的版本</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 版本号     <span class="comment">// 切换到使用指定的nodejs版本</span></span><br></pre></td></tr></table></figure><ol start="3"><li>检测是否切换完成，新开一个<code>cmd</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nvmNode.png" alt="安装Node"></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/v1.png" alt="查看当前node版本"></p></li></ul><ol start="4"><li>多个版本的<code>node</code>切换：这里又安装了10.15.0版本的<code>node</code>，通过<code>nvm use 10.15.0</code>切换了版本号；</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/vv.png" alt="安装多个node版本"></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/v2.png" alt="查看当前node版本"></p><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><blockquote><p>npm（Node Package Manager），Node.js 的包管理器，安装 Node.js 之后自带 npm，无需单独安装。💓</p></blockquote><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>输入 npm -v 来查看当前 npm 的版本</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/npm1673616215090.png" alt="npm"></p><h1 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h1><blockquote><p>nrm（<a href="https://github.com/Pana/nrm">NPM registry manager</a>），国内使用 npm 官方源来安装包的时候比较慢，所以经常会需要修改 npm 源地址。npm 倒是提供了修改源的方法，但是 nrm 更加方便快捷。💓</p></blockquote><h2 id="nrm的安装"><a href="#nrm的安装" class="headerlink" title="nrm的安装"></a>nrm的安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm   <span class="comment">// 使用 npm 全局安装</span></span><br></pre></td></tr></table></figure><h2 id="nrm命令"><a href="#nrm命令" class="headerlink" title="nrm命令"></a>nrm命令</h2><ul><li><code>nrm ls</code>：查看全部镜像源(按道理说应该有*来展示目前所用的源，但现在没，原因见下文)</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nrm1673616739921.png" alt="nrm"></p><ul><li><code>nrm current</code>：查看当前源(按道理说应该有目前所用的源，但现在没，原因见下文)</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nvm51673617677730.png" alt="nrm"></p><ul><li><code>nrm use taobao</code>：切换成<code> taobao</code> 镜像源</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nrm21673616980714.png" alt="nrm"></p><ul><li><code>nrm test</code>：测速并查看当前所用源(前面有*)</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nrm31673617213610.png" alt="nrm"></p><ul><li><code>nrm -h</code>：查看帮助</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nrm41673617362687.png" alt="nrm"></p><h2 id="解决nrm-ls命令没有-（星号）的问题"><a href="#解决nrm-ls命令没有-（星号）的问题" class="headerlink" title="解决nrm ls命令没有*（星号）的问题"></a>解决nrm ls命令没有*（星号）的问题</h2><blockquote><p>当在终端里执行<code>nrm ls</code>指令查看我们的镜像源时，我发现列表中并没有星号存在，一般情况下星号表示目前所处的镜像源，但是没有星号我们根本不知道目前在使用哪个镜像源；并且执行<code>nrm current</code>指令也没有反应。（可能是版本的问题）</p></blockquote><ol><li>需要执行一下命令。重装版本一下即可解决，可能下载的时间会有点长请耐心等待即可。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="title class_">Pana</span>/nrm -g</span><br></pre></td></tr></table></figure><ol start="2"><li>验证</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/nrm61673618254488.png" alt="nrm"></p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://blog.csdn.net/QWERTYQ16/article/details/124497532">nvm的简介、安装、使用（简单明了）</a></p><p><a href="https://blog.csdn.net/qq_34996079/article/details/122934045">nvm 切换node报错 exit status 1: �ܾ����ʡ�</a></p><p><a href="https://tzy1997.com/articles/hexo1606/">nvm与npm与nrm</a></p><p><a href="https://blog.csdn.net/qq_36958916/article/details/113653457">nrm详解</a></p><p><a href="https://blog.csdn.net/liuxin_hello/article/details/127801953">nrm - 源间切换</a></p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> nvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载</title>
      <link href="/articles/f7f97ed.html"/>
      <url>/articles/f7f97ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件下载方式"><a href="#文件下载方式" class="headerlink" title="文件下载方式"></a>文件下载方式</h1><blockquote><p>前端涉及到的文件下载还是很多应用场景的，那么前端文件下载有多少种方式呢？每种方式有什么优缺点呢？下面就来一一介绍。</p></blockquote><h2 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h2><h3 id="定义与用法"><a href="#定义与用法" class="headerlink" title="定义与用法"></a>定义与用法</h3><ul><li>首先实现<code>download</code>功能，条件必须满足：所要下载的文件与<code>js</code>或当前页面同源。即<code>window.location.protocol</code>（传输协议）+<code>window.location.host</code>（域名）必须有，且一致；</li><li>如果是本地文件，请启动<strong>本地服务</strong>，使用<code>localhost</code>访问页面；</li><li>通过<code>a</code>标签的<code>download</code>属性来实现文件下载；download为h5中新增的a标签属性；download+href使a标签具备点击下载功能；</li><li><code>download</code>属性也可以设置一个值来规定下载文件的名称；若没有设置拓展名，浏览器将自动检测正确的拓展名(.img，.png、.pdf)；</li></ul><h3 id="兼容性测试及结果"><a href="#兼容性测试及结果" class="headerlink" title="兼容性测试及结果"></a>兼容性测试及结果</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./imgs/cs.jpg&quot;</span>&gt;</span>同源图片，不带download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./imgs/cs.jpg&quot;</span> <span class="attr">download</span>=<span class="string">&quot;cs&quot;</span>&gt;</span>同源图片，带download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.erke.com/images/erker_logo.gif&quot;</span>&gt;</span>网络图片，不带download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.erke.com/images/erker_logo.gif&quot;</span>  <span class="attr">download</span>=<span class="string">&quot;hxek&quot;</span>&gt;</span>网络图片，带download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./cs.zip&quot;</span> &gt;</span>本地zip文件，不带download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;down(&#x27;./videos/cs.zip&#x27;)&quot;</span>&gt;</span>js放置a标签实现（html无法打开的文件格式）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;down(&#x27;./imgs/cs.jpg&#x27;)&quot;</span>&gt;</span>js放置a标签实现（html可以打开的文件格式）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;down(&#x27;https://codeload.github.com/LingerCareer/Just-learn-JS-this/zip/refs/heads/main&#x27;)&quot;</span>&gt;</span>js放置a标签实现（html不能打开的网络文件格式）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;down(&#x27;https://www.erke.com/images/erker_logo.gif&#x27;)&quot;</span>&gt;</span>js放置a标签实现（html可以打开的网络文件格式）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">down</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pc端浏览器兼容性</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/download1675772980006.PNG" alt="download"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>html不支持的文件，无论同源还是不同源，有没有download属性，都会下载。</li><li>html支持的文件，同源且有download属性，除ie外都会下载。</li><li>html支持的文件，不同源，无论有无download属性，都不会下载，浏览器会直接跳转打开。</li></ul><h2 id="Blob对象"><a href="#Blob对象" class="headerlink" title="Blob对象"></a>Blob对象</h2><blockquote><p>场景：后端返回给前端<code>文件流</code>，前端通过<code>Blob</code>下载；文件流格式如下：</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/download1675766421440.png" alt="export"></p><h3 id="Blob对象-1"><a href="#Blob对象-1" class="headerlink" title="Blob对象"></a>Blob对象</h3><p>下面是<code>blob</code>对象的定义，来自<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">MDN</a>：</p><blockquote><p><code>Blob</code>对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <code>ReadableStream</code> 来用于数据操作。</p><p><code>Blob</code>表示的不一定是<code>JavaScript</code>原生格式的数据。<code>File</code> 接口基于 <code>Blob</code>，继承了<code>blob</code>的功能并将其扩展以支持用户系统上的文件。</p></blockquote><p><code>blob</code>对象是<code>html5</code>新增的对象，它的作用是用来存储二进制数据的，比如图片、视频、音频等，它的使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; array 二进制数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; options 配置项</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; options.type 文件类型，它代表了将会被放入到 blob 中的数组内容的 MIME 类型。</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; options.endings 用于指定包含行结束符\n的字符串如何被写入。默认为transparent，表示不会修改行结束符。还可以指定为native，表示会将\n转换为\r\n。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([], &#123; <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p>这里主要关注的是<code>type</code>属性，默认情况下，<code>blob</code>对象是没有<code>type</code>属性的，那么这个<code>Blob</code>就是一个无类型的<code>Blob</code>，文件不会损毁，但是无法被正常识别。</p><h3 id="URL-createObjectURL"><a href="#URL-createObjectURL" class="headerlink" title="URL.createObjectURL"></a>URL.createObjectURL</h3><p>下面是<code>blob</code>对象的定义，来自<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">MDN</a>：</p><blockquote><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。</p></blockquote><p>这个方法是用来创建一个<code>url</code>的，它的作用是把一个<code>blob</code>对象转换成一个<code>url</code>，这个<code>url</code>可以用来下载文件，也可以用来预览文件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br></pre></td></tr></table></figure><p>这里需要注意的是，这个<code>url</code>的生命周期和创建它的窗口中的<code>document</code>绑定，也就是说，当我们的<code>document</code>被销毁后，这个<code>url</code>就会失效，会自动释放它们，但是为了获得最佳性能和内存使用状况，我们应该在安全的时机主动释放掉它们，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url)</span><br></pre></td></tr></table></figure><h3 id="下载文件流"><a href="#下载文件流" class="headerlink" title="下载文件流"></a>下载文件流</h3><h4 id="指定返回数据格式"><a href="#指定返回数据格式" class="headerlink" title="指定返回数据格式"></a>指定返回数据格式</h4><blockquote><p>首先指定返回数据格式为blob：<code>responseType: &#39;blob&#39;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出报表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMeetRoomExport</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`xxxxxx`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">responseType</span>:<span class="string">&quot;blob&quot;</span>,  <span class="comment">//一定要加这个,不然下载的文件打不开</span></span><br><span class="line">        data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应头headers获取文件信息"><a href="#响应头headers获取文件信息" class="headerlink" title="响应头headers获取文件信息"></a>响应头<code>headers</code>获取文件信息</h4><blockquote><p>在响应数据<code>response.headers[&quot;content-disposition&quot;]</code>中获取文件信息；包含<strong>文件名</strong>和<strong>文件类型</strong>；如下图所示：</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/download21675767199385.png" alt="download"></p><p>可以在响应拦截器里面做数据处理：</p><ul><li>中文转码了，转回去；</li><li>将文件信息存到缓存，调用下载接口的时候获取文件信息；(给a标签的download设置文件名)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收到响应数据并成功后的一些共有的处理</span></span><br><span class="line"><span class="keyword">if</span> (response.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>]) &#123;</span><br><span class="line">    <span class="keyword">const</span> temFileName =</span><br><span class="line">    response.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>].<span class="title function_">split</span>(<span class="string">&quot;filename=&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> intoName = <span class="title function_">revertUTF8</span>(temFileName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>]); <span class="comment">//decodeURI、decodeURIComponent都可以解决转码;</span></span><br><span class="line">    <span class="keyword">const</span> fileName = intoName + <span class="string">&quot;-&quot;</span> + temFileName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;fileName&quot;</span>, fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用下载接口"><a href="#调用下载接口" class="headerlink" title="调用下载接口"></a>调用下载接口</h4><ul><li>我们可以打印一下res，是一个Blob对象；(如果接口没有设置responseType: ‘blob’，这里是后端返回的文件流)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMeetRoomExport(this.exportParams).then((res) =&gt; &#123;</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/download31675768232608.png" alt="download"></p><ul><li>接口请求</li></ul><blockquote><p>这里和后端商量是<code>docx</code>类型的文件，所以<code>type</code>值如下所示，其他类型的<code>type</code>值设置可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">MDN</a>；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getMeetRoomExport</span>(<span class="variable language_">this</span>.<span class="property">exportParams</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(res);</span></span><br><span class="line">  <span class="keyword">if</span> (res) &#123;</span><br><span class="line">      <span class="comment">//这里和后端商量是docx类型的文件,所以type值如下:</span></span><br><span class="line">    <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document;charset=UTF-8&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 创建a标签</span></span><br><span class="line">    link.<span class="property">href</span> = url;</span><br><span class="line">    link.<span class="property">download</span> = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;fileName&quot;</span>); <span class="comment">// 重命名文件</span></span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url); <span class="comment">// 释放内存</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此，文件就会下载成功；</p><h3 id="下载拓展"><a href="#下载拓展" class="headerlink" title="下载拓展"></a>下载拓展</h3><blockquote><p>回到我们刚才下载的问题，我们是通过<code>blob</code>对象来解决，但是我们的<code>type</code>属性是写死的，如果在文件类型是确定的情况下是没问题的，但是如果这个接口就是下载文件的接口，文件可能是各种类型的，我们应该怎么处理？</p></blockquote><ul><li>和接口提供者进行协商，确定下载的文件的格式，然后前端将<code>type</code>写死；</li><li>通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">枚举</a>和响应头<code>response.headers[&quot;content-disposition&quot;]</code>来实现；</li></ul><h4 id="枚举方式"><a href="#枚举方式" class="headerlink" title="枚举方式"></a>枚举方式</h4><ol><li>新建config 写入blobType的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> blobType = &#123;</span><br><span class="line">  <span class="attr">xls</span>: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>,</span><br><span class="line">  <span class="attr">xlsx</span>: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>,</span><br><span class="line">  <span class="attr">csv</span>: <span class="string">&#x27;text/csv&#x27;</span>,</span><br><span class="line">  <span class="attr">doc</span>: <span class="string">&#x27;application/msword&#x27;</span>,</span><br><span class="line">  <span class="attr">docx</span>: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#x27;</span>,</span><br><span class="line">  <span class="attr">pdf</span>: <span class="string">&#x27;application/pdf&#x27;</span>,</span><br><span class="line">  <span class="attr">ppt</span>: <span class="string">&#x27;application/vnd.ms-powerpoint&#x27;</span>,</span><br><span class="line">  <span class="attr">pptx</span>: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.presentationml.presentation&#x27;</span>,</span><br><span class="line">  <span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line">  <span class="attr">jpeg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">aac</span>: <span class="string">&#x27;audio/aac&#x27;</span>,</span><br><span class="line">  <span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">  <span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">  <span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">  <span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  <span class="attr">abw</span>: <span class="string">&#x27;application/x-abiword&#x27;</span>,</span><br><span class="line">  <span class="attr">arc</span>: <span class="string">&#x27;application/x-freearc&#x27;</span>,</span><br><span class="line">  <span class="attr">avi</span>: <span class="string">&#x27;video/x-msvideo&#x27;</span>,</span><br><span class="line">  <span class="attr">azw</span>: <span class="string">&#x27;application/vnd.amazon.ebook&#x27;</span>,</span><br><span class="line">  <span class="attr">bin</span>: <span class="string">&#x27;application/octet-stream&#x27;</span>,</span><br><span class="line">  <span class="attr">bmp</span>: <span class="string">&#x27;image/bmp&#x27;</span>,</span><br><span class="line">  <span class="attr">bz</span>: <span class="string">&#x27;application/x-bzip&#x27;</span>,</span><br><span class="line">  <span class="attr">bz2</span>: <span class="string">&#x27;application/x-bzip2&#x27;</span>,</span><br><span class="line">  <span class="attr">csh</span>: <span class="string">&#x27;application/x-csh&#x27;</span>,</span><br><span class="line">  <span class="attr">eot</span>: <span class="string">&#x27;application/vnd.ms-fontobject&#x27;</span>,</span><br><span class="line">  <span class="attr">epub</span>: <span class="string">&#x27;application/epub+zip&#x27;</span>,</span><br><span class="line">  <span class="attr">htm</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">  <span class="attr">ico</span>: <span class="string">&#x27;image/vnd.microsoft.icon&#x27;</span>,</span><br><span class="line">  <span class="attr">ics</span>: <span class="string">&#x27;text/calendar&#x27;</span>,</span><br><span class="line">  <span class="attr">jar</span>: <span class="string">&#x27;application/java-archive&#x27;</span>,</span><br><span class="line">  <span class="attr">jsonld</span>: <span class="string">&#x27;application/ld+json&#x27;</span>,</span><br><span class="line">  <span class="attr">mid</span>: <span class="string">&#x27;audio/midi audio/x-midi&#x27;</span>,</span><br><span class="line">  <span class="attr">midi</span>: <span class="string">&#x27;audio/midi audio/x-midi&#x27;</span>,</span><br><span class="line">  <span class="attr">mjs</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">  <span class="attr">mpeg</span>: <span class="string">&#x27;video/mpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">mpkg</span>: <span class="string">&#x27;application/vnd.apple.installer+xml&#x27;</span>,</span><br><span class="line">  <span class="attr">odp</span>: <span class="string">&#x27;application/vnd.oasis.opendocument.presentation&#x27;</span>,</span><br><span class="line">  <span class="attr">ods</span>: <span class="string">&#x27;application/vnd.oasis.opendocument.spreadsheet&#x27;</span>,</span><br><span class="line">  <span class="attr">odt</span>: <span class="string">&#x27;application/vnd.oasis.opendocument.text&#x27;</span>,</span><br><span class="line">  <span class="attr">oga</span>: <span class="string">&#x27;audio/ogg&#x27;</span>,</span><br><span class="line">  <span class="attr">ogv</span>: <span class="string">&#x27;video/ogg&#x27;</span>,</span><br><span class="line">  <span class="attr">ogx</span>: <span class="string">&#x27;application/ogg&#x27;</span>,</span><br><span class="line">  <span class="attr">otf</span>: <span class="string">&#x27;font/otf&#x27;</span>,</span><br><span class="line">  <span class="attr">rar</span>: <span class="string">&#x27;application/x-rar-compressed&#x27;</span>,</span><br><span class="line">  <span class="attr">rtf</span>: <span class="string">&#x27;application/rtf&#x27;</span>,</span><br><span class="line">  <span class="attr">sh</span>: <span class="string">&#x27;application/x-sh&#x27;</span>,</span><br><span class="line">  <span class="attr">svg</span>: <span class="string">&#x27;image/svg+xml&#x27;</span>,</span><br><span class="line">  <span class="attr">swf</span>: <span class="string">&#x27;application/x-shockwave-flash&#x27;</span>,</span><br><span class="line">  <span class="attr">tar</span>: <span class="string">&#x27;application/x-tar&#x27;</span>,</span><br><span class="line">  <span class="attr">tif</span>: <span class="string">&#x27;image/tiff&#x27;</span>,</span><br><span class="line">  <span class="attr">tiff</span>: <span class="string">&#x27;image/tiff&#x27;</span>,</span><br><span class="line">  <span class="attr">ttf</span>: <span class="string">&#x27;font/ttf&#x27;</span>,</span><br><span class="line">  <span class="attr">txt</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">  <span class="attr">vsd</span>: <span class="string">&#x27;application/vnd.visio&#x27;</span>,</span><br><span class="line">  <span class="attr">wav</span>: <span class="string">&#x27;audio/wav&#x27;</span>,</span><br><span class="line">  <span class="attr">weba</span>: <span class="string">&#x27;audio/webm&#x27;</span>,</span><br><span class="line">  <span class="attr">webm</span>: <span class="string">&#x27;video/webm&#x27;</span>,</span><br><span class="line">  <span class="attr">webp</span>: <span class="string">&#x27;image/webp&#x27;</span>,</span><br><span class="line">  <span class="attr">woff</span>: <span class="string">&#x27;font/woff&#x27;</span>,</span><br><span class="line">  <span class="attr">woff2</span>: <span class="string">&#x27;font/woff2&#x27;</span>,</span><br><span class="line">  <span class="attr">xhtml</span>: <span class="string">&#x27;application/xhtml+xml&#x27;</span>,</span><br><span class="line">  <span class="attr">xml</span>: <span class="string">&#x27;text/xml&#x27;</span>,</span><br><span class="line">  <span class="attr">xul</span>: <span class="string">&#x27;application/vnd.mozilla.xul+xml&#x27;</span>,</span><br><span class="line">  <span class="attr">zip</span>: <span class="string">&#x27;application/zip&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>引入，通过缓存中的文件名后缀确定type值；大致思路如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入枚举</span></span><br><span class="line"><span class="keyword">import</span> &#123; blobType &#125; <span class="keyword">from</span> <span class="string">&#x27;@/config/global&#x27;</span>; </span><br><span class="line"><span class="comment">// 2.获取文件拓展名</span></span><br><span class="line"><span class="keyword">let</span> extName = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;fileName&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// console.log(extName); // docx</span></span><br><span class="line"><span class="comment">// 3.设置type值</span></span><br><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">`<span class="subst">$&#123;blobType[file_type]&#125;</span>;charset=UTF-8`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Blob拓展"><a href="#Blob拓展" class="headerlink" title="Blob拓展"></a>Blob拓展</h3><blockquote><p>不仅是后端传来的文件流可以下载，字符串、对象、数组等任意类型都可以下载；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载txt格式的文件;</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;使用Blob对象下载文件&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([str], &#123; <span class="attr">type</span>: <span class="string">&quot;text/plain&quot;</span> &#125;)</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(blob); // 和文件流一样,是个Blob对象</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&quot;fsl&quot;</span>;</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现象：点击按钮，下载名为 <code>fsl.txt</code>文件,内容为 “使用Blob对象下载文件”；</p><h3 id="URL-createObjectURL拓展"><a href="#URL-createObjectURL拓展" class="headerlink" title="URL.createObjectURL拓展"></a>URL.createObjectURL拓展</h3><blockquote><p>使用URL.createObjectURL实现图片本地预览</p></blockquote><p>这个方法是用来创建一个<code>url</code>的，它的作用是把一个<code>blob</code>对象转换成一个<code>url</code>，这个<code>url</code>可以用来下载文件，也可以用来预览文件；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传图片</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> submit = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    img.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    submit.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/u012881483/article/details/120042474">关于标签a的download属性兼容性总结</a></p><p><a href="https://www.cnblogs.com/ychizzz/p/13858427.html">利用Blob实现前端导出Excel,Doc等文件</a></p><p><a href="https://blog.csdn.net/Edwiin_9/article/details/125843637">js根据文件后缀动态获取blob的type,并将流文件转blob</a></p><p><a href="https://blog.csdn.net/ShinyRuo_/article/details/122165573">下载出来文件内容为空的解决方法</a></p><p><a href="https://blog.csdn.net/weixin_42912237/article/details/122063752?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-122063752-blog-122165573.pc_relevant_aa2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-122063752-blog-122165573.pc_relevant_aa2&utm_relevant_index=10">前端解析后端文件流并下载</a></p><p><a href="https://blog.csdn.net/Rainy_X/article/details/112610150?spm=1001.2014.3001.5502">js实现前端下载文件</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Blob </category>
          
          <category> 文件下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Blob </tag>
            
            <tag> 文件下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON.stringify 深拷贝弊端</title>
      <link href="/articles/f6275dee.html"/>
      <url>/articles/f6275dee.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSON-stringify-深拷贝的弊端"><a href="#JSON-stringify-深拷贝的弊端" class="headerlink" title="JSON.stringify 深拷贝的弊端"></a>JSON.stringify 深拷贝的弊端</h1><h2 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h2><blockquote><p>如果 obj 里面有时间对象，则 JSON.stringify 后再 JSON.parse 的结果，时间将转为<strong>字符串</strong>的形式，而不是<strong>对象</strong>的形式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:[<span class="keyword">new</span> <span class="title class_">Date</span>(),<span class="keyword">new</span> <span class="title class_">Date</span>()]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675493820079.png" alt="stringify"></p><h2 id="RegExp-、Error"><a href="#RegExp-、Error" class="headerlink" title="RegExp 、Error"></a>RegExp 、Error</h2><blockquote><p>如果 obj 里有 RegExp (正则表达式的缩写)、Error 对象，则序列化的结果将只得到空对象；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="regexp">/aabb[a-z]\d/</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;typeError&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675493731487.png" alt="stringfy"></p><h2 id="function、undefined、Symbol"><a href="#function、undefined、Symbol" class="headerlink" title="function、undefined、Symbol"></a>function、undefined、Symbol</h2><blockquote><p>如果 obj 里有函数（function），undefined，Symbol 则序列化的结果会把 function 、 undefined 、Symbol 丢失；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">let</span> a = <span class="number">123</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(a)&#125;,</span><br><span class="line">    <span class="attr">c</span>:<span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span>:<span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675493621131.png" alt="stringfy"></p><blockquote><p>如果 Array里有函数（function），undefined，Symbol 则序列化的结果会把 function 、 undefined 、Symbol 转为null；(占位用)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>: [<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">let</span> a = <span class="number">123</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(a) &#125;, <span class="literal">undefined</span>, <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675493491371.png" alt="stringfy"></p><h2 id="NaN、Infinity-、-Infinity"><a href="#NaN、Infinity-、-Infinity" class="headerlink" title="NaN、Infinity 、-Infinity"></a>NaN、Infinity 、-Infinity</h2><blockquote><p>如果obj里有 NaN、Infinity 和 -Infinity，则序列化的结果会变成 null</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="title class_">NaN</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="title class_">Infinity</span>,</span><br><span class="line">    <span class="attr">d</span>:-<span class="title class_">Infinity</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675493981952.png" alt="stringfy"></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>构造函数</li></ul><blockquote><p>JSON.stringify() 只能序列化对象的可枚举的自有属性，例如如果 obj 中的对象是有构造函数生成的， 则使用 JSON.parse(JSON.stringify(obj)) 深拷贝后，会丢弃对象的 constructor；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675494072860.png" alt="stringfy"></p><ul><li>通过<code>Object.defineProperty</code>手动设置某属性不可枚举：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">234</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1675494167827.png" alt="stringfy"></p><h1 id="弊端总结"><a href="#弊端总结" class="headerlink" title="弊端总结"></a>弊端总结</h1><blockquote><p>用法简单，然而使用这种方法会有一些隐藏的坑：因为在序列化 JavaScript 对象时，所有函数和原型成员会被有意忽略；</p><p>通俗点说，JSON.parse(JSON.stringfy(X))，其中 X 只能是 Number, String, Boolean, Array,扁平对象，即那些能够被 JSON 直接表示的数据结构。</p></blockquote><ul><li>Date 对象变为字符串</li><li>RegExp、Error 对象变为空对象 {}</li><li>函数、undefined、Symbol 属性<ul><li>作为对象value：丢失</li><li>作为Array的value：为null</li></ul></li><li>NaN、Infinity、-Infinity 变为 null</li><li>enumerable 为 false 的属性丢失</li></ul><h1 id="JSON-stringify-常用方式"><a href="#JSON-stringify-常用方式" class="headerlink" title="JSON.stringify() 常用方式"></a>JSON.stringify() 常用方式</h1><h2 id="判断是否相等"><a href="#判断是否相等" class="headerlink" title="判断是否相等"></a>判断是否相等</h2><blockquote><p>判断数组是否包含某对象，或者判断对象是否相等</p></blockquote><ul><li>是否相等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">456</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">456</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) === <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>是否包含</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">2</span>,<span class="attr">b</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">2</span>,<span class="attr">b</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr).<span class="title function_">includes</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul><li>让 localStorage &#x2F; sessionStorage 可以存储对象。</li></ul><blockquote><p>localStorage&#x2F;sessionStorage 默认只能存储字符串，而实际开发中，我们往往需要存储的数据多为对象类型，那么这里我们就可以在存储时利用 Json.stringify() 将对象转为字符串,取出时利用 JSON.parse() 将字符串转为对象即可。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;user&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;aaa&#x27;</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>)));<span class="comment">//&#123;name: &quot;aaa&quot;, age: 16&#125;</span></span><br></pre></td></tr></table></figure><p>JSON.stringify()与toString()这两者虽然都可以将目标值转为字符串，但本质上还是有区别的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr),arr.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">//[12,12,12] 12,12,12</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/MFWSCQ/article/details/112977766">利用 JSON.stringify 深拷贝的弊端</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> JSON.stringify 深拷贝弊端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/articles/e98504f5.html"/>
      <url>/articles/e98504f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="对象的引用赋值"><a href="#对象的引用赋值" class="headerlink" title="对象的引用赋值"></a>对象的引用赋值</h2><blockquote><p>js中一旦遇到引用数据类型，就会开辟一块堆内存，将引用数据类型的值进行储存，并给这块堆内存分配一个16进制地址。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;<span class="attr">name</span>:<span class="string">&quot;forward&quot;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = info;</span><br><span class="line">obj.<span class="property">age</span>=<span class="number">23</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">age</span>);<span class="comment">//23</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656848745916kbb.png" alt="引用赋值"></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul><li>浅拷贝：将第一层的数据数据完全拷贝过来，如果有引用类型，引用类型指向的是一个16进制地址，也会拷贝过来(即：拷贝的引用类型和原数据指向同一个内存地址)</li><li>(对象)如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址</li><li>(数组)如果数组元素(arr[index])是基本类型，就会拷贝一份，互不影响，而如果是对象或者数组，就会只拷贝对象和数组的引用，这样我们无论在新旧数组进行了修改，两者都会发生变化</li><li>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</li><li>常见的浅拷贝：<ul><li>Object.assign()</li><li>concat()</li><li>slice() 返回一个新的数组对象；原始数组不会被改变。</li><li>…拓展运算符</li><li>Lodash库 <code>_.clone(value)</code></li></ul></li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.assign()对象的浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;forward&quot;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;;</span><br><span class="line"><span class="comment">//把info对象中的所有属性拷贝一份,放到第一个对象&#123;&#125;里面;若第一个对象&#123;&#125;有相同的属性,则会被后面的替换掉;</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,info);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//&#123;name: &#x27;forward&#x27;, age: 24&#125;</span></span><br><span class="line">obj.<span class="property">age</span>=<span class="number">23</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">age</span>);<span class="comment">//24</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846204916qkb.png" alt="对象浅拷贝"></p><blockquote><p>将上述代码进行简单修改，加一个对象参数；这个对象参数会开辟一块堆内存(16进制地址)；浅拷贝会将第一层的数据数据完全拷贝过来，引用类型指向的是一个16进制地址，也会拷贝过来(即：拷贝的引用类型指向同一个内存地址)；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.assign()对象的浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;forward&quot;</span>, <span class="attr">age</span>: <span class="number">24</span>,<span class="attr">friend</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;zhouxiaorui&quot;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,info);</span><br><span class="line">obj.<span class="property">friend</span>.<span class="property">name</span>=<span class="string">&quot;baobao&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">friend</span>.<span class="property">name</span>);<span class="comment">//baobao</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846253915qkb2.png" alt="浅拷贝"></p><h3 id="Lodash-JS库"><a href="#Lodash-JS库" class="headerlink" title="Lodash  JS库"></a>Lodash  JS库</h3><blockquote><p>Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库；用<code>_.clone(xxx)</code>实现浅拷贝；详见：<a href="https://www.lodashjs.com/">Lodash 中文文档</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objects = [&#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> shallow = _.<span class="title function_">clone</span>(objects);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shallow[<span class="number">0</span>] === objects[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="数组的浅拷贝"><a href="#数组的浅拷贝" class="headerlink" title="数组的浅拷贝"></a>数组的浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;old&#x27;</span>, <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">concat</span>();<span class="comment">//concat()</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">slice</span>();<span class="comment">//slice()</span></span><br><span class="line"><span class="keyword">const</span> arr4 = [...arr];<span class="comment">//...拓展运算符</span></span><br><span class="line">arr2[<span class="number">0</span>]=<span class="string">&quot;new&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><ul><li>深拷贝是指完全生成了一个新的对象，里面所有的东西都是新的，即使嵌套了对象，两者也相互分离，修改一个对象的属性，也不会影响另一个。</li></ul><h3 id="JSON-parse-JSON-string-xxx"><a href="#JSON-parse-JSON-string-xxx" class="headerlink" title="JSON.parse(JSON.string(xxx))"></a>JSON.parse(JSON.string(xxx))</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;forward&quot;</span>, <span class="attr">age</span>: <span class="number">24</span>,<span class="attr">friend</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;zhouxiaorui&quot;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(info))</span><br><span class="line">obj.<span class="property">friend</span>.<span class="property">name</span>=<span class="string">&quot;baobao&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">friend</span>.<span class="property">name</span>);<span class="comment">//zhouxiaorui</span></span><br></pre></td></tr></table></figure><blockquote><p>此方法缺点：JSON.stringify(..) 在对象中遇到 undefined 、 function 和 symbol 时会自动将其忽略， 在 数组中则会返回 null （以保证单元位置不变）。详见：<a href="https://fsllala.eu.org/articles/f6275dee.html">JSON.stringify 深拷贝的弊端</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">undefined</span>));<span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;));<span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>( [<span class="number">1</span>,<span class="literal">undefined</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="number">4</span>]));<span class="comment">//[1,null,null,4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="literal">undefined</span>,<span class="attr">a</span>:<span class="number">2</span>, <span class="attr">b</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;));<span class="comment">//&#123;&quot;a&quot;:2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Lodash-JS库-1"><a href="#Lodash-JS库-1" class="headerlink" title="Lodash  JS库"></a>Lodash  JS库</h3><blockquote><p>Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库；用<code>_.cloneDeep(xxx)</code>实现深拷贝；详见：<a href="https://www.lodashjs.com/">Lodash 中文文档</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objects = [&#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span> &#125;];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> deep = _.<span class="title function_">cloneDeep</span>(objects);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deep[<span class="number">0</span>] === objects[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="浅拷贝-递归"><a href="#浅拷贝-递归" class="headerlink" title="浅拷贝+递归"></a>浅拷贝+递归</h3><blockquote><p>见下文手写浅(深)拷贝</p></blockquote><h3 id="structuredClone"><a href="#structuredClone" class="headerlink" title="structuredClone()"></a>structuredClone()</h3><blockquote><p>在 JS 中深拷贝一个对象，我们一般会使用 lodash 的 deepClone 等方法。现在一个新的原生函数可以完美胜任这个任务：<br>structuredClone()；这个函数几乎完美适配所有类型，甚至包括： Error，Date，Blob 等等。更棒的是而且现在主流的浏览器都兼容这个函数；</p></blockquote><ul><li>在哪里可以使用structuredClone()？<ul><li><a href="https://chromestatus.com/feature/5630001077551104">Chrome 98</a></li><li><a href="https://developer.apple.com/safari/technology-preview/release-notes/">Safari 137 (Technology Preview Release)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#browser_compatibility">Firefox 94</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#browser_compatibility">Node.js 17.0</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#browser_compatibility">Deno 1.14</a></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">bar</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;NEW API&quot;</span>, <span class="string">&quot;DeepClone&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">structuredClone</span>(obj);</span><br><span class="line">obj.<span class="property">bar</span>.<span class="title function_">push</span>(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">obj2.<span class="property">bar</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">bar</span>);  <span class="comment">//  [&#x27;ES6&#x27;, &#x27;NEW API&#x27;, &#x27;DeepClone&#x27;, &#x27;add&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">bar</span>); <span class="comment">//  [&#x27;ES6&#x27;, &#x27;NEW API&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="手写浅-深-拷贝"><a href="#手写浅-深-拷贝" class="headerlink" title="手写浅(深)拷贝"></a>手写浅(深)拷贝</h2><blockquote><p> object.hasOwnProperty(propertyName)</p></blockquote><ul><li>用来检测属性是否为对象的私有属性，如果是，返回true，否则返回false； 参数propertyName指要检测的属性名；</li><li>所以说不会检测原型链上的公有属性；</li><li>说简单点，它能帮你指向你当前循环的对象，而过滤掉原型链上其它对象，因为在工作中我们很难保证其他人是否会修改原型链，这样做会更为保险；</li><li><strong><code>hasOwnProperty()</code></strong> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性(处理对象属性而不遍历原型链)；</li><li><strong><code>Object.hasOwn()</code><strong>如果指定的对象<em>自身</em>有指定的属性，则静态方法 <strong><code>Object.hasOwn()</code></strong> 返回 <code>true</code>。如果属性是继承的或者不存在，该方法返回 <code>false</code>；</strong>备注：</strong> <code>Object.hasOwn()</code> 旨在取代 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"><code>Object.hasOwnProperty()</code></a>。</li></ul><blockquote><p>object.hasOwnProperty(propertyName)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;&#125;;</span><br><span class="line">object1.<span class="property">property1</span> = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;property1&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;hasOwnProperty&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Object.hasOwn()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(object1, <span class="string">&#x27;prop&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(object1, <span class="string">&#x27;toString&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(object1, <span class="string">&#x27;undeclaredPropertyValue&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: false</span></span><br></pre></td></tr></table></figure><h3 id="浅拷贝-1"><a href="#浅拷贝-1" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>遍历对象，然后把属性和属性值都放在一个新的对象不就好了~</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shallowCopy = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 只拷贝对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 根据obj的类型判断是新建一个数组还是对象</span></span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 遍历obj，并且判断是obj的属性才拷贝</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            newObj[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝-1"><a href="#深拷贝-1" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>那如何实现一个深拷贝呢？说起来也好简单，我们在拷贝的时候判断一下属性值的类型，如果是对象，我们递归调用深拷贝函数不就好了~</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepCopy = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">deepCopy</span>(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th align="center"></th><th align="center"><strong>和原数据是否指向同一对象</strong></th><th align="center"><strong>第一层数据为基本数据类型</strong></th><th align="center"><strong>原数据中包含子对象</strong></th></tr></thead><tbody><tr><td align="center">赋值</td><td align="center">是</td><td align="center">改变会使原数据一同改变</td><td align="center">改变会使原数据一同改变</td></tr><tr><td align="center">浅拷贝</td><td align="center">否</td><td align="center">改变<strong>不</strong>会使原数据一同改变</td><td align="center">改变会使原数据一同改变</td></tr><tr><td align="center">深拷贝</td><td align="center">否</td><td align="center">改变<strong>不</strong>会使原数据一同改变</td><td align="center">改变<strong>不</strong>会使原数据一同改变</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/songjungang/article/details/125373543">JS中对象深拷贝：structuredClone()</a></p><p><a href="https://www.jianshu.com/p/f9ec860ecd81">Object.assign()的使用</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/32">JavaScript专题之深浅拷贝</a></p><p><a href="https://segmentfault.com/a/1190000017776457">详细解析赋值、浅拷贝和深拷贝的区别</a></p><p><a href="https://blog.csdn.net/a791226606/article/details/110679991">hasOwnProperty() 方法详解</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 深浅拷贝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈内存和堆内存</title>
      <link href="/articles/6e473482.html"/>
      <url>/articles/6e473482.html</url>
      
        <content type="html"><![CDATA[<h2 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h2><blockquote><p>我们知道程序是需要加载到内存中来执行的，我们可以将内存划分为两个区域：<strong>栈内存和堆内存</strong>。</p></blockquote><ul><li><strong>原始类型</strong>占据的空间是在<strong>栈内存</strong>中分配的；</li><li><strong>对象类型</strong>占据的空间是在<strong>堆内存</strong>中分配的；</li></ul><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><ul><li>原始类型的保存方式：在变量中保存的是值本身；所有原始类型也被称之为值类型；</li><li>对象类型的保存方式：在变量中保存的是对象的引用；所以对象类型也被称之为引用类型；</li></ul><blockquote><ol><li><p>JS代码是单线程的，代码从上到下执行，栈内存是先入后出的，所以上面的代码在栈的底部；</p></li><li><p>基本数据类型直接在栈内存中分配内存，变量保存的是值本身；</p></li><li><p>引用数据类型在堆内存中分配内存，并生成16进制地址，栈中的变量保存的是16进制地址，即对象的引用地址；</p></li><li><p>赋值操作是在栈中完成的：<code>const nickName=name;</code>将栈内存中name的值赋值给nickName，即<code>nickName=&quot;fsllala&quot;</code>;</p><p><code>const info = obj;</code>将栈内存中obj的内存地址赋值给info，即<code>info=0x100;</code></p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nickName = name;</span><br><span class="line"><span class="keyword">const</span> info = obj;</span><br><span class="line">info.<span class="property">foo</span> = <span class="string">&quot;hahaha&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">foo</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1672153266310stack.png" alt="stack"></p><h3 id="变量的比较"><a href="#变量的比较" class="headerlink" title="变量的比较"></a>变量的比较</h3><blockquote><p>基本数据类型比较的是值；引用数据类型比较的是地址；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> n = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m === n); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1672153284493heap.png" alt="heap"></p><h3 id="引用的赋值"><a href="#引用的赋值" class="headerlink" title="引用的赋值"></a>引用的赋值</h3><blockquote><p>info是个对象，在栈内存中保存的是一个指针，在堆内存中保存的是代码；<code>info.friend</code>又是一个对象，保存一个指针，在堆内存中开辟新的内存来保存<code>info.friend</code>中的代码；所以<code>info.friend</code>为一个指针，赋值给了friend；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;kobe&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> friend =info.<span class="property">friend</span>;</span><br><span class="line">friend.<span class="property">name</span>=<span class="string">&quot;fsllala&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">friend</span>); <span class="comment">//fsllala</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1672154427505fuzhi.png" alt="fuzhi"></p><h3 id="值传递和引用传递的区别"><a href="#值传递和引用传递的区别" class="headerlink" title="值传递和引用传递的区别"></a>值传递和引用传递的区别</h3><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><blockquote><p>在栈内存中进行赋值，<code>const num = 100</code>基本数据类型，直接赋值；<code>foo(num)</code>其实是<code>foo(100)</code>；即<code>a=100</code>;然后又<code>a=200</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">foo</span>(num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//100</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1672155794600zhi.png" alt="fuzhi"></p><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><blockquote><p>在栈内存中进行赋值，引用数据类型赋值的是指针，在堆内存中保存代码；<code>foo(obj)</code>其实是<code>foo(指针)</code>，即<code>a=指针</code>，紧接着，<code>a=&#123;name:&quot;why&quot;&#125;</code>，在堆内存中保存其代码，分配一个新的指针给a，即<code>a=指针2</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;why&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);  <span class="comment">//&#123;name:&quot;obj&quot;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1672156492006OBJ.png" alt="obj"></p><blockquote><p>同上面相比，上面是新开辟了一个堆内存，这个是通过指针对堆地址的代码进行了修改；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&quot;why&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;obj&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">//why</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1672157849228obj.png" alt="obj"></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 栈内存和堆内存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈内存和堆内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/articles/58add7e9.html"/>
      <url>/articles/58add7e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><ul><li><p>由于浏览器的同源策略限制，当一个请求<code>url</code>的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面<code>url</code>不同时，需要跨域才能成功访问；</p></li><li><p>同源策略是<strong>浏览器的行为</strong>，是浏览器最核心也最基本的<strong>安全功能</strong>；</p></li></ul><h2 id="前端解决跨域方法"><a href="#前端解决跨域方法" class="headerlink" title="前端解决跨域方法"></a>前端解决跨域方法</h2><blockquote><p>其实跨域问题都是找后端解决的；</p></blockquote><h3 id="误区：前端通过jsonp解决跨域"><a href="#误区：前端通过jsonp解决跨域" class="headerlink" title="误区：前端通过jsonp解决跨域"></a>误区：前端通过jsonp解决跨域</h3><h4 id="原生写法"><a href="#原生写法" class="headerlink" title="原生写法"></a>原生写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个script标签</span><br><span class="line"><span class="keyword">var</span> os=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>)</span><br><span class="line"><span class="number">2.</span>给script一个src,src就是地址</span><br><span class="line">os.<span class="property">src</span>=<span class="string">&quot;http://suggestion.baidu.com/su?cb=qwer&amp;wd=123&quot;</span></span><br><span class="line"><span class="number">3.</span>将script插入到页面</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(os)</span><br><span class="line"><span class="number">4.</span>回调函数处理数据</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">qwer</span>(<span class="params">d</span>)&#123;</span><br><span class="line">    <span class="comment">//d就是后端返回的数据</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://suggestion.baidu.com/su?&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">wd</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">jsonp</span>:<span class="string">&quot;cb&quot;</span>,<span class="comment">// 回调参数key</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>:<span class="string">&quot;test&quot;</span>,<span class="comment">// 回调函数value</span></span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846360917ky.png" alt="jsonp"></p><h4 id="jsonp实现原理"><a href="#jsonp实现原理" class="headerlink" title="jsonp实现原理"></a>jsonp实现原理</h4><ul><li><p>动态生成script标签，通过src属性来加载；</p></li><li><p>默认使用<code>Jsonp</code>进行跨域时，请求的url地址后面会自动带上一个<code>callback=xxx</code>传给后端，后端需要对返回给前端的<code>json</code>数据做处理，此处的<code>callback</code>可通过<code>jsonp</code>来自定义，<code>xxx</code>可通过<code>jsonpCallback</code>来自定义；</p></li><li><p><code>jsonp</code>: 回调函数的参数，是与后端约定好的参数，必须与后端保持一致。不另外定义<code>jsonp</code>的话，一般默认为<code>jsonp:&#39;callback&#39;</code></p></li><li><p><code>jsonpCallback</code>: 回调函数名，用来包裹住<code>json</code>数据，不另外定义的话，这个参数的值往往是随机生成的。</p></li><li><p>按照上面百度搜索的<code>jsonp</code>来举例子：<code>http://suggestion.baidu.com/su?cb=test</code>；其中<code>?cb=test</code>中的<code>cb</code>为<code>key</code>，<code>test</code>为<code>value</code>；</p></li><li><p>前端会传递一个callback参数（key）给后端，接着后端返回数据时会将这个callback参数的值（value）作为函数名来包裹住json数据，最终返给前端的就是一段js代码了；</p></li><li><p>客户端需要将函数名称传递到服务器 可以如下实现：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;客户端的函数调用了&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3000/test?callback=fn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端</span></span><br><span class="line"><span class="comment">//路由配置</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/test&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fnName = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">  <span class="keyword">var</span> result = fnName + <span class="string">&#x27;(&#123;name:&quot;zhangsan&quot;&#125;)&#x27;</span>;</span><br><span class="line">  res.<span class="title function_">send</span>(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>jsonp方法的实现是需要前端和后端配合的；</li><li>jsonp只支持get请求，不支持post请求；</li><li>jsonp有安全性问题：jsonp劫持，jsonp劫持属于CSRF漏洞；</li></ol><h3 id="前端通过代理解决跨域"><a href="#前端通过代理解决跨域" class="headerlink" title="前端通过代理解决跨域"></a>前端通过代理解决跨域</h3><blockquote><p>反向代理有很多，可以用nodejs，可以用nginx，这里只介绍nginx</p></blockquote><h4 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h4><blockquote><p>由于同源策略是浏览器导致的；所以可以找一个<strong>中间代理服务器</strong>；使用这个中间代理服务器去请求后端的地址；因为服务和服务之间是不存在同源策略的，所以中间代理服务器可以请求到后端接口数据；最后前端请求中间代理服务器；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用命令</span></span><br><span class="line">start nginx 开启</span><br><span class="line">nginx -s stop 停止</span><br><span class="line">nginx -s reload 重新加载</span><br></pre></td></tr></table></figure><ol><li>官网下载稳定版</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://nginx.org/en/download.html</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846395917nginx.png" alt="nginx"></p><ol start="2"><li>在根目录下，输入<code>cmd</code>打开终端</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846458918nginx2.png" alt="nginx"></p><ol start="3"><li>在终端中使用指令<code>start nginx</code>开启nginx</li><li>在浏览器输入<code>localhost</code>，出现如下界面即代表开启成功</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846752917nginx3.png" alt="nginx"></p><ol start="5"><li>配置nginx ：nginx.conf里面配置</li></ol><blockquote><p>后端的 ip +后端口 之后 最后必须有 <code>/</code>，而且最后的最后必须要带上<code>;</code></p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846838916nginx4.png" alt="nginx"></p><blockquote><p>如果不带<code>;</code> nginx命令会不生效；</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846922917nginx5.png" alt="nginx"></p><blockquote><p>如果不带 <code>/ </code>；接口地址为404；</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846964974nginx6.png" alt="nginx"></p><ol start="6"><li>修改前端的请求接口</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847108917nginx7.png" alt="nginx"></p><ol start="7"><li>将前端文件放到<code>nginx文件的html目录下</code>(也可以不放，见下文的补充)</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847187916nginx8.png" alt="nginx"></p><ol start="8"><li>重新加载一下<code>nginx -s reload</code>，然后在浏览器输入 <code>localhost/myDemo.html</code></li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847224916nginx9.png" alt="nginx"></p><blockquote><p>未经过反向代理的接口为：</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847268916nginx10.png" alt="nginx"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote><p>上面第7步中，也可以不将前端文件放到<code>nginx文件的html目录下</code></p></blockquote><ol><li>项目通过<code>vsCode</code>插件<code>Live Server</code>起一个本地服务，地址是<code>127.0.0.1:5500</code>，<strong>然后这个服务就不能关掉了</strong>，当然页面可以关；</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847329917nginx11.png" alt="nginx"></p><ol start="2"><li>修改<code>nginx</code>的配置文件</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847383916nginx12.png" alt="nginx"></p><ol start="3"><li>重新加载一下<code>nginx -s reload</code>，然后在浏览器输入 <code>localhost/myDemo.html</code></li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847420916nginx13.png" alt="nginx"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://juejin.cn/post/7024799741120610318">关于Jsonp跨域，你知道多少？</a></p><p><a href="https://blog.csdn.net/weixin_40967353/article/details/107935984?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2.pc_relevant_default&utm_relevant_index=5">jsonp解决跨域问题（简单易懂）</a></p><p><a href="https://www.cnblogs.com/zjdyl/p/15620929.html">jsonp劫持</a></p><p><a href="https://juejin.cn/post/7021433082691452936">前端解决跨域，nginx 反向代理</a></p><p><a href="https://blog.csdn.net/envon123/article/details/83270277">正确的Nginx跨域配置</a></p><p><a href="https://juejin.cn/post/7027378324611530759">前端本地开发如何靠自己解决跨域</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 Suspense</title>
      <link href="/articles/5ca213d8.html"/>
      <url>/articles/5ca213d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验(内置组件，不需要引入)</li><li>其实和2.x中的路由懒加载差不多</li></ul><blockquote><p>传统写法：效果就是 只要 子组件 还没有 引入成功，整个父组件都不会进行渲染，即所有DOM一起渲染，父组件于子组件视图一起展示 (网络慢的时候明显)</p><p>缺点：页面加载慢，加载的快慢取决于 最慢的那个加载的速度 (木桶原理既视感…)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is parent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i-son</span>&gt;</span><span class="tag">&lt;/<span class="name">i-son</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> iSon <span class="keyword">from</span> <span class="string">&quot;./injectSon.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;iSon&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is son<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>异步加载组件：子组件不需要改变，父组件引入<code>defineAsyncComponent</code>，来实现异步组件的加载，即先加载父组件，然后在加载 子组件 (网络慢的时候明显)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is parent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i-son</span>&gt;</span><span class="tag">&lt;/<span class="name">i-son</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// import iSon from &quot;./injectSon.vue&quot;;    //同步引入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> iSon = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./injectSon.vue&quot;</span>)); <span class="comment">//异步引入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;iSon&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>但是以上写法，还是有点问题的，因为 如果 有一个子组件加载的特别特别慢，用户可能以为没东西了呢，其实是因为加载的太慢，还没加载出来，此时<code>Suspense</code>横空出世(据说还不是很稳定目前 2022&#x2F;3&#x2F;24)</p></blockquote><blockquote><p>Suspense底层是通过具名插槽实现的，所以我们写的时候，需要用<code>template</code>包裹，一个是 <code>v-slot:default</code> 用来放置真正要展示的数据；一个是 <code>v-slot:fallback</code> 用来放置 提示 加载中 之类的东西；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 父组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is parent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;!-- <span class="title class_">Suspense</span>是内置组件,不需要再引入 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 内置封装了两个实名插槽,实名插槽需要用template包裹 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i-son</span>&gt;</span><span class="tag">&lt;/<span class="name">i-son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载中~~~<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// import iSon from &quot;./injectSon.vue&quot;;    //同步引入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> iSon = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./injectSon.vue&quot;</span>)); <span class="comment">//异步引入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; iSon &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>效果如下图所示</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656846104915suspense.gif" alt="Suspense"></p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue3 Suspense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 Suspense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 provide与inject</title>
      <link href="/articles/6d48bcfd.html"/>
      <url>/articles/6d48bcfd.html</url>
      
        <content type="html"><![CDATA[<h2 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h2><ul><li>作用： 实现祖孙组件的通信(其实 所有的后代都能接受到数据，隔了多少代都可以，一代也不搁的也可以)</li><li>用法：父组件有一个<code>provide</code>来提供数据，后代组件有一个<code>inject</code>来接收数据；</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 爷爷组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is grandParent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i-son</span>&gt;</span><span class="tag">&lt;/<span class="name">i-son</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; provide, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> iSon <span class="keyword">from</span> <span class="string">&quot;./injectSon.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;iSon&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//声明响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;奔驰&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">price</span>: <span class="string">&quot;40W&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 将自己的数据传给后代组件(所有的后代都能接受到,隔了多少代都可以)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">provide</span>(<span class="string">&quot;myCar&quot;</span>,car);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">toRefs</span>(car)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 孙组件,中间还隔了一个父组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is grandSon<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; inject, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> car = <span class="title function_">inject</span>(<span class="string">&quot;myCar&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 直接将获取到的响应式数据,解构;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ...<span class="title function_">toRefs</span>(car),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845154916provide.png" alt="inject"></p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue3 provide与inject </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 provide与inject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 watch</title>
      <link href="/articles/7db1b1fe.html"/>
      <url>/articles/7db1b1fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><blockquote><p>监听<strong>响应式</strong>数据的变化，才能够被watch所监听到；</p></blockquote><div class="tabs" id="vuewatch"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#vuewatch-1">vue2.x</button></li><li class="tab"><button type="button" data-href="#vuewatch-2">vue3.0</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="vuewatch-1"><h2 id="vue2中的watch函数"><a href="#vue2中的watch函数" class="headerlink" title="vue2中的watch函数"></a>vue2中的watch函数</h2><blockquote><p>vue2中的<strong>响应式</strong>数据是写在<code>data</code>、<code>computed</code>或者<code>props</code>接收的数据；才能够被watch所监听到</p></blockquote><h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; sum &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">sum</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sum</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="进阶写法"><a href="#进阶写法" class="headerlink" title="进阶写法"></a>进阶写法</h3><blockquote><p>相比较，就是<code>handler</code>把原来的监听对象替换了，原来的监听对象以对象形式套在外面；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">sum</span>: &#123;</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,  <span class="comment">//上来自动执行一次</span></span><br><span class="line">      <span class="attr">deep</span>:<span class="literal">true</span>,  <span class="comment">//深度监听(数据是多层级的时候用)</span></span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vuewatch-2"><h2 id="vue3中的watch函数"><a href="#vue3中的watch函数" class="headerlink" title="vue3中的watch函数"></a>vue3中的watch函数</h2><blockquote><p>vue3中的<strong>响应式</strong>数据是被<code>ref</code>或者<code>reactive</code>包裹起来的数据；才能够被watch所监听到；</p><p>watch按需导入：<code>import { watch } from &quot;vue&quot;;</code></p></blockquote><h3 id="ref定义的一个响应式数据"><a href="#ref定义的一个响应式数据" class="headerlink" title="ref定义的一个响应式数据"></a>ref定义的一个响应式数据</h3><blockquote><p>ref不需要.value，因为watch监听的是一个响应式数据，如果.value了，监听的就不是<code>proxy</code>代理的对象；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref,watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 响应式数据</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// watch监听 (这是一种行为,而不是数据,所以不需要返回值)</span></span><br><span class="line">    <span class="comment">// watch() 两个参数,第一个是监听对象，对二个是回调函数</span></span><br><span class="line">    <span class="title function_">watch</span>(sum, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        sum,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ref定义的多个响应式数据"><a href="#ref定义的多个响应式数据" class="headerlink" title="ref定义的多个响应式数据"></a>ref定义的多个响应式数据</h3><blockquote><p>方式一：有几个写几个watch</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 响应式数据</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(sum, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(msg, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      sum,</span><br><span class="line">      msg,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>方式二：第一个参数写成数组的形式，里面放入ref响应式对象；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; sum &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;msg += &#x27;!&#x27;&quot;</span>&gt;</span>点我加!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">watch</span>([sum,msg], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      sum,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      msg,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656843723917watch.png" alt="watch"></p><h3 id="ref定义的对象"><a href="#ref定义的对象" class="headerlink" title="ref定义的对象"></a>ref定义的对象</h3><blockquote><p>watch监听ref定义的引用数据类型时,需要开启深度监听；reactive不需要开启,因为reactive源码中默认开启了深度监听；</p><p>watch监听的如果是引用数据类型，那么newVal和oldVal的值是一样的；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;message.foo.bar.name&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script  lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 响应式数据</span><br><span class="line">    const message = ref(&#123;</span><br><span class="line">      foo: &#123;</span><br><span class="line">        bar: &#123;</span><br><span class="line">          name: &quot;fsllala&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // watch监听ref定义的引用数据类型时,需要开启深度监听;reactive不需要开启,因为reactive源码中默认开启了深度监听;</span><br><span class="line">    watch(message, (newVal, oldVal) =&gt; &#123;</span><br><span class="line">      console.log(newVal, oldVal);</span><br><span class="line">    &#125;, &#123; deep: true &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      message,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="监听reactive定义的一个响应式数据的全部属性"><a href="#监听reactive定义的一个响应式数据的全部属性" class="headerlink" title="监听reactive定义的一个响应式数据的全部属性"></a>监听reactive定义的一个响应式数据的全部属性</h3><blockquote><p>watch监听的如果是引用数据类型，那么newVal和oldVal的值是一样的；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.name += &#x27;!&#x27;&quot;</span>&gt;</span>点我加!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">watch</span>(person, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656843942917watch1.png" alt="watch"></p><blockquote><p>上面问题，目前还无法解决。。。</p><p>但是其实可以将需要用到 oldValue 的 数据写成 ref的，即可解决；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 假如我需要监听 age的 oldvalue,我写成ref的形式</span></span><br><span class="line">    <span class="title function_">watch</span>(age, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(person, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">      age,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>reactive还有个问题就是：当监听<strong>全部</strong>属性的时候 <code>强制</code>开启了深度监听，<code>deep:false</code>也关不掉；会影响效率</p></blockquote><h3 id="监听reactive定义的一个响应式数据中的单一属性"><a href="#监听reactive定义的一个响应式数据中的单一属性" class="headerlink" title="监听reactive定义的一个响应式数据中的单一属性"></a>监听reactive定义的一个响应式数据中的单一属性</h3><blockquote><p>第一个参数直接写 <code>对象.属性</code>是不行滴，因为他不是<code>proxy</code>代理的对象，需要写成<code>()=&gt;对象.属性</code>的回调函数 形式；</p><p>值的一提的是，这样监听 reactive的单一属性，是可以检测到<code> oldValue</code>的；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">age</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="监听reactive定义的一个响应式数据中的某些属性"><a href="#监听reactive定义的一个响应式数据中的某些属性" class="headerlink" title="监听reactive定义的一个响应式数据中的某些属性"></a>监听reactive定义的一个响应式数据中的某些属性</h3><blockquote><p>这个<code>oldValue</code>也可以监听到，只要不是监听全部的属性，都可以监听到<code>oldValue</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">()=&gt;</span>person.<span class="property">age</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><blockquote><p>监听的是一个属性，但是这个属性又是一个对象，需要用到<code>深度监听</code>；因为是个对象，所以<code>oldValue</code>监听不到；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>:&#123;</span><br><span class="line">          <span class="attr">a</span>:&#123;</span><br><span class="line">              <span class="attr">b</span>:<span class="string">&quot;web&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">    &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="vue3中的watchEffect函数"><a href="#vue3中的watchEffect函数" class="headerlink" title="vue3中的watchEffect函数"></a>vue3中的watchEffect函数</h2><blockquote><p>跟watch是不一样的，watchEffect是非惰性的，watchEffect一开始会自己自调用一次；</p><p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数；</p><p>如果用到 message 就只会监听 message ；就是用到几个监听几个 而且是非惰性 会默认调用一次；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;message2&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;objMessage.name&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, watchEffect &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let message = ref&lt;string&gt;(&quot;vue3.2&quot;);</span><br><span class="line">let message2 = ref&lt;string&gt;(&quot;TS泛型&quot;);</span><br><span class="line">const objMessage = reactive(&#123;</span><br><span class="line">  name: &quot;fsllala&quot;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">  /**</span><br><span class="line">   * watchEffect 这里ref需要加.value,因为如果不加.value,监听的是一个RefImpl对象,他的引用地址是不会变的;</span><br><span class="line">   * 同理如果监听的是一个响应式数据,例如objMessage,即使里面的name改变了,也不会监听到,因为objMessage的引用地址是没变的;</span><br><span class="line">   * */ </span><br><span class="line">  // 监听谁,写在这里面就好了,会立即执行一次;</span><br><span class="line">  console.log(&quot;message=====&quot;, message);</span><br><span class="line">  console.log(&quot;message2=====&quot;, message2.value);</span><br><span class="line">  console.log(&quot;objMessage=====&quot;, objMessage.name);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="清除副作用"><a href="#清除副作用" class="headerlink" title="清除副作用"></a>清除副作用</h3><blockquote><p>就是在触发监听之前会调用一个函数可以处理你的逻辑例如防抖</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;vue3.2&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> message2 = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;TS泛型&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> objMessage = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">(<span class="params">fsl</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 数据改变的时候,会先打印 before~</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message=====&quot;</span>, message.<span class="property">value</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message2=====&quot;</span>, message2.<span class="property">value</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;objMessage=====&quot;</span>, objMessage.<span class="property">name</span>);</span><br><span class="line">  <span class="title function_">fsl</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before~&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="停止监听"><a href="#停止监听" class="headerlink" title="停止监听"></a>停止监听</h3><blockquote><p>停止跟踪 ：watchEffect 返回一个函数 ，调用之后将停止更新；</p><p>离开界面可以做停止监听；</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stopWatch&quot;</span>&gt;</span>stopWatch<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, reactive, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> message = ref&lt;string&gt;(<span class="string">&quot;vue3.2&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// watchEffect返回一个停止监听的函数,调用了就不会监听了;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">fsl</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message=====&quot;</span>, message.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">stopWatch</span>=(<span class="params"></span>)=&gt;<span class="title function_">stop</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="更多的配置项"><a href="#更多的配置项" class="headerlink" title="更多的配置项"></a>更多的配置项</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputId&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, reactive, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> message = ref&lt;string&gt;(<span class="string">&quot;vue3.2&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// watchEffect 不加 &#123; flush: &quot;post&quot; &#125; ,domID获取不到,因为setup中dom还没渲染,所以为null;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> <span class="attr">domID</span>: <span class="title class_">HTMLInputElement</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inputId&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message=====&quot;</span>, message.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inputId=====&quot;</span>, domID);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, &#123; <span class="attr">flush</span>: <span class="string">&quot;post&quot;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>断言 (assertion)</strong> 是一种在程序中的一阶逻辑 (如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果 —— 当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息。</p></blockquote><table><thead><tr><th align="left"></th><th align="left">pre</th><th align="left">sync</th><th align="left">post</th></tr></thead><tbody><tr><td align="left">更新时机</td><td align="left">组件<strong>更新前</strong>执行</td><td align="left">强制效果始终同步触发</td><td align="left">组件<strong>更新后</strong>执行</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue3 watch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 watch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 hook</title>
      <link href="/articles/1c4c16aa.html"/>
      <url>/articles/1c4c16aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h2><blockquote><p>本质是一个函数，把<code>setup</code>函数中使用的 <code>Composition API</code> 进行了封装；</p><p>类似于2.x中 的<code>mixin</code>；</p><p>自定义hook的优势：复用代码，让setup中的逻辑更清楚易懂；</p></blockquote><blockquote><p>实现一个获取坐标位置的功能</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>点前点击的鼠标的坐标为x:&#123;&#123; point.x &#125;&#125;,y:&#123;&#123; point.y &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 获取鼠标的点击的坐标</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, onMounted,onBeforeUnmount &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">x</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">y</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      point.<span class="property">x</span> = event.<span class="property">pageX</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      point.<span class="property">y</span> = event.<span class="property">pageY</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 生命周期</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, savePoint);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>,savePoint);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      point,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>但是这个功能 我如果别的地方也想用，咋办？</p><p>新建一个文件夹，起名为<code>hook</code>，里面新建一个<code>js</code>文件，起名为<code>usePoint.js</code>；</p><p>将如上实现功能的代码 <code>cv</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得需要把这些引入了,然后把setup中的数据,方法,生命周期cv放在一个函数里,最后将这个函数暴露出去;</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, onMounted, onBeforeUnmount &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        point.<span class="property">x</span> = event.<span class="property">pageX</span>;</span><br><span class="line">        point.<span class="property">y</span> = event.<span class="property">pageY</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生命周期</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, savePoint);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, savePoint);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//别的地方调用这个函数的时候 ,如果没有return出数据,获取到的就是 undefined</span></span><br><span class="line">    <span class="keyword">return</span> point;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在需要用这个功能的地方</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>点前点击的鼠标的坐标为x:&#123;&#123; point.x &#125;&#125;,y:&#123;&#123; point.y &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 1.引入一下</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> usePoint <span class="keyword">from</span> <span class="string">&quot;../hook/usePoint&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 调用一下</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// usePoint是 一个函数,这个函数 return出来了所需的数据;调用这个函数;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> point = <span class="title function_">usePoint</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.暴露出去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      point,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue3 hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 setup参数</title>
      <link href="/articles/459aa16c.html"/>
      <url>/articles/459aa16c.html</url>
      
        <content type="html"><![CDATA[<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><h3 id="Vue2中的组件传值"><a href="#Vue2中的组件传值" class="headerlink" title="Vue2中的组件传值"></a>Vue2中的组件传值</h3><blockquote><p>父传子 $attrs</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">v-child</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">school</span>=<span class="string">&quot;vue2父传子&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">v-child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> vChild <span class="keyword">from</span> <span class="string">&quot;./theChild.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        vChild</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>子组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:[<span class="string">&quot;msg&quot;</span>],  <span class="comment">//子组件通过props接收</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//打印this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>当子组件通过 props 接收 父组件 传过来的值时， this上的**$attrs**啥都没；</p><p>当子组件通过 props 接收 父组件 传过来的值，但并没有全部接收， this上的**$attrs**有未接收的父组件传的值；</p><p>当子组件去掉 props，即不接收父组件 传过来的值时 this上的**$attrs**有父组件传过来的值；</p><p>结论：vue2中<code>vue实例</code>中的**$attrs**可以<code>捡漏</code>父组件传过来，但<code>props</code>未接收的数据；</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845866917v2fcz.png" alt="父传子Vue2"></p><h3 id="vue3中的组件传值"><a href="#vue3中的组件传值" class="headerlink" title="vue3中的组件传值"></a>vue3中的组件传值</h3><blockquote><p>父传子</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">v-child</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">school</span>=<span class="string">&quot;父传子&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">v-child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> vChild <span class="keyword">from</span> <span class="string">&quot;./theChild.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        vChild,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>子组件 setup 的第一个参数</p><p>setup外和2一样，得先用props接收一下，然后setup的第一个参数就是接收的父亲传来的值；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;school&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//   第一个参数是接收父组件传来的值,形参,当然也不一定叫props；</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//   第二个参数是上下文   主要关注其 attrs , emit , slots属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params">props,context</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);  <span class="comment">//Proxy &#123;msg: &#x27;hello&#x27;, school: &#x27;父传子&#x27;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>子组件 setup 的第二个参数 context；</p><p>context.attrs与2中的this.$attts一样，是捡漏的,即props没接收到的 ，就去context.attrs里面了；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>],</span><br><span class="line">  <span class="comment">//   第一个参数是接收父组件传来的值,形参,当然也不一定叫props；</span></span><br><span class="line">  <span class="comment">//   第二个参数是上下文   主要关注其 attrs , emit , slots属性</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(context); //上下文   主要关注其 attrs , emit , slots属性</span></span><br><span class="line">    <span class="comment">//context.attrs 相当于vue2中的 this.$attrs  捡漏的...</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>);  <span class="comment">//Proxy &#123;school: &#x27;父传子&#x27;, __vInternal: 1&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>子传父</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">v-child</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">school</span>=<span class="string">&quot;父传子&quot;</span> @<span class="attr">lala</span>=<span class="string">&quot;fsl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">v-child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> vChild <span class="keyword">from</span> <span class="string">&quot;./theChild.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        vChild,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> <span class="title function_">fsl</span>=(<span class="params">value</span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`接收到了子组件传来的<span class="subst">$&#123;value&#125;</span>`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            fsl,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>context.emit与2中的this.$emits一样</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childToPatent&quot;</span>&gt;</span>子传父<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;school&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   第一个参数是接收父组件传来的值,形参,当然也不一定叫props；</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   第二个参数是上下文   主要关注其 attrs , emit , slots属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(context); //上下文   主要关注其 attrs , emit , slots属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">childToPatent</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        context.<span class="title function_">emit</span>(<span class="string">&quot;lala&quot;</span>,<span class="number">666</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        childToPatent,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845934916v3fcz.png"></p><blockquote><p>但是这样还是不行滴，会出提示的，需要在子组件中用 <code>emits</code>解决</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;school&quot;</span>],</span><br><span class="line">  <span class="attr">emits</span>:[<span class="string">&quot;lala&quot;</span>],</span><br><span class="line">  <span class="comment">//   第一个参数是接收父组件传来的值,形参,当然也不一定叫props；</span></span><br><span class="line">  <span class="comment">//   第二个参数是上下文   主要关注其 attrs , emit , slots属性</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(context); //上下文   主要关注其 attrs , emit , slots属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">childToPatent</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        context.<span class="title function_">emit</span>(<span class="string">&quot;lala&quot;</span>,<span class="number">666</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        childToPatent,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>传递有名字的插槽需要用template包装起来，然后用  v-slot：xxx</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">v-child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 传递实名插槽 需要 v-slot:xxx --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:qwe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:abc</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">v-child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> vChild <span class="keyword">from</span> <span class="string">&quot;./theChild.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    vChild,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>子组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   第一个参数是接收父组件传来的值,形参,当然也不一定叫props；</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   第二个参数是上下文   主要关注其 attrs , emit , slots属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(context); //上下文   主要关注其 attrs , emit , slots属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>) <span class="comment">//Proxy &#123;_: 1, __vInternal: 1, qwe: ƒ, abc: ƒ&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue3 setup参数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 setup参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2与3响应式原理</title>
      <link href="/articles/bb6c6e3.html"/>
      <url>/articles/bb6c6e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue2响应式原理"><a href="#vue2响应式原理" class="headerlink" title="vue2响应式原理"></a>vue2响应式原理</h2><blockquote><p>通过<code>Object.defineProperty()</code>对属性的读取，修改进行数据劫持；</p><p>get捕获 获取的数据；set捕获 修改的数据；但是添加和删除属性是捕获不到的；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给哪个对象追加属性,追加什么属性,对象 get 和set方法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(p,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟vue2实现响应式</span></span><br><span class="line"><span class="comment">// 1.准备一个空对象</span></span><br><span class="line"><span class="keyword">let</span> p = &#123;&#125;;</span><br><span class="line"><span class="comment">// 给哪个对象追加属性,追加什么属性,对象 get 和set方法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//有人读取name时使用</span></span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">name</span>;  <span class="comment">//将原数据返回</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//有人修改name时使用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人修了了name属性&quot;</span>);</span><br><span class="line">        person.<span class="property">name</span>=value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//有人读取name时使用</span></span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">age</span>;  <span class="comment">//将原数据返回</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//有人修改name时使用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人修了了age属性&quot;</span>);</span><br><span class="line">        person.<span class="property">age</span>=value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p> <code>添加</code>和<code>删除</code>捕获不到；</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656844636919vue2yl.png" alt="vue2"></p><h2 id="vue2响应式出现的问题及解决方法"><a href="#vue2响应式出现的问题及解决方法" class="headerlink" title="vue2响应式出现的问题及解决方法"></a>vue2响应式出现的问题及解决方法</h2><h3 id="对象中，新增属性、删除属性、界面不会更新-数据会变-；"><a href="#对象中，新增属性、删除属性、界面不会更新-数据会变-；" class="headerlink" title="对象中，新增属性、删除属性、界面不会更新(数据会变)；"></a>对象中，新增属性、删除属性、界面不会更新(数据会变)；</h3><blockquote><p>问题复现</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span>&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;person.sex&quot;</span>&gt;</span>&#123;&#123; person.sex &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加一个属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;delName&quot;</span>&gt;</span>删除一个属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">person</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 添加属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addSex</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">sex</span>);  <span class="comment">//undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">sex</span>); <span class="comment">// 女</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 删除属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">delName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span>); <span class="comment">//18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span>); <span class="comment">//undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>点击添加属性的按钮；点击删除对象的按钮；</p><p>person对象中有值了，但是页面不渲染</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656844776918vue2yl2.png" alt="obj"></p><blockquote><p>解决方法：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 Vue.set的方式需要 从 vue中引入 Vue;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">person</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="title function_">addSex</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 对象三个参数,给谁加,加的属性,加的值；</span></span><br><span class="line">      <span class="comment">// this.$set(this.person,&quot;sex&quot;,&quot;女&quot;);   //方法一,this代表 Vue的实例;</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;女&quot;</span>);       <span class="comment">//方法二,需要从 vue中引入 Vue</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 删除属性</span></span><br><span class="line">    <span class="title function_">delName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 对象两个参数,删除谁，删除啥属性；</span></span><br><span class="line">      <span class="comment">// this.$delete(this.person,&quot;name&quot;);    //方法一,this代表 Vue的实例;</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&quot;age&quot;</span>);         <span class="comment">//方法二,需要从 vue中引入 Vue</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="直接通过下标修改数组，界面不会自动更新"><a href="#直接通过下标修改数组，界面不会自动更新" class="headerlink" title="直接通过下标修改数组，界面不会自动更新"></a>直接通过下标修改数组，界面不会自动更新</h3><blockquote><p>问题复现</p><p>点击之后数组变了，页面不渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; person.hobby &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeLove&quot;</span>&gt;</span>修改第一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//使用 Vue.set 需要 从 vue中引入;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">person</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">hobby</span>:[<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;干饭&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 通过下标修改数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeLove</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>[<span class="number">0</span>]=<span class="string">&quot;study&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656844845915vue2yl3.png" alt="arr"></p><blockquote><p>解决方法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 Vue.set 需要 从 vue中引入;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">person</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">hobby</span>:[<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;干饭&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 通过下标修改数组</span></span><br><span class="line">    <span class="title function_">changeLove</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// 数组三个参数, 修改谁,修改的索引,改成啥;</span></span><br><span class="line">      <span class="comment">// this.$set(this.person.hobby,0,&quot;study&quot;);  //方法一,this代表 Vue的实例;</span></span><br><span class="line">      <span class="comment">// Vue.set(this.person.hobby,0,&quot;studing&quot;);  //方法二,需要从 vue中引入 Vue</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;打游戏&quot;</span>);   <span class="comment">//方法三,开始的索引,删除几个,替换成谁;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="vue3响应式原理"><a href="#vue3响应式原理" class="headerlink" title="vue3响应式原理"></a>vue3响应式原理</h2><blockquote><p>vue3响应式解决了vue2中响应式出现的问题；</p><p>通过Proxy(代理)对源对象变化的属性进行拦截，通过Reflect(反射)对源对象的属性进行操作；</p><p>知识点：</p><p>window.Proxy–&gt;window内置的构造函数</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟vue3中的响应式  </span></span><br><span class="line"><span class="comment">// Proxy的作用是  用p映射person的操作 参数:映射的对象、空对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>重写一下 Proxy</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟vue3中的响应式  </span></span><br><span class="line"><span class="comment">// Proxy的作用是  用p映射person的操作 参数:映射的对象、对象get set</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line">        <span class="comment">// target为 源数据 , propName 为 获取的属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;某人读取了p上的属性&quot;</span>,target,propName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里有个小知识点: </span></span><br><span class="line"><span class="comment">         * 变量1.变量2 == 变量1[&quot;变量2&quot;] --&gt; 即.变量2 中的 变量2 其实已经不是变量了</span></span><br><span class="line"><span class="comment">         * 变量用[];字符串用点或者[&quot;&quot;]</span></span><br><span class="line"><span class="comment">         * */</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// return target.propName;  // undefined</span></span><br><span class="line">         <span class="keyword">return</span> target[propName]; <span class="comment">//张三 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;</span><br><span class="line">        <span class="comment">// target为 源数据 , propName 为 获取的属性, value是设置的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`修改了p身上的<span class="subst">$&#123;propName&#125;</span>,我要去更新界面了`</span>);</span><br><span class="line">        target[propName]=value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 新增了一个删除方法</span></span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除了p身上的<span class="subst">$&#123;propName&#125;</span>,我要去更新界面了`</span>);</span><br><span class="line">        <span class="comment">// delete target[propName];  //false ,因为需要返回值,没有返回值为 false;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">delete</span> target[propName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>通过重写，发现 操作 都可以捕获到</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656844921916vue3yl.png" alt="vue3"></p><blockquote><p>但 vue3的底层 并不是通过 通过 获取到 target[propName] 这种来修改的；这种有缺陷，而是下面的Reflect；</p><p>知识点： 获取对象的某个属性,除了 <code>obj.属性</code>之外还有下面这个新增的方法</p><p>window.Reflect()  ；反射对象</p><p>Reflect.get(反射的对象,key)；Reflect.set(反射的对象,key,value)；Reflect.deleteProperty(反射的对象,key)</p></blockquote><blockquote><p>传统的 出现相同属性会出错，封装时需要大量的try,,,catch；Reflect 不会出错；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//Object.defineProperty会报错,封装的话 得需要大量的 try,catch</span></span><br><span class="line"><span class="comment">// Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span><br><span class="line"><span class="comment">//     get()&#123;</span></span><br><span class="line"><span class="comment">//         return 3;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span><br><span class="line"><span class="comment">//     get()&#123;</span></span><br><span class="line"><span class="comment">//         return 4;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//会报错  代码不继续往下走了</span></span><br><span class="line"><span class="comment">// console.log(123)  //不会输出的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.defineProperty不会报错,且有返回值</span></span><br><span class="line"><span class="keyword">const</span> x1 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x2= <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(x1); //true</span></span><br><span class="line"><span class="comment">// console.log(x2); //false</span></span><br><span class="line"><span class="keyword">if</span>(x2)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;某某操作成了&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;某某操作失败了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将重写的代码稍加改动 (vue3响应式原理)</p><p>通过Proxy(代理)对源对象变化的属性进行拦截，通过Reflect(反射)对源对象的属性进行操作；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟vue3中的响应式  </span></span><br><span class="line"><span class="comment">// Proxy的作用是  用p映射person的操作 参数:映射的对象、对象get set</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line">        <span class="comment">// target为 源数据 , propName 为 获取的属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;某人读取了p上的属性&quot;</span>,target,propName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里有个小知识点: </span></span><br><span class="line"><span class="comment">         * 变量1.变量2 == 变量1[&quot;变量2&quot;] --&gt; 即.变量2 中的 变量2 其实已经不是变量了</span></span><br><span class="line"><span class="comment">         * 变量用[];字符串用点或者[&quot;&quot;]</span></span><br><span class="line"><span class="comment">         * */</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// return target.propName;  // undefined</span></span><br><span class="line">        <span class="comment">//  return target[propName]; //张三 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;</span><br><span class="line">        <span class="comment">// target为 源数据 , propName 为 获取的属性, value是设置的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`修改了p身上的<span class="subst">$&#123;propName&#125;</span>,我要去更新界面了`</span>);</span><br><span class="line">        <span class="comment">// target[propName]=value;</span></span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 新增了一个删除方法</span></span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除了p身上的<span class="subst">$&#123;propName&#125;</span>,我要去更新界面了`</span>);</span><br><span class="line">        <span class="comment">// delete target[propName];  //false ,因为需要返回值,没有返回值为 false;</span></span><br><span class="line">        <span class="comment">// return delete target[propName];</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,propName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue2与3响应式原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2与3响应式原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3响应式数据</title>
      <link href="/articles/d61e2f28.html"/>
      <url>/articles/d61e2f28.html</url>
      
        <content type="html"><![CDATA[<h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><blockquote><p>通过ref生成一个 <strong>引用对象(ref对象)</strong> ，定义一个<strong>响应式的数据</strong></p></blockquote><blockquote><p>传统写法：打印输出的值 是 <code>李四</code>，但是页面数据不变–&gt;数据不是响应式的–&gt;通过ref转为响应式</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> age = <span class="number">20</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            name=<span class="string">&quot;李四&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            name,age,changeValue,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>ref转为响应式</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            name,age,changeValue,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先打印一下转化为响应式的name，是一个<code>引用对象</code></p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845486917ref.png" alt="ref"></p><blockquote><p>通过ref修改页面展示的数据</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">20</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// console.log(name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            name.<span class="property">value</span> = <span class="string">&quot;李四&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            age.<span class="property">value</span> = <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            name,age,changeValue,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p><code>setup</code>中通过<code>.value</code>修改<code>ref响应式</code>的值；在<code>template</code>的<code>&#123;&#123;&#125;&#125;</code>中，不用<code>.value</code>，其自动带上了<code>.value</code></p><p>ref修改<code>引用数据类型</code> 则<code>template</code>中的<code>&#123;&#123;&#125;&#125;</code>需要 <code>对象.属性</code>；</p><p>同基本数据类型一样,要想获取到ref里面的响应式的值,需要通过 .value  获取；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 对象.属性 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> job =<span class="title function_">ref</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;前端工程师&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">salary</span>:<span class="string">&quot;30k&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//同基本数据类型一样,要想获取到ref里面的响应式的值,需要通过 .value  获取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(job.<span class="property">value</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           changeValue,job</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845582916ref2.png" alt="ref引用数据类型"></p><blockquote><p>ref基本数据类型和引用数据类型</p></blockquote><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845648916ref3.png" alt="ref"></p><blockquote><p>修改ref 引用数据类型的值</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> job =<span class="title function_">ref</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;前端工程师&quot;</span>,</span><br><span class="line">            <span class="attr">salary</span>:<span class="string">&quot;30k&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="comment">//同基本数据类型一样,要想获取到ref里面的响应式的值,需要通过 .value  获取</span></span><br><span class="line">            <span class="comment">// console.log(job.value);  </span></span><br><span class="line">            job.<span class="property">value</span>.<span class="property">type</span>=<span class="string">&quot;全栈开发&quot;</span>;</span><br><span class="line">            job.<span class="property">value</span>.<span class="property">salary</span>=<span class="string">&quot;60k&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">           changeValue,job</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><blockquote><p>定义一个<strong>引用数据类型的响应式数据</strong>(基本数据类型不能用它，需要用ref)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 对象.属性 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> job =<span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;前端工程师&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">salary</span>:<span class="string">&quot;30k&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(job); <span class="comment">//reactive不需要.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           job,changeValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845730916ref4.png" alt="reactive"></p><blockquote><p>修改 reactive 创建出来 的响应式 的数据(Proxy修复了2.x，数据更新了不渲染的问题，vue.$set…)</p><p>不需要.value</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> job =<span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;前端工程师&quot;</span>,</span><br><span class="line">            <span class="attr">salary</span>:<span class="string">&quot;30k&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="comment">// console.log(job);</span></span><br><span class="line">            job.<span class="property">type</span>=<span class="string">&quot;全栈开发&quot;</span>;</span><br><span class="line">            job.<span class="property">salary</span>=<span class="string">&quot;60k&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">           job,changeValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>reactive定义的响应式对象是<code>深层次的</code>；</p><p>多层嵌套的数据，也可以直接改；(实测，ref也可以直接改，毕竟ref响应式底层用的也是reactive)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 对象.属性 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;job.a.b.c&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> job =<span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;前端工程师&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">salary</span>:<span class="string">&quot;30k&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">a</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">b</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">c</span>:<span class="number">666</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> <span class="title function_">changeValue</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// console.log(job);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            job.<span class="property">type</span>=<span class="string">&quot;全栈开发&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            job.<span class="property">salary</span>=<span class="string">&quot;60k&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            job.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>=<span class="number">999</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           job,changeValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><blockquote><p>创建多个ref对象</p><p>常用于对reactive对象进行解构</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> job = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;前端工程师&quot;</span>,</span><br><span class="line">      <span class="attr">salary</span>: <span class="string">&quot;30k&quot;</span>,</span><br><span class="line">      <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">          <span class="attr">c</span>: <span class="number">666</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> jieGou = <span class="title function_">toRefs</span>(job);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(jieGou);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656845795916ref5.png" alt="toRefs"></p><blockquote><p>对Reactive对象进行解构</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 对象.属性 --&gt;</span><br><span class="line">  &lt;!-- 因为对象结构赋值了,所以这里少写了一层 job --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; type &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; salary &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; a.b.c &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> job = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="string">&quot;前端工程师&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">salary</span>: <span class="string">&quot;30k&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">a</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">b</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">c</span>: <span class="number">666</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> <span class="title function_">changeValue</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      job.<span class="property">type</span> = <span class="string">&quot;全栈开发&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      job.<span class="property">salary</span> = <span class="string">&quot;60k&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      job.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span> = <span class="number">999</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">//在return 的 &#123;&#125; 里 对对象进行解构赋值;相当于添加了 toRef(job,&#x27;type&#x27;),toRef(job,&#x27;salary&#x27;),toRef(job,&#x27;a&#x27;) </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ...<span class="title function_">toRefs</span>(job), </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changeValue,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
          <category> Vue3响应式数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3响应式数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/articles/3a42db2d.html"/>
      <url>/articles/3a42db2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="Vue3介绍"><a href="#Vue3介绍" class="headerlink" title="Vue3介绍"></a>Vue3介绍</h2><blockquote><p>Vue.JS 3.0兼容2.0的大多数语法。</p></blockquote><h3 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h3><ol><li>项目打包体积更小；</li><li>需要的运行内存更小；</li><li>初次渲染更快，更新渲染更快；</li><li>使用<code>Proxy</code>代替<code>Object.defineProperty</code>实现数据响应式；</li><li>重写虚拟<code>Dom</code>的实现和<code>Tree-Shaking</code>；(提升模板编译的速度；摇树操作–&gt;减少项目打包的体积)</li><li>更好的支持<code>TypeScript</code>；</li></ol><h2 id="获取Vue3-0"><a href="#获取Vue3-0" class="headerlink" title="获取Vue3.0"></a>获取Vue3.0</h2><ol><li>cdn方式<ul><li>创建实例对象的方式不一样；</li><li>挂载应用实例的方式不一样；</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建一个挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;apps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- method1 cdn方式导入Vue3源码包 下载到本地引入(不受网络限制的影响) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /**</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       vue2: 创建实例对象的方式   new一个类</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el:&quot;#apps&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            methods:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */ </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">// <span class="comment">&lt;!-- vue3 创建实例对象的方式 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">/**</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  调用Vue的createApp()静态方法: Vue.createApp();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">*/</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const app = Vue.createApp(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //   data必须是个函数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              msg:&quot;hello Vue3&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//   挂载应用实例</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> app.mount(&quot;#apps&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现象：</p><ul><li>通过<code>app.mount(&quot;#apps&quot;)</code>挂载应用实例，浏览器会展现出经<code>h2</code>渲染后的<code>hello Vue3</code>；</li><li>通过 <code>el:&quot;#apps&quot;</code>方式挂载应用实例，浏览器会展现出经<code>h2</code>渲染后的<code>&#123;&#123;msg&#125;&#125;</code>；即挂载点挂载失败了；</li></ul><ol start="2"><li><p>vue cli脚手架</p><ul><li>安装最新版本的<code>vue cli</code>脚手架：<code>npm i @vue/cli -g</code>；</li><li>创建项目：<code>vue create 项目名称</code></li><li>选择vue3版本的默认选项</li><li>现象：目录结构3与2大致一样；语法部分不一样；例如：</li></ul><p><strong>main.js(入口文件)：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue3 </span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>    <span class="comment">//从 vue包中 按需导入 createApp 方法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>        <span class="comment">//导入根组件</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)  <span class="comment">//把根组件交给createApp,然后挂载节点;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue2</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Vite构建工具</p><blockquote><p>Vite是一个web开发构建工具</p><p>Vite仅支持vue3.0+的项目，也即是说我们无法在其中使用vue2.x</p><p>在成功安装 vue-cli 之后即可使用 Vue3 带来的新工具 Vite 构建项目</p><p>Vite的底层不是基于webpack</p><p>Vite的底层是基于浏览器对原生ES模块语法的支持来进行项目构建，所以搭建速度很快</p></blockquote><ol><li>创建项目</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest  项目名称</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安装项目依赖</p><blockquote><p>在项目的根目录下运行命令</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在项目的根目录下运行命令</span></span><br><span class="line">cd 项目名称</span><br><span class="line">npm install</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">npm i </span><br></pre></td></tr></table></figure><ol start="3"><li><p>启动项目</p><blockquote><p>在项目的根目录下运行命令</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ol start="4"><li>默认监听端口号为3000</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h2><h3 id="Fragment模板碎片"><a href="#Fragment模板碎片" class="headerlink" title="Fragment模板碎片"></a>Fragment模板碎片</h3><ul><li>vue2中组件的模板必须有一个唯一的根标签</li><li>vue3中组件模板可以有多个根标签(可能编辑器会报错，是因为<code>Vetur</code>插件的问题，看下面的第二个参考文献来解决)</li></ul><blockquote><p>在Vite创建的项目中 src–&gt;components下新建一个home.vue</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">&lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;texts&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在App.vue里面进行  导入，注册，调用  三部曲</p><p>在vue3 里面 script添加了setup属性，有这个属性则可以不需要手动注册子组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">//一旦在script标签上添加了setup属性,则不需要手动注册子组件;</span></span><br><span class="line"><span class="comment">//在vite开发环境中 .vue 的后缀不能省略,因为vite是根据文件的后缀来决定如何处理该文件的;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有setup属性,则需要手动注册子组件</span></span><br><span class="line"><span class="comment">// export default&#123;</span></span><br><span class="line"><span class="comment">//   components:&#123;Home&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 调用 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Home</span>/&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Composition-组合-API"><a href="#Composition-组合-API" class="headerlink" title="Composition(组合)API"></a>Composition(组合)API</h3><ul><li>作用：将不同根组件的相同部分抽离出来，单独维护，提高代码的复用率</li><li>setup()方法</li><li>在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</li><li>组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</li><li>在setup方法中返回的数据,会自动和组件data中的数据进行合并;</li><li>在setup方法中返回的方法,会自动和methods对象进行合并;</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">&lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(this);  //undefined </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在setup方法中返回的数据,会自动和组件data中的数据进行合并;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在setup方法中返回的方法,会自动和methods对象进行合并;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>:<span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);   <span class="comment">//张三</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：页面展示经<code>h2</code>渲染后的<code>张三</code> <code>20</code>与一个<code>按钮</code>，点击<code>按钮</code>，控制台输出<code>张三</code></p><blockquote><p>那如果直接在setup方法里面进行修改data的操作呢？</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">&lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(this);  //undefined </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在setup方法中返回的数据,会自动和组件data中的数据进行合并;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在setup方法中返回的方法,会自动和methods对象进行合并;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>:<span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&quot;李四&quot;</span>;   <span class="comment">//这里并不是响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);  <span class="comment">//李四</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：点击按钮之后，页面上的值依旧是<code>张三</code>，但是如果打印<code>this.name</code>，输出的是<code>李四</code>；这是因为setup方法里面的data并不是响应式数据</p><blockquote><p>那如何实现响应式数据呢？</p></blockquote><ul><li><p>reactive</p><ul><li><p>作用：帮助我们创建响应式数据对象</p></li><li><p>语法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;  <span class="comment">//在vue包里面按需引入 reactive</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">   <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//创建一个响应式对象    </span></span><br><span class="line">    <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;     <span class="comment">// reactive需要一个对象作为实参;返回一个obj,obj为响应式对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;                <span class="comment">//一定要返回出去(将数据展现到视图上)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>具体代码如下</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//将要实现响应式的data数据写到reactive的对象实参里面;然后直接返回整体的响应式对象obj;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> obj;   <span class="comment">//将数据展现到视图上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">age</span>=<span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：点击<code>按钮</code>，页面上原本的数据<code>张三</code> <code>20</code> 改变成了 <code>李四</code> <code>24</code></p><blockquote><p>那如果需求为：name和age单独维护，而不是包装成一个对象呢；</p></blockquote><ul><li><p>ref</p><ul><li><p>作用：基于基本数据类型(字符串、布尔、数值)创建一个响应式的数据对象；</p></li><li><p>语法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">   <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="comment">//使用ref 基于基本数据类型 创建响应式数据对象</span></span><br><span class="line">       <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">       <span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">20</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">       <span class="comment">//将数据展现到视图上</span></span><br><span class="line">       <span class="keyword">return</span>&#123;</span><br><span class="line">           name,age; </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>具体代码如下</p></blockquote></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">20</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 修改name默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// name.value= &quot;李四&quot;;  //name是个对象 有个value属性(在setup里,我们要使用ref的响应式对象时候 需用到value)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);      <span class="comment">//name是个对象 有个value属性(在setup里,我们要使用ref的响应式对象时候 需用到value)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      name,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      age</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：点击<code>按钮</code>，页面上原本的数据<code>张三</code> <code>20</code> 改变成了 <code>李四</code> <code>24</code></p><blockquote><p>那如果reactive通过解构赋值，是不是也可以完成 name和age的单独维护呢？</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> &#123;name,age&#125; = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">age</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       name,age</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);  <span class="comment">//李四</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：点击<code>按钮</code>，页面上原本的数据<code>张三</code> <code>20</code> 并未发生数据的改变；但是输出的 <code>this.name</code>为<code>李四</code>；</p><blockquote><p>发生如上的原因是因为：reactive创建响应式数据对象，不支持ES6的结构赋值，结构赋值会失去响应式的特性；</p><p>那有什么办法吗？</p></blockquote><ul><li><p>toRefs</p><ul><li><p>作用：可以让reactive创建的响应式数据对象，支持ES6的解构赋值，同时保持响应式的特性；</p></li><li><p>语法：toRefs()；参数为reactive创建的响应式数据对象；(小括号把整个reactive({})包裹起来；)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;toRefs&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//创建响应式对象</span></span><br><span class="line">        <span class="keyword">const</span> &#123;nage,age&#125; = <span class="title function_">toRefs</span>(<span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            name,age</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>具体代码如下</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive,ref,toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> &#123;name,age&#125; = <span class="title function_">toRefs</span>(<span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">age</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       name,age</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">texts</span>: <span class="string">&quot;你好 vue3&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：点击<code>按钮</code>，页面上原本的数据<code>张三</code> <code>20</code> 改变成了 <code>李四</code> <code>24</code></p><ul><li><p>computed计算属性</p><ul><li>vue2</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">   <span class="attr">computed</span>:&#123;</span><br><span class="line">     <span class="comment">//计算属性方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><blockquote><p>使用方式1：(和2一样)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">   <span class="attr">computed</span>:&#123;</span><br><span class="line">     <span class="comment">//计算属性方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式2：(在setup中方式1不可用)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> computedData = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>小案例：使用方式二，完成字符串的反转</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msgReverse&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive,ref,toRefs,computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> &#123;name,age&#125; = <span class="title function_">toRefs</span>(<span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">age</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  使用ref实现对基本类型的响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;hello world&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  实现字符串的翻转</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  computed:创建计算属性方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> msgReverse = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> msg.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//在setup中,我们要使用ref的响应式对象时候 需用到value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       name,age,msg,msgReverse</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：页面上展示<code>hello world</code> <code>dlrow olleh</code></p><ul><li><p>watch侦听器</p><ul><li>vue2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="comment">//侦听器</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><blockquote><p>使用方式1：(和2一样)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="comment">//侦听器</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式2：(在setup中方式1不行)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;watch&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>使用ref创建响应式数据时进行侦听(基本数据类型)</p><p>基本数据类型的监听，在vue3中被ref定义的数据通常在使用时需要在后面加一个.value,但是这里需要监听整个RefImpl对象才能起作用，所以说在写watch时不需要加.value</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;names&quot;&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;names&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive,ref,toRefs,computed,watch &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span><br><span class="line">  // 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    // 使用ref对基本数据类型进行响应式</span><br><span class="line">    const names = ref(&quot;&quot;);  //定义一个names响应式数据,值为空</span><br><span class="line">    // 使用watch 侦听数据的变化; 一共两个参数,第一个参数为监听的对象,第二个参数是个回调函数,函数内置两个参数：</span><br><span class="line">    // value: 系统自动注入,更新之后的最新数据</span><br><span class="line">    // oldValue: 系统自动注入,更新之前的数据</span><br><span class="line">    watch(names,(value,oldValue)=&gt;&#123;</span><br><span class="line">      console.log(value,oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line">      //注意:</span><br><span class="line">      // 基本数据类型的监听，在vue3中被ref定义的数据通常在使用时需要在后面加一个.value,但是这里需要监听整个RefImpl对象才能起作       // 用，所以说在写watch时不需要加.value</span><br><span class="line">    return&#123;</span><br><span class="line">      names,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>现象：在输入框输入 <code>123</code>，打印输出 <code>1</code>，<code>12   1</code>，<code>123   12</code>，即value与oldValue；</p><blockquote><p>如果有两个数据需要监听可以直接写成两个watch函数</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">value,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SUM&quot;</span>,value,oldValue)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(msg,<span class="function">(<span class="params">value,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg&#x27;</span>,value,oldValue);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>或者把监听的对象写成一个数组，这样写的话，oldValue和newValue全都会变成数组</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">value,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value,oldValue)  <span class="comment">//[&#x27;1&#x27;, &#x27;&#x27;] [&#x27;&#x27;, &#x27;&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>使用reactive创建响应式数据时进行侦听(引用数据类型)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 在vue2 中 template里面只能有唯一的一个根标签,一般设置div,在div里面写代码  --&gt;</span><br><span class="line">  &lt;!-- 在vue3中,可以有多个根标签,当然也可以套个div作为唯一根标签 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sum.name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;sum.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, ref, toRefs, computed, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在组件渲染完成之前自动执行,所以不能在setup中通过this访问组件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件相同的代码块放到setup里面,让组件在第一次创建的时候执行里面的逻辑,完成对应的操作;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用watch 侦听数据的变化; 一共三个参数,第一个参数为监听的对象,第二个参数是个回调函数,函数内置两个参数：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// value: 系统自动注入,更新之后的最新数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// oldValue: 系统自动注入,更新之前的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//第三个参数&#123;deep:true&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> sum = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">friend</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">25</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">watch</span>(sum, <span class="function">(<span class="params">value, oldValue</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value, oldValue);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      sum</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：value与oldValue值一样，都是value的值，其实是获取不到oldValue；</p><blockquote><p>那有什么办法获取到oldValue吗？</p><p>如果只对对象中的某个属性进行监听，需要把第一个参数写成函数的形式才会生效</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>sum.<span class="property">name</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>如果要监听对象中的多个属性可以把第一个参数写成数组的形式</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>sum.<span class="property">name</span>,<span class="function">()=&gt;</span>sum.<span class="property">age</span>], <span class="function">(<span class="params">value, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, oldValue);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Composition(组合)API中调用生命周期函数<ul><li>如果要在<code>setup</code>方法中调用组件生命周期钩子函数，在原来的生命周期钩子函数名称前加<code>on</code>关键字，并且保持小驼峰的命名方式</li><li>因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们</li></ul></li></ul><p><img src="https://i.bmp.ovh/imgs/2022/03/a0a0ee3a6c6c8389.png"></p><blockquote><p>那如何在setup中使用钩子函数呢？</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入需要的钩子函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;onMounted, onUpdated&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">//2.参数是个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is mounted&quot;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is updated&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="h渲染函数"><a href="#h渲染函数" class="headerlink" title="h渲染函数"></a>h渲染函数</h3><blockquote><p>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的；</p><p>还有个作用就是渲染组件的；</p></blockquote><ul><li>vue2中</li></ul><blockquote><p>系统会自动在render中注入渲染函数</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">APP</span> <span class="keyword">from</span> <span class="string">&quot;./APP.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">//h 是系统自动注入的渲染函数,不需要引入</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="variable constant_">APP</span>);  <span class="comment">//将组件对象交给h渲染函数,进行视图的展示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);  </span><br></pre></td></tr></table></figure><ul><li>vue3中</li></ul><blockquote><p>需要 手动 按需导入 h渲染函数</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp,h&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;);</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>);  <span class="comment">//将组件对象交给h渲染函数,进行视图的展示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>h创建元素对象(vue2也可以的)</p><p>h(“元素名称”，{属性集合}，[标签文本内容])</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp,h&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// import App from &#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;);</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;h2&quot;</span>,&#123;<span class="attr">style</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;red&quot;</span>&#125;&#125;,<span class="string">&quot;hello Vue3&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><p>现象：界面显示 <code>红色的</code>经<code>h2</code>标签渲染的 <code>hello Vue3</code>；</p><h3 id="Teleport：瞬移组件的位置"><a href="#Teleport：瞬移组件的位置" class="headerlink" title="Teleport：瞬移组件的位置"></a>Teleport：瞬移组件的位置</h3><ul><li>Teleport也是一种组件，他能够将我们的模板移动到DOM中Vue app 之外的其他位置；</li><li>在处理较大的Vue项目时，有逻辑处理组织代码库是很重要的。 但是，当处理某些类型的组件（如模式，通知或提示）时，模板HTML的逻辑可能位于与我们希望渲染元素的位置不同的文件中；</li><li>实际上，在很多时候，与我们的Vue应用程序的DOM完全分开处理时，这些元素的管理要容易得多。 所有这些都是因为处理嵌套组件的位置，<code>z-index</code>和样式可能由于处理其所有父对象的范围而变得棘手；</li><li>例如下面的代码，能够将<code>&lt;child-component name=&quot;John&quot; /&gt;</code>组件传送到<code>#endofbody</code>的标签里去渲染，同时，<code>props</code>参数<code>name=&quot;John&quot;</code>可以正常传递。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=<span class="string">&quot;#endofbody&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">name</span>=<span class="string">&quot;John&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure><ul><li><code>Teleport</code>组件，在代码中能保持原有布局层级、参数传递逻辑，但对应生成的<code>Dom</code>，则传送到了<code>to参数</code>指定的标签；</li><li><code>Teleport</code>主要用于“全屏模式的组件”，比如以下几种：</li></ul><blockquote><p>图片查看全屏显示</p><p>弹框（广告跳转框、提示框）</p><p>对话框（带有表单输入的、带有按钮的）</p></blockquote><blockquote><p>小案例：</p><p>假设我们有一些子组件，我们想在其中触发弹出的通知。 正如刚才所讨论的，如果将通知以完全独立的DOM树渲染，而不是Vue的根<code>#app</code>元素，则更为简单；</p></blockquote><blockquote><p>首先，我们要打开index.html，即Vue中唯一的html文件，在#app同级下，创建一个div；</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myTelePort&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后，将我们的通知组件放到新建的#myTelePort里面；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;boxBtn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showNotification&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;#myTelePort&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;showMessage&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isOpen&quot;</span>&gt;</span>Teleport 消息~~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 创建一个响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> isOpen = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(isOpen)  ref创建的响应式数据 是一个RefImpl对象  在setup中需要操作其 .value的属性;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> hideNotification;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 创建方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">showNotification</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      isOpen.<span class="property">value</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">clearTimeout</span>(hideNotification);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      hideNotification = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        isOpen.<span class="property">value</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      isOpen,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      showNotification</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.box</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">500px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">400px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#e1e97bc7</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.boxBtn</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: azure;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">10%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">left</span>: <span class="number">10%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.showMessage</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">240px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: aquamarine;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：</p><blockquote><p>在此代码段中，当按下按钮时，将渲染2秒钟的通知。 但是，我们的主要目标是使用Teleport获取通知以在我们的Vue应用程序外部渲染。</p><p>由于我们在<code>#myTelePort</code>中传递了代码，因此 Vue会找到包含在<code>index.html</code>中的<code>#myTelePort</code> div，它会把 Teleport 内的所有代码渲染到该<code>div</code>中。</p></blockquote><p>效果图：</p><p><img src="https://i.bmp.ovh/imgs/2022/03/1b5ed2554a135a25.png" alt="Teleport"></p><h3 id="全局组件注册方式"><a href="#全局组件注册方式" class="headerlink" title="全局组件注册方式"></a>全局组件注册方式</h3><ul><li>vue2注册全局组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;组件名称&quot;</span>,&#123;</span><br><span class="line">    <span class="comment">/*组件对象*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>vue3注册全局组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">//创建实例对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>();</span><br><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;组件名称&quot;</span>,&#123;</span><br><span class="line">    <span class="comment">/*组件对象*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>具体代码如下：</p><p>入口文件  main.js中</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;);  //下面分两步创建和挂载了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/home.vue&quot;</span>;  <span class="comment">//引入需要全局注册的组件</span></span><br><span class="line"><span class="comment">//创建vue实例对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">//挂载前注册全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;myHome&quot;</span>,<span class="title class_">Home</span>);</span><br><span class="line"><span class="comment">// 挂载实例</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>根组件  App.vue中</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 不需要引用,直接调用全局注册的 myHome --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">myHome</span>/&gt;</span>   </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：不需要在<code>App.vue</code>中 <code>引入</code>，<code>注册</code>，<code>调用</code>三部曲了；直接调用在<code>入口文件</code>中全局注册的组件的名字即可；</p><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><ul><li>通过函数方式定义的组件</li><li>特点：函数组件默认没有状态数据和生命周期</li><li>语法：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;h&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> funComponent = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//返回组件的视图</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;h1&quot;</span>,&#123;&#125;,<span class="string">&#x27;函数组件&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建一个js文件，这里为 functionComponent.js </p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;h&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">FunctionCompon</span>(<span class="params">props</span>)&#123;  <span class="comment">//props是形参,可以接受调用时候传的参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;h1&quot;</span>,&#123;<span class="attr">style</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;red&quot;</span>&#125;&#125;,props.<span class="property">msg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>App.vue 根组件里</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 引入函数式组件  setup自动注册</span></span><br><span class="line"><span class="keyword">import</span> funCompon <span class="keyword">from</span> <span class="string">&quot;./components/functionComponent.js&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 调用函数式组件 , 可以传参 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">funCompon</span> <span class="attr">msg</span>=<span class="string">&quot;函数式组件传递数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span>   </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现象：页面展示经<code>h1</code>渲染的<code>红色</code>的<code>函数式组件传递数据</code>字样；</p><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><ul><li>vue2中</li></ul><blockquote><p>普通写法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> =(<span class="params"></span>)=&gt;<span class="keyword">import</span>(<span class="string">&quot;./components/home.vue&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>高阶写法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncModal = &#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Modal.vue&#x27;</span>),  <span class="comment">//vue2中通过component属性节点指定目标组件</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>, <span class="comment">//延时时常</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>, <span class="comment">//超时时间</span></span><br><span class="line">  <span class="attr">error</span>: <span class="title class_">ErrorComponent</span>, <span class="comment">//错误处理组件</span></span><br><span class="line">  <span class="attr">loading</span>: <span class="title class_">LoadingComponent</span> <span class="comment">//加载中的组件(可以加载个动画啥的)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vue3中</li></ul><blockquote><p>普通写法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">defineSyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./components/home.vue&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>高阶写法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/ErrorComponent.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoadingComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/LoadingComponent.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncModalWithOptions = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Modal.vue&#x27;</span>),   <span class="comment">//vue2中通过loader属性节点指定目标组件</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="attr">loadingComponent</span>: <span class="title class_">LoadingComponent</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在App.vue 根组件里面</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 异步导入 setup自动注册</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单写法</span></span><br><span class="line"><span class="comment">// const Home = defineAsyncComponent(()=&gt;import(&quot;./components/home.vue&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">    <span class="attr">loader</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./components/home.vue&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 调用 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span>   </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-for中使用ref属性"><a href="#v-for中使用ref属性" class="headerlink" title="v-for中使用ref属性"></a>v-for中使用ref属性</h3><blockquote><p>通过ref来获取dom元素</p><p>当ref和v-for一起使用的时候，得到的ref为一个数组</p></blockquote><ul><li>vue2中</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;nodes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">nodes</span>);  <span class="comment">//[p, p, p, p, p]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>缺点： Vue 2 中，在 v-for 语句中使用ref属性时，会生成refs数组插入$refs属性中。当存在嵌套的 v-for 时，这种行为会变得不明确且效率低下。</p></blockquote><ul><li>vue3</li></ul><blockquote><p>在 v-for 语句中使用ref属性 将不再会自动在$refs中创建数组。而是，将 ref 绑定到一个 function 中，在 function 中可以灵活处理ref。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:ref</span>=<span class="string">&quot;list&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>选择式API</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- vue3 ref前面有一个 :  --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;getRefList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">refList</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// :ref 所以后面的是变量,变量名和方法名保持一致 ;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  参数el:系统自动注入的参数,子元素的元素对象;(当然取啥名字都可以)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getRefList</span>(<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">refList</span>.<span class="title function_">push</span>(el);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refList</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//在组件更新之前,清空数组中宏的元素,否则会越来越多</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">refList</span> = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>组合式API</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 这里的ref前面有一个 :  --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;getRefList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;ref,onBeforeUpdate&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> refList = <span class="title function_">ref</span>([]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(refList);  //RefImpl对象,有value属性;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> <span class="title function_">getRefList</span> = (<span class="params">el</span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            refList.<span class="property">value</span>.<span class="title function_">push</span>(el);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(refList)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            refList.<span class="property">value</span>=[];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            refList,getRefList,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-for与v-if优先级"><a href="#v-for与v-if优先级" class="headerlink" title="v-for与v-if优先级"></a>v-for与v-if优先级</h3><ul><li>vue2</li></ul><blockquote><p>v-for与v-if指令同时应用于同一个元素之上，v-for指令优先级比v-if高；即 v-for指令先执行，v-if指令后执行；</p><p>vue2 简单小案例：99乘法表</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(rowItem,rowIndex) in row&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;rowIndex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- v-for渲染了之后,v-if才开始,所以会形成正三角的效果 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-for</span>=<span class="string">&quot;(colItem,colIndex) in col&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:key</span>=<span class="string">&quot;colIndex&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">v-if</span>=<span class="string">&quot;colItem&lt;=rowItem&quot;</span>   </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span>&#123;&#123;`$&#123;colItem&#125;*$&#123;rowItem&#125;=$&#123;colItem*rowItem&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>`&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">row</span>: <span class="number">9</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">col</span>: <span class="number">9</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><blockquote><p>vue3中的优先级与vue2相反，即v-if的优先级比v-for高；</p></blockquote><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>el：指令所绑定的元素，可以直接操作DOM。</li><li>binding：是一个对象，包含该指令的所有信息。</li><li>有自定义指令中的生命周期钩子函数</li></ul><blockquote><p>什么时候需要使用？(用的其实比较少)（有局部注册和全局注册，因为用的少，所以只说全局注册(main.js)的情况）</p><p>需要对少量的普通 DOM 元素进行底层操作，这时候就会用到自定义指令</p><p>但对于需要操作大量DOM元素或者大变动时候，推荐使用组件，而不是指令</p></blockquote><ul><li>vue2</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;指令名称&quot;</span>,<span class="keyword">function</span>(<span class="params">el,binding,vnode</span>)&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>实现高亮效果</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-highlight=<span class="string">&quot;&#x27;yellow&#x27;&quot;</span>&gt;以亮黄色高亮显示此文本&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;highlight&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">background</span> = binding.<span class="property">value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125;  <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">createApp</span>();</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;指令名称&quot;</span>,<span class="keyword">function</span>(<span class="params">el,binding,vnode</span>)&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>实现高亮效果</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 自定义指令 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-highLight</span>=<span class="string">&quot;&#x27;yellow&#x27;&quot;</span>&gt;</span>自定义指令 高亮效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册  自定义指令(入门文件 main.js)</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;); </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;highLight&quot;</span>,&#123;</span><br><span class="line">    <span class="title function_">beforeMount</span>(<span class="params">el,binding,vnode</span>)&#123;</span><br><span class="line">        el.<span class="property">style</span>.<span class="property">background</span>= binding.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="app-config-globalProperties全局属性"><a href="#app-config-globalProperties全局属性" class="headerlink" title="app.config.globalProperties全局属性"></a>app.config.globalProperties全局属性</h3><ul><li>vue2</li></ul><blockquote><p>vue2中给vue注册全局功能使用的是<code>Vue.prototype</code>，这样每一个vue组件都可以访问，因为每一个组件都是Vue的实例对象；</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js 入口文件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$version</span> = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"><span class="comment">//任意vue组件   使用全局属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$version</span>)</span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><blockquote><p>Vue3.x已经不支持直接Vue.prototype.$xxx &#x3D;xxx这种方式来挂载全局对象，这是由于globalVue不再是构造函数，因此不再支持该构造函数</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口文件  声明</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">// Vue3全局挂载名称</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$vueName</span> = <span class="string">&#x27;Vue3全局挂载名称&#x27;</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>组合式API</code>获取方法：通过<code> getCurrentInstance</code> 获取<code>proxy</code>，再获取全局挂载的实例；</p><p>因为setup没有this，若按照<code>选择式API</code>，可直接<code>this.$globalNames</code>，这里的<code>this</code>是一个<code>Proxy</code>对象</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">$vueName</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h2><h3 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h3><ul><li>vue2</li></ul><blockquote><p>获取子组件的实例，在vue2中，除了<code>$refs</code>方法，还有<code>$children</code>；</p></blockquote><blockquote><p>children.vue</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">title</span>:<span class="string">&quot;this is children&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">changeTitle</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">title</span>=<span class="string">&quot;vue2中的$children获取子组件的实例&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>parent.vue</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is parent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChild&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">vChild</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> vChild <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    vChild</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getChild</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="title function_">changeTitle</span>();  <span class="comment">//直接通过 this.$children[x]来获取子组件的实例 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>);  <span class="comment">//得到的是一个数组;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><blockquote><p>在 3.x 中，<code>$children</code> property 已被移除，且不再支持。如果你需要访问子组件实例，我们建议使用 <a href="https://v3.cn.vuejs.org/guide/component-template-refs.html#%E6%A8%A1%E6%9D%BF%E5%BC%95%E7%94%A8">$refs</a>。</p></blockquote><h3 id="filter过滤器"><a href="#filter过滤器" class="headerlink" title="filter过滤器"></a>filter过滤器</h3><ul><li>vue2</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;context|doubleFilter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">context</span>:<span class="number">3.1415926</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//局部注册</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">filters</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">doubleFilter</span>(<span class="params">val</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> val.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>vue3</li></ul><blockquote><p>虽然这看起来很方便，但它需要一个自定义语法，打破了大括号内的表达式“只是 JavaScript”的假设，这不仅有学习成本，而且有实现成本。</p><p>我们建议用计算属性或方法代替过滤器，而不是使用过滤器。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;doubleContext()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;computedContext&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref,computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> context = <span class="title function_">ref</span>(<span class="number">3.1415926</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// method1:方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">doubleContext</span> =(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> context.<span class="property">value</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// method2:计算属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> computedContext= <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> context.<span class="property">value</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      context,doubleContext,computedContext</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>以上两种方法都可以实现过滤器效果，但是批量使用的话，好像得批量注册(个人观点)</p></blockquote><h3 id="vm-set-Vue-set"><a href="#vm-set-Vue-set" class="headerlink" title="vm.$set(Vue.set)"></a>vm.$set(Vue.set)</h3><h3 id="vm-on"><a href="#vm-on" class="headerlink" title="vm.$on"></a>vm.$on</h3><blockquote><p>vue2中，通过<code>Eventbus</code>，<code>$emit</code>，<code>$on</code>来实现兄弟组件间传值，在vue3中，<code>$on</code>被移除，如果需要继续使用此功能改为使用第三方<code>mitt</code>库(见下方参考文献)</p></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.cnblogs.com/cinlap/p/14627459.html">Vue3 - 环境安装和启动配置</a></p><p><a href="https://www.jianshu.com/p/ac93013454d4">Vue3-使用多个根标签报错</a></p><p><a href="https://blog.csdn.net/qq_51231294/article/details/121764604">Vue3中的watch</a></p><p><a href="https://blog.csdn.net/qq_44472790/article/details/120620028?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3.pc_relevant_aa&utm_relevant_index=6">Vue3的ref和reactive对比(总结)</a></p><p><a href="https://blog.csdn.net/u010059669/article/details/112287552?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1">ref、reactive、toRef、toRefs的区别</a></p><p><a href="https://blog.csdn.net/astonishqft/article/details/82899965">ES6拓展运算符</a></p><p><a href="https://blog.csdn.net/qq_42778001/article/details/95959531?ops_request_misc=&request_id=&biz_id=102&utm_term=VUE%20h%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-95959531.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&spm=1018.2226.3001.4187">Vue中的h函数</a></p><p><a href="https://blog.csdn.net/qq_35324453/article/details/80961128">render: h &#x3D;&gt; h(App)解析</a></p><p><a href="https://juejin.cn/post/7068629718446112805">Vue的渲染函数render&amp;h</a></p><p><a href="https://blog.csdn.net/qq449245884/article/details/115365645?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164740866216780255290728%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164740866216780255290728&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-115365645.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&utm_term=vue3+teleport&spm=1018.2226.3001.4187">Vue3 Teleport 简介，请过目，这个是真的好用！</a></p><p><a href="https://blog.csdn.net/qq_32886245/article/details/120022863?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164740866216780255290728%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164740866216780255290728&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120022863.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&utm_term=vue3+teleport&spm=1018.2226.3001.4187">Vue3 Teleport的应用示例</a></p><p><a href="https://blog.csdn.net/weixin_43953518/article/details/109640198?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164740866216780255290728%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164740866216780255290728&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-109640198.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&utm_term=vue3+teleport&spm=1018.2226.3001.4187">Vue3新特性之Teleport介绍</a></p><p><a href="https://blog.csdn.net/weixin_43880397/article/details/121370053?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=2">Vue3 学习笔记 (三)——Vue3 自定义指令</a></p><p><a href="https://blog.csdn.net/qq_30040899/article/details/117032231?ops_request_misc=&request_id=&biz_id=102&utm_term=vue%20%20$attrs&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-117032231.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&spm=1018.2226.3001.4187">Vue2$attrs组件传值</a></p><p><a href="https://blog.csdn.net/weixin_41977619/article/details/116595972?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-8.pc_relevant_antiscanv2&spm=1001.2101.3001.4242.5&utm_relevant_index=11">Vue3 全局挂载对象和方法</a></p><p><a href="https://blog.csdn.net/m0_50864962/article/details/122965673?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164760104816780357214622%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164760104816780357214622&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-122965673.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&utm_term=vue3+mitt&spm=1018.2226.3001.4187">Vue3兄弟组件传值方式mitt.js</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts</title>
      <link href="/articles/facd74f4.html"/>
      <url>/articles/facd74f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><p>一个基于 JavaScript 的开源可视化图表库。</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init -y   <span class="comment">//初始化项目 </span></span><br><span class="line">npm install echarts --save  <span class="comment">//下载echarts</span></span><br><span class="line"><span class="comment">//ps:原生是不能用npm的;npm导入的得是带有打包工具的,比如webpack;</span></span><br><span class="line"><span class="comment">//原生可以在官网--&gt;入门篇--&gt;获取Echarts--&gt;从 CDN 获取--&gt;最上面的/dist/echarts.min.js--&gt;打开之后右键--&gt;另存为</span></span><br><span class="line">&lt;script src=<span class="string">&quot;./echarts.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>参考echarts官网上的快速上手</p><ol><li>引入js文件</li><li>创建一个div来做dom容器；容器必须设置宽高，不然不会出来；</li><li>逻辑处理</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px;height:500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./echarts.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.初始化echarts实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// var myChart = echarts.init(document.getElementById(&#x27;box&#x27;),&quot;dark&quot;);  暗黑主题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.设置绘图的配置项和数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userName=[<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;阿离&quot;</span>,<span class="string">&quot;孙尚香&quot;</span>,<span class="string">&quot;虞姬&quot;</span>,<span class="string">&quot;马可&quot;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userScore = [<span class="number">100</span>,<span class="number">120</span>,<span class="number">99</span>,<span class="number">89</span>,<span class="number">55</span>,<span class="number">97</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> options =&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//配置标题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>:<span class="string">&quot;学员成绩表鸭&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//配置x轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">xAxis</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;category&quot;</span>, <span class="comment">//category(类目名称),value(数值)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:userName   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置y轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">yAxis</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置系列列表(这个是数组对象)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">series</span>:[&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:userScore</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.绘制图形</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myChart.<span class="title function_">setOption</span>(options);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="series-配置系列列表"><a href="#series-配置系列列表" class="headerlink" title="series 配置系列列表"></a>series 配置系列列表</h2><p><code>echarts官网--&gt;文档--&gt;配置项手册</code>；其实大部分的图只是series差别比较大，别的几乎一样；</p><ul><li>是一个数组对象   每一个对象{}里面就是一系列数据，都有着自己的data，type…</li><li>label设置提示文本</li><li>itemStyle设置柱子的风格</li><li>markPoint与markLine 设置最大值，最小值与平均值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速上手中,仅修改series配置列表,配置如下:</span></span><br><span class="line"><span class="comment">// 配置系列列表(这个是数组对象)</span></span><br><span class="line"><span class="attr">series</span>:[&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:userScore,</span><br><span class="line">    <span class="comment">//y轴的提示文本</span></span><br><span class="line">    <span class="attr">label</span>:&#123;</span><br><span class="line">        <span class="attr">show</span>:<span class="literal">true</span>,  <span class="comment">//y轴的数据会展示在每个轴的中心位置(默认位置)</span></span><br><span class="line">        <span class="attr">position</span>:<span class="string">&quot;top&quot;</span>,  <span class="comment">//y轴数据展示在顶部</span></span><br><span class="line">        <span class="attr">rotate</span>:<span class="number">40</span>, <span class="comment">//y轴数据 逆时针旋转40度, -40 就是顺时针旋转</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">barWidth</span>:<span class="number">20</span>, <span class="comment">//设置柱状的宽度</span></span><br><span class="line">    <span class="attr">itemStyle</span>:&#123; </span><br><span class="line">        <span class="attr">borderRadius</span>:[<span class="number">20</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="comment">//borderRadius (顺时针左上，右上，右下，左下)</span></span><br><span class="line">        <span class="comment">// color:&#x27;green&#x27;  //一种颜色</span></span><br><span class="line">        <span class="attr">color</span>: <span class="keyword">new</span> echarts.<span class="property">graphic</span>.<span class="title class_">LinearGradient</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,[  <span class="comment">//渐变色</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">offset</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">offset</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>:<span class="string">&#x27;orange&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ])</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">markPoint</span>:&#123;  <span class="comment">//设置标记点 max min</span></span><br><span class="line">        <span class="attr">data</span>:[</span><br><span class="line">            &#123;<span class="attr">type</span>:<span class="string">&#x27;max&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;最大值&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">type</span>:<span class="string">&#x27;min&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;最小值&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">markLine</span>:&#123;  <span class="comment">//设置标记线  average</span></span><br><span class="line">        <span class="attr">data</span>:[</span><br><span class="line">            &#123;<span class="attr">type</span>:<span class="string">&#x27;average&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;平均值&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="grid-配置网络坐标系"><a href="#grid-配置网络坐标系" class="headerlink" title="grid 配置网络坐标系"></a>grid 配置网络坐标系</h2><p>用来调整坐标系的位置。</p><p><strong>Tip：top、bottom、left、right 在哪个里面都可以用的，用来调整位置；</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置网络坐标系</span></span><br><span class="line"><span class="attr">grid</span>:&#123;</span><br><span class="line">    <span class="attr">show</span>:<span class="literal">true</span>,  <span class="comment">//展示</span></span><br><span class="line">       <span class="attr">top</span>:<span class="string">&quot;30%&quot;</span>,  <span class="comment">//grid 组件离容器上侧的距离</span></span><br><span class="line">       <span class="attr">left</span>:<span class="string">&quot;30%&quot;</span>, <span class="comment">//grid 组件离容器左侧的距离</span></span><br><span class="line">       containLabel :<span class="literal">true</span>, <span class="comment">//grid 区域是否包含坐标轴的刻度标签</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="tooltip-配置提示语"><a href="#tooltip-配置提示语" class="headerlink" title="tooltip 配置提示语"></a>tooltip 配置提示语</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置提示语</span></span><br><span class="line"><span class="attr">tooltip</span>:&#123;</span><br><span class="line">   <span class="attr">show</span>:<span class="literal">true</span>,</span><br><span class="line">   <span class="attr">trigger</span>:<span class="string">&#x27;axis&#x27;</span>,  <span class="comment">//触发提示类型 item (默认) axis (中间有条细线)</span></span><br><span class="line">   <span class="attr">axisPointer</span>:&#123; <span class="comment">// 触发动画效果(阴影,xy轴交叉坐标)  必须trigger为axis才有动画效果</span></span><br><span class="line">   <span class="attr">type</span>:<span class="string">&quot;shadow&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="toolbox-工具栏"><a href="#toolbox-工具栏" class="headerlink" title="toolbox 工具栏"></a>toolbox 工具栏</h2><p>内置有<strong>导出图片</strong>，<strong>数据视图</strong>，<strong>动态类型切换</strong>，<strong>数据区域缩放</strong>，<strong>重置</strong>五个工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工具箱</span></span><br><span class="line"><span class="attr">toolbox</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">feature</span>: &#123; <span class="comment">//各工具配置项</span></span><br><span class="line">    <span class="attr">saveAsImage</span>: &#123;&#125;, <span class="comment">//保存图片</span></span><br><span class="line">    <span class="attr">restore</span>: &#123;&#125;, <span class="comment">//配置项还原</span></span><br><span class="line">    <span class="attr">dataView</span>: &#123;&#125;, <span class="comment">//编辑后可以动态更新</span></span><br><span class="line">    <span class="attr">dataZoom</span>: &#123;&#125;, <span class="comment">//数据区域缩放</span></span><br><span class="line">    <span class="attr">magicType</span>: &#123;  <span class="comment">//多种类型切换</span></span><br><span class="line">    <span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="legend-图例组件"><a href="#legend-图例组件" class="headerlink" title="legend 图例组件"></a>legend 图例组件</h2><p>图例组件展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置系列列表(这个是数组对象)</span></span><br><span class="line"><span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;成绩&quot;</span>, <span class="comment">//必须有</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: userScore,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;身高&quot;</span>,  <span class="comment">//必须有</span></span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:userHeight</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图例组件</span></span><br><span class="line"><span class="attr">legend</span>:&#123;</span><br><span class="line">    <span class="attr">show</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">icon</span>:<span class="string">&quot;circle&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致效果图如下图所示：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656841820917echarts.png" alt="效果图"></p><p>以上内容都可以在<code>echarts官网--&gt;文档--&gt;配置项手册</code>中找到；</p><h2 id="Echarts事件"><a href="#Echarts事件" class="headerlink" title="Echarts事件"></a>Echarts事件</h2><p>以下内容都可以在<code>echarts官网--&gt;文档--&gt;API</code>中找到；</p><ul><li>监听用户的<strong>全部</strong>事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.监听用户的点击事件</span></span><br><span class="line"><span class="comment">//全部监听</span></span><br><span class="line">myChart.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="function">(<span class="params">msg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>监听用户的<strong>部分</strong>事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选 &#123;seriesName:&quot;成绩&quot;&#125;的触发点击事件</span></span><br><span class="line">myChart.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,&#123;<span class="attr">seriesName</span>:<span class="string">&quot;成绩&quot;</span>&#125;,<span class="function">(<span class="params">msg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>移除监听事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.2 移除监听事件</span></span><br><span class="line">myChart.<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>添加<strong>加载中</strong>提示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>), <span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">myChart.<span class="title function_">showLoading</span>();  <span class="comment">//在初始化实例下添加 showLoading  API</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.绘制图形</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    myChart.<span class="title function_">setOption</span>(options);</span><br><span class="line">    myChart.<span class="title function_">hideLoading</span>();</span><br><span class="line">&#125;,<span class="number">1500</span>); <span class="comment">//设置定时器,让图形1500ms后加载,并隐藏加载提示</span></span><br></pre></td></tr></table></figure><ul><li>Echarts随窗口大小改变(若box固定宽高，则是改变不了的)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.改变大小</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  myChart.<span class="title function_">resize</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="以上内容全部代码"><a href="#以上内容全部代码" class="headerlink" title="以上内容全部代码"></a>以上内容全部代码</h2><ul><li>css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./echarts.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.初始化echarts实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>), <span class="string">&#x27;dark&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myChart.<span class="title function_">showLoading</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// var myChart = echarts.init(document.getElementById(&#x27;box&#x27;),&quot;dark&quot;);  暗黑主题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.设置绘图的配置项和数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userName = [<span class="string">&quot;李白&quot;</span>, <span class="string">&quot;阿离&quot;</span>, <span class="string">&quot;孙尚香&quot;</span>, <span class="string">&quot;虞姬&quot;</span>, <span class="string">&quot;马可&quot;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userScore = [<span class="number">100</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">89</span>, <span class="number">55</span>, <span class="number">97</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userHeight = [<span class="number">176</span>, <span class="number">163</span>, <span class="number">166</span>, <span class="number">178</span>, <span class="number">176</span>, <span class="number">187</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> options = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//配置标题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">&quot;学员成绩表鸭&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">top</span>: <span class="string">&quot;3%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">left</span>: <span class="string">&quot;3%&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//配置x轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&quot;姓名&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>, <span class="comment">//category(类目名称),value(数值)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: userName</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置y轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">yAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&quot;分数&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 图例组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">legend</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">icon</span>: <span class="string">&quot;circle&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">top</span>: <span class="string">&quot;3%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 工具箱</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">toolbox</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">feature</span>: &#123; <span class="comment">//各工具配置项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">saveAsImage</span>: &#123;&#125;, <span class="comment">//保存图片</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">restore</span>: &#123;&#125;, <span class="comment">//配置项还原</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">dataView</span>: &#123;&#125;, <span class="comment">//编辑后可以动态更新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">dataZoom</span>: &#123;&#125;, <span class="comment">//数据区域缩放</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">magicType</span>: &#123; <span class="comment">//多种类型切换</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">top</span>: <span class="string">&quot;3%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">right</span>: <span class="string">&quot;3%&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置提示语</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">tooltip</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>, <span class="comment">//触发提示类型 item (默认) axis (中间有条细线)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">axisPointer</span>: &#123; <span class="comment">// 触发动画效果(阴影,xy轴交叉坐标)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&quot;shadow&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置网络坐标系(用来调整坐标系的位置的)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">grid</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//展示</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">top</span>: <span class="string">&quot;10%&quot;</span>, <span class="comment">//grid 组件离容器上侧的距离</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">left</span>: <span class="string">&quot;10%&quot;</span>, <span class="comment">//grid 组件离容器左侧的距离</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">containLabel</span>: <span class="literal">true</span>, <span class="comment">//grid 区域是否包含坐标轴的刻度标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置系列列表(这个是数组对象)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">series</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&quot;成绩&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: userScore,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//y轴的提示文本</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">label</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//y轴的数据会展示在每个轴的中心位置(默认位置)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">position</span>: <span class="string">&quot;top&quot;</span>, <span class="comment">//y轴数据展示在顶部</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">rotate</span>: <span class="number">40</span>, <span class="comment">//y轴数据 逆时针旋转40度, -40 就是顺时针旋转</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// barWidth: 20, //设置柱状的宽度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">itemStyle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">borderRadius</span>: [<span class="number">20</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="comment">//(顺时针左上，右上，右下，左下)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// color:&#x27;green&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">color</span>: <span class="keyword">new</span> echarts.<span class="property">graphic</span>.<span class="title class_">LinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">offset</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">offset</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">color</span>: <span class="string">&#x27;orange&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    ])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">markPoint</span>: &#123; <span class="comment">//设置标记点 max min</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">data</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">markLine</span>: &#123; <span class="comment">//设置标记线  average</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">data</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&quot;身高&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: userHeight</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.绘制图形</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        myChart.<span class="title function_">setOption</span>(options);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        myChart.<span class="title function_">hideLoading</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4.监听用户的点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//全部监听</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// myChart.on(&quot;click&quot;, (msg) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     console.log(msg);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 筛选 &#123;seriesName:&quot;成绩&quot;&#125;的触发点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myChart.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">seriesName</span>: <span class="string">&quot;成绩&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4.2 移除监听事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myChart.<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 5.改变大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        myChart.<span class="title function_">resize</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="散点（气泡）图"><a href="#散点（气泡）图" class="headerlink" title="散点（气泡）图"></a>散点（气泡）图</h2><p>身高体重根据bmi，超重的大一点，为红色；不超重的小一点，为绿色；</p><ul><li>css</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attr">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">#box&#123;</span><br><span class="line">    <span class="attr">width</span>: 100vw;</span><br><span class="line">    <span class="attr">height</span>: 100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./echarts.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.初始化Echarts实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>),<span class="string">&#x27;dark&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.设置绘图的数据和配置项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 模拟数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> arrs = [&#123;<span class="attr">height</span>:<span class="number">172</span>,<span class="attr">weight</span>:<span class="number">172</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">168</span>,<span class="attr">weight</span>:<span class="number">152</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">156</span>,<span class="attr">weight</span>:<span class="number">152</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">166</span>,<span class="attr">weight</span>:<span class="number">112</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ,&#123;<span class="attr">height</span>:<span class="number">155</span>,<span class="attr">weight</span>:<span class="number">132</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">148</span>,<span class="attr">weight</span>:<span class="number">113</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">172</span>,<span class="attr">weight</span>:<span class="number">162</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">171</span>,<span class="attr">weight</span>:<span class="number">132</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">173</span>,<span class="attr">weight</span>:<span class="number">132</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//通过官网的示例可得知为 [[x,y],[x,y],[x,y]] 格式的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> allData = arrs.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> [item.<span class="property">height</span>,item.<span class="property">weight</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> options=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置标题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>:<span class="string">&quot;身高体重图&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">textStyle</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">color</span>:<span class="string">&quot;orange&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">top</span>:<span class="string">&quot;5%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">left</span>:<span class="string">&quot;5%&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置X轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">xAxis</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>:<span class="string">&quot;身高&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">scale</span>:<span class="literal">true</span>,   <span class="comment">//坐标不会强制包含0刻度,只在数值轴中（type: &#x27;value&#x27;）有效</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置y轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">yAxis</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>:<span class="string">&quot;体重&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>:<span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">scale</span>:<span class="literal">true</span>,  <span class="comment">//坐标不会强制包含0刻度,只在数值轴中（type: &#x27;value&#x27;）有效</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 配置网格坐标系</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">grid</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">show</span>:<span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">top</span>:<span class="string">&quot;15%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">left</span>:<span class="string">&quot;10%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">containLabel</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//配置系列</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">series</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&#x27;effectScatter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>:allData,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">showEffectOn</span>:<span class="string">&#x27;emphasis&#x27;</span>,  <span class="comment">//配置何时显示特效  emphasis 鼠标移入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">rippleEffect</span>:&#123;  <span class="comment">//设置波纹</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">scale</span>:<span class="number">5</span>   <span class="comment">//波纹大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 设置标记的大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">symbolSize</span>:<span class="keyword">function</span>(<span class="params">info</span>)&#123;   <span class="comment">//因为有条件来区分,所以使用的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// console.log(info)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// bmi = 体重kg/(身高m*身高m)  大于28,代表肥胖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> bmi = info[<span class="number">1</span>]/<span class="number">2</span>/(info[<span class="number">0</span>]/<span class="number">100</span>*info[<span class="number">0</span>]/<span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span>(bmi&gt;<span class="number">28</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">return</span> <span class="number">12</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">return</span> <span class="number">8</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//设置标记的颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">itemStyle</span>:&#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">color</span>:<span class="keyword">function</span>(<span class="params">datas</span>)&#123;   <span class="comment">//因为有条件来区分,所以使用的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// console.log(info)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> newDatas = datas.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> bmi = newDatas[<span class="number">1</span>]/<span class="number">2</span>/(newDatas[<span class="number">0</span>]/<span class="number">100</span>*newDatas[<span class="number">0</span>]/<span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span>(bmi&gt;<span class="number">28</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">return</span> <span class="string">&quot;red&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">return</span> <span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.展示</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myChart.<span class="title function_">setOption</span>(options);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>大致效果图如下图所示：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656841907919echarts2.png" alt="图例"></p><h1 id="在vue中使用Echarts"><a href="#在vue中使用Echarts" class="headerlink" title="在vue中使用Echarts"></a>在vue中使用Echarts</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>下载：<code>npm install echarts</code></li><li>在<code>main.js</code>入口文件里引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$echarts</span> = echarts; <span class="comment">//挂载到原型上</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">myChart</span> = <span class="variable language_">this</span>.<span class="property">$echarts</span>.<span class="title function_">init</span>(</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><h2 id="获取Echarts的base64地址"><a href="#获取Echarts的base64地址" class="headerlink" title="获取Echarts的base64地址"></a>获取Echarts的base64地址</h2><blockquote><p>通过官网的<code>getDataURL</code>来获取绘制图像的地址</p></blockquote><p>注意事项：如果在mounted 时候就要获取base64地址会出现如下情况：</p><ul><li>执行getDataURL之前，ECharts的option必须设置好，否则图片出现空白(只有坐标系,没有数据)</li></ul><blockquote><p>把getDataURL这个方法理解成为是一个相机，而你的 展示的图表是一个人在摆姿态。也就是  当照相机  按下快门的一瞬间，你这个人  姿态还没有摆好就已经被拍照了  那么自然 洗出来的 图片就没有效果了</p></blockquote><p>期望的：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsExport.png" alt="期望的"></p><p>通过base64地址,在新的tab页展现的：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsBase64.png" alt="实际上"></p><p>解决方法</p><ul><li>延迟 相机的 拍照时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">myChart</span>.<span class="title function_">setOption</span>(option);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">echartsBase64</span> = <span class="variable language_">this</span>.<span class="property">myChart</span>.<span class="title function_">getDataURL</span>(&#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">echartsBase64</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li>取消 图表里面动画效果，就是在 option 中添加一个  animation: false 属性 就可以解决这个问题</li></ul><blockquote><p>我们这次是通过点击按钮获取base64地址，所以不会出现此上提及的问题；但是点击的时候需要通过Echarts的getDataURL来获取地址，所以我将Echarts存到了data里面</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div id=&quot;meetingRoomTrend&quot; style=&quot;width: 500px; height: 500px&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;getBase64&quot;&gt;获取EchartsBase64&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;exportEcharts&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      myChart: &quot;&quot;,</span><br><span class="line">      echartsBase64: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    meetingChart() &#123;</span><br><span class="line">      this.myChart = this.$echarts.init(</span><br><span class="line">        document.getElementById(&quot;meetingRoomTrend&quot;)</span><br><span class="line">      );</span><br><span class="line">      //配置图表</span><br><span class="line">      var option = &#123;</span><br><span class="line">        // animation: false,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          trigger: &quot;axis&quot;,</span><br><span class="line">          axisPointer: &#123;</span><br><span class="line">            type: &quot;shadow&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          show: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 工具箱</span><br><span class="line">        toolbox: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          feature: &#123;</span><br><span class="line">            //各工具配置项</span><br><span class="line">            saveAsImage: &#123; show: true &#125;, //保存图片</span><br><span class="line">            restore: &#123;&#125;, //配置项还原</span><br><span class="line">            dataView: &#123;&#125;, //编辑后可以动态更新</span><br><span class="line">            dataZoom: &#123;&#125;, //数据区域缩放</span><br><span class="line">            magicType: &#123;</span><br><span class="line">              //多种类型切换</span><br><span class="line">              type: [&quot;line&quot;, &quot;bar&quot;],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">          left: &quot;3%&quot;,</span><br><span class="line">          right: &quot;4%&quot;,</span><br><span class="line">          bottom: &quot;3%&quot;,</span><br><span class="line">          containLabel: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &quot;value&quot;,</span><br><span class="line">          boundaryGap: [0, 0.01],</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &quot;category&quot;,</span><br><span class="line">          data: [&quot;会议室01&quot;, &quot;会议室02&quot;, &quot;会议室03&quot;, &quot;会议室04&quot;, &quot;会议室05&quot;],</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;2012&quot;,</span><br><span class="line">            type: &quot;bar&quot;,</span><br><span class="line">            data: [16, 50, 30, 25, 36],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">      this.myChart.setOption(option);</span><br><span class="line">      // setTimeout(() =&gt; &#123;</span><br><span class="line">      //   this.echartsBase64 = this.myChart.getDataURL(&#123;</span><br><span class="line">      //     backgroundColor: &quot;#fff&quot;,</span><br><span class="line">      //   &#125;);</span><br><span class="line">      //   console.log(this.echartsBase64);</span><br><span class="line">      // &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    getBase64() &#123;</span><br><span class="line">      this.echartsBase64 = this.myChart.getDataURL(&#123; backgroundColor: &quot;#fff&quot; &#125;);</span><br><span class="line">      console.log(this.echartsBase64);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.meetingChart();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="通过select切换Echarts图（不改变数据，只切换图形）"><a href="#通过select切换Echarts图（不改变数据，只切换图形）" class="headerlink" title="通过select切换Echarts图（不改变数据，只切换图形）"></a>通过select切换Echarts图（不改变数据，只切换图形）</h2><p>我这里用到了两种方法：</p><ul><li>通过修改series里面的type，即给series里面的type为一个变量,通过修改这个变量为bar，line，pie等来切换图形；</li><li>重新设置options，echarts所有的配置项都在options,改变这个就相当于改变了echarts；同上面的方法相比，上面的缺点是切换为饼状图还会有坐标轴，不妥；此方法的缺点是，代码重复的多，好多个options；</li></ul><blockquote><p>以上方法都有个坑：</p><p>控制台会提示：There is a chart instance already initialized on the dom.</p><p>虽然不影响切换效果，但是总感觉不好</p></blockquote><p>坑的解决方法：</p><ul><li>每次绘制echart前，要dispose()销毁实例一下，否则图会重叠在一起；</li></ul><h3 id="方案一效果："><a href="#方案一效果：" class="headerlink" title="方案一效果："></a>方案一效果：</h3><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsChange1.gif" alt="方案一"></p><h3 id="方法一代码："><a href="#方法一代码：" class="headerlink" title="方法一代码："></a>方法一代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;echartsType&quot; @change=&quot;changeEcharts&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">          v-for=&quot;(item, index) in optVal&quot;</span><br><span class="line">          :label=&quot;item.lable&quot;</span><br><span class="line">          :value=&quot;item.value&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;div id=&quot;meetingRoomTrend&quot; style=&quot;width: 500px; height: 500px&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;changeEcharts&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      echartsType: &quot;bar&quot;,</span><br><span class="line">      optVal: [</span><br><span class="line">        &#123; lable: &quot;柱状图&quot;, value: &quot;bar&quot; &#125;,</span><br><span class="line">        &#123; lable: &quot;折线图&quot;, value: &quot;line&quot; &#125;,</span><br><span class="line">        &#123; lable: &quot;饼状图&quot;, value: &quot;pie&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">      myChart: &quot;&quot;,</span><br><span class="line">      userName: [&quot;李白&quot;, &quot;阿离&quot;, &quot;孙尚香&quot;, &quot;虞姬&quot;, &quot;马可&quot;],</span><br><span class="line">      userScore: [100, 120, 99, 89, 55, 97],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 通过修改series里面的type,然后将原来的echarts dispose()与重新init来实现的;此方法可用于bar和line两种的切换;加上pie,因为series不同(pie没有横坐标啥的),所以不建议此方法;</span><br><span class="line">    getCharts() &#123;</span><br><span class="line">      this.myChart = this.$echarts.init(</span><br><span class="line">        document.getElementById(&quot;meetingRoomTrend&quot;)</span><br><span class="line">      );</span><br><span class="line">      //   this.myChart.showLoading();</span><br><span class="line">      var options = &#123;</span><br><span class="line">        //配置标题</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &quot;学员成绩表鸭&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //配置x轴</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &quot;category&quot;, //category(类目名称),value(数值)</span><br><span class="line">          data: this.userName,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置提示语</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          trigger: &quot;axis&quot;, //触发提示类型 item (默认) axis (中间有条细线)</span><br><span class="line">          axisPointer: &#123;</span><br><span class="line">            // 触发动画效果(阴影,xy轴交叉坐标)  必须trigger为axis才有动画效果</span><br><span class="line">            type: &quot;shadow&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置y轴</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &quot;value&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置系列列表(这个是数组对象)</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: this.echartsType,</span><br><span class="line">            data: this.userScore,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      this.myChart.setOption(options);</span><br><span class="line">    &#125;,</span><br><span class="line">    changeEcharts() &#123;</span><br><span class="line">      /**</span><br><span class="line">       * clear类似于v-show</span><br><span class="line">       * dispose类似于v-if</span><br><span class="line">       */</span><br><span class="line">      if (![null, &quot;&quot;, undefined].includes(this.myChart)) &#123;</span><br><span class="line">        // this.myChart.dispose(); //解决echarts dom已经加载的报错</span><br><span class="line">        // this.myChart.clear();</span><br><span class="line">      &#125;</span><br><span class="line">      this.getCharts();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getCharts();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="方案二效果："><a href="#方案二效果：" class="headerlink" title="方案二效果："></a>方案二效果：</h3><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsChange2.gif" alt="方案二"></p><h3 id="方法二代码："><a href="#方法二代码：" class="headerlink" title="方法二代码："></a>方法二代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;echartsType&quot; @change=&quot;changeEcharts&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">          v-for=&quot;(item, index) in optVal&quot;</span><br><span class="line">          :label=&quot;item.lable&quot;</span><br><span class="line">          :value=&quot;item.value&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;div id=&quot;meetingRoomTrend&quot; style=&quot;width: 500px; height: 500px&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;changeEcharts&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      echartsType: &quot;bar&quot;,</span><br><span class="line">      optVal: [</span><br><span class="line">        &#123; lable: &quot;柱状图&quot;, value: &quot;bar&quot; &#125;,</span><br><span class="line">        &#123; lable: &quot;折线图&quot;, value: &quot;line&quot; &#125;,</span><br><span class="line">        &#123; lable: &quot;饼状图&quot;, value: &quot;pie&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">      myChart: &quot;&quot;,</span><br><span class="line">      optionsBar: &quot;&quot;,</span><br><span class="line">      optionsLine: &quot;&quot;,</span><br><span class="line">      optionsPie: &quot;&quot;,</span><br><span class="line">      userName: [&quot;李白&quot;, &quot;阿离&quot;, &quot;孙尚香&quot;, &quot;虞姬&quot;, &quot;马可&quot;],</span><br><span class="line">      userScore: [100, 120, 99, 89, 55, 97],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // echarts所有的配置项都在options,改变这个就相当于改变了echarts;</span><br><span class="line">    getCharts() &#123;</span><br><span class="line">      this.myChart = this.$echarts.init(</span><br><span class="line">        document.getElementById(&quot;meetingRoomTrend&quot;)</span><br><span class="line">      );</span><br><span class="line">      this.optionsBar = &#123;</span><br><span class="line">        //配置标题</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &quot;学员成绩表鸭&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //配置x轴</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &quot;category&quot;, //category(类目名称),value(数值)</span><br><span class="line">          data: this.userName,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置提示语</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          trigger: &quot;axis&quot;, //触发提示类型 item (默认) axis (中间有条细线)</span><br><span class="line">          axisPointer: &#123;</span><br><span class="line">            // 触发动画效果(阴影,xy轴交叉坐标)  必须trigger为axis才有动画效果</span><br><span class="line">            type: &quot;shadow&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置y轴</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &quot;value&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置系列列表(这个是数组对象)</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: &quot;bar&quot;,</span><br><span class="line">            data: this.userScore,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">      this.optionsLine = &#123;</span><br><span class="line">        //配置标题</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &quot;学员成绩表鸭&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //配置x轴</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &quot;category&quot;, //category(类目名称),value(数值)</span><br><span class="line">          data: this.userName,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置提示语</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          trigger: &quot;axis&quot;, //触发提示类型 item (默认) axis (中间有条细线)</span><br><span class="line">          axisPointer: &#123;</span><br><span class="line">            // 触发动画效果(阴影,xy轴交叉坐标)  必须trigger为axis才有动画效果</span><br><span class="line">            type: &quot;shadow&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置y轴</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &quot;value&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置系列列表(这个是数组对象)</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: &quot;line&quot;,</span><br><span class="line">            data: this.userScore,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">      this.optionsPie = &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &quot;Referer of a Website&quot;,</span><br><span class="line">          subtext: &quot;Fake Data&quot;,</span><br><span class="line">          left: &quot;center&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          trigger: &quot;item&quot;,</span><br><span class="line">          // confine: true,</span><br><span class="line">          // formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&quot;,</span><br><span class="line">         </span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          orient: &quot;vertical&quot;,</span><br><span class="line">          left: &quot;left&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;Access From&quot;,</span><br><span class="line">            type: &quot;pie&quot;,</span><br><span class="line">            radius: &quot;50%&quot;,</span><br><span class="line">            data: [</span><br><span class="line">              &#123; value: 1048, name: &quot;Search Engine&quot; &#125;,</span><br><span class="line">              &#123; value: 735, name: &quot;Direct&quot; &#125;,</span><br><span class="line">              &#123; value: 580, name: &quot;Email&quot; &#125;,</span><br><span class="line">              &#123; value: 484, name: &quot;Union Ads&quot; &#125;,</span><br><span class="line">              &#123; value: 300, name: &quot;Video Ads&quot; &#125;,</span><br><span class="line">            ],</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              itemStyle: &#123;</span><br><span class="line">                shadowBlur: 10,</span><br><span class="line">                shadowOffsetX: 0,</span><br><span class="line">                shadowColor: &quot;rgba(0, 0, 0, 0.5)&quot;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      // this.myChart.setOption(options);</span><br><span class="line">    &#125;,</span><br><span class="line">    changeEcharts() &#123;</span><br><span class="line">      /**</span><br><span class="line">       * clear类似于v-show</span><br><span class="line">       * dispose类似于v-if</span><br><span class="line">       */</span><br><span class="line">      if (![null, &quot;&quot;, undefined].includes(this.myChart)) &#123;</span><br><span class="line">        this.myChart.dispose(); ////解决echarts dom已经加载的报错</span><br><span class="line">        // this.myChart.clear();</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.echartsType == &quot;bar&quot;) &#123;</span><br><span class="line">        this.getCharts();</span><br><span class="line">        this.myChart.setOption(this.optionsBar);</span><br><span class="line">      &#125; else if (this.echartsType == &quot;line&quot;) &#123;</span><br><span class="line">        this.getCharts();</span><br><span class="line">        this.myChart.setOption(this.optionsLine);</span><br><span class="line">      &#125; else if (this.echartsType == &quot;pie&quot;) &#123;</span><br><span class="line">        this.getCharts();</span><br><span class="line">        this.myChart.setOption(this.optionsPie);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getCharts();</span><br><span class="line">    this.myChart.setOption(this.optionsBar);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="如何自定义tooltip-formatter"><a href="#如何自定义tooltip-formatter" class="headerlink" title="如何自定义tooltip formatter"></a>如何自定义tooltip formatter</h2><blockquote><p>方式有很多，我更趋向回调函数的方式，因为简单明了；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="attr">formatter</span>:<span class="keyword">function</span>(<span class="params">params</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;要展示的&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面切换Echrarts图的方法二来实验，输出如下：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsFormatter.png" alt="formatter"></p><ul><li>拼凑：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">formatter</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(params);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;`</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsFormatter2.png" alt="formatter"></p><ul><li>将tooltip限制在图表区域内：</li></ul><p>当return的东西足够多，会超出浏览器的clientHieght范围</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsFormatter3.png" alt="formatter"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关代码</span></span><br><span class="line"><span class="attr">formatter</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// console.log(params);</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;`</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: &#123;</span><br><span class="line"><span class="attr">confine</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/EchartsFormatter4.png" alt="formatter"></p><p>上面的实例就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: &#123;</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&quot;item&quot;</span>,</span><br><span class="line">    <span class="attr">confine</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&quot;,</span></span><br><span class="line">            <span class="attr">formatter</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// console.log(params);</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;<span class="subst">$&#123;params.seriesName&#125;</span>&lt;br/&gt;`</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>不希望以”&lt; &#x2F;br &gt;”而是以”\n”作为换行符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: &#123;</span><br><span class="line"><span class="attr">renderMode</span>: <span class="string">&#x27;richText&#x27;</span>, <span class="comment">// 默认为html</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/m0_37885651/article/details/107984816">echarts下载图片,getDataURL获取base64地址</a></p><p><a href="https://blog.csdn.net/to_love_/article/details/107041675?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-107041675-blog-107984816.pc_relevant_recovery_v2&spm=1001.2101.3001.4242.2&utm_relevant_index=4">通过Js将ECharts导出为图片</a></p><p><a href="https://blog.csdn.net/WWW_share8/article/details/103679701?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-103679701-blog-107984816.pc_relevant_recovery_v2&spm=1001.2101.3001.4242.3&utm_relevant_index=7">关于echarts导出图片不显示数据问题</a></p><p><a href="https://blog.csdn.net/qq_43556594/article/details/117130000?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8-117130000-blog-126073245.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8-117130000-blog-126073245.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=16">echarts图表切换功能（不改变数据，只切换图形）</a></p><p><a href="https://blog.csdn.net/lilycheng1986/article/details/116234316">echarts：tab切换效果</a></p><p><a href="https://blog.csdn.net/bbt953/article/details/126300280">[echarts]clear和dispose的区别和使用场景</a></p><p><a href="https://blog.csdn.net/qq_38974638/article/details/108986033">ECharts formatter属性设置3种方式（字符串模板，函数模板，回调函数）</a></p><p><a href="https://blog.csdn.net/weixin_42274805/article/details/119613193?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-119613193-blog-101207199.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-119613193-blog-101207199.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=5">[Echarts]如何自定义tooltip formatter</a></p>]]></content>
      
      
      <categories>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs3 Express</title>
      <link href="/articles/d95e4f83.html"/>
      <url>/articles/d95e4f83.html</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Express 是一个简洁而灵活的 Node.js Web应用框架, 提供一系列强大特性帮助你创建各种Web应用</li><li>Express内部还是使用的http模块实现服务器创建和监听, 对http模块进行了二次封装</li><li>严格上来说  express就是NodeJS的一个模块  直接下载安装</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>node下载express模块：</li><li>命令  ： <ul><li>初始化服务 ： <code>npm init -y</code>  </li><li>下载express：  <code>npm  i  express</code></li></ul></li><li>使用的时候  引入  需要实例化一个express应用  使用应用对象创建各种服务</li></ul><h2 id="express响应"><a href="#express响应" class="headerlink" title="express响应"></a>express响应</h2><ul><li>express响应的时候使用response对象中的send方法进行响应  注意  send只能响应一次  如果多次  将不执行</li><li>只会执行第一次响应的内容  </li><li>使用send的时候  不需要设置头信息  直接使用就可以</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个应用 (不用new)</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 测试一个web服务器</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在express中,响应用到的是response的send()方法; 且只能用一个</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;你好 2022&lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现象：若浏览器输入127.0.0.1：3000   浏览器则显示  Cannot GET &#x2F;；只有输入127.0.0.1：3000&#x2F;index  才能显示  你好 2022</p><h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><ul><li>路由其实就是我们平时所说的路径</li><li>express路由分为 get、post、use、all(不常用,也就不写例子了)</li></ul><ol><li>get路由： 定义的get路由在浏览器中访问的时候  只能使用get方式进行访问</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;this is root &lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;这是index路由&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>在页面输入127.0.0.1:3000 则会显示 h1解析之后的 this is root ；输入127.0.0.1:3000&#x2F;index 则会显示  这是index路由</p><ol start="2"><li>post路由：定义的post路由在浏览器中访问的时候  只能使用post方式进行访问</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//因为是post,所以不能在url地址栏中进行输入,那里面的都算get,所以需要html来协助一哈哈</span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3000/index&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span>  //要有action 和method 缺一不可</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;this is root &lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;这是index路由&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>跟get相比，仅仅是get改为了post，别的一毛一样；</p><ol start="3"><li>use路由 (可以用来设置404页面)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;this is root &lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;这是index路由&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不设置路由表示除了上面的别的都匹配(脸最大的时候就是不要脸)</span></span><br><span class="line"><span class="comment">// status()设置状态码</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;404 Not Found&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul><li>响应头就是MIME，express中默认是响应头的 “Content-type”：”text&#x2F;html”</li><li>但如果想展示一张图片，text&#x2F;html不能解析图片，则需要设置响应头</li><li>setHeader()内置两个参数：第一个参数是Content-type第二个参数是MIME类型  例如： image&#x2F;jpg</li><li>要是设置了不管用，清缓存或者开一个无痕浏览</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs  = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;image/jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> contents = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dm.jpg&quot;</span>));<span class="comment">//图片不能写utf-8;因为图片是二进制的</span></span><br><span class="line">    res.<span class="title function_">send</span>(contents)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is running&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="sendFile响应文件"><a href="#sendFile响应文件" class="headerlink" title="sendFile响应文件"></a>sendFile响应文件</h2><ul><li>sendFile是响应一个文件  和上述的功能是差不多的  如果说  我们直接响应一个图片</li><li>我们可以直接使用sendFile方法进行响应   直接输入图片的地址  但是要求  图片地址必须是绝对路径</li><li>sendFIle内置一个参数  参数是文件的绝对路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dm.jpg&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="解析get参数"><a href="#解析get参数" class="headerlink" title="解析get参数"></a>解析get参数</h2><ul><li>Express中解析get参数相对来说比较简单   使用request对象中的query</li><li>可以使用表单，可以使用url地址栏传参；**(除了form和ajax，别的其实都是url地址栏传参的)**</li><li>接受到的结果直接就是一个对象    直接处理就可以</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3000/index&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> params = req.<span class="property">query</span>;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params);  <span class="comment">//&#123; username: &#x27;asdasd&#x27;, password: &#x27;123&#x27; &#125;</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;lala&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><ul><li><p>路由参数不能通过form表单进行传参</p></li><li><p>参数名在路由上进行传递  接收   传递参数的时候一一对应</p></li><li><p>路由参数传递数量和参数名保持一致  否则404</p></li><li><p>数名在路由上进行传递    ‘&#x2F;index&#x2F;:name&#x2F;:age&#x2F;:sex’</p></li><li><p>处理参数的时候   路由参数保存在request对象中的params对象中</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/index/:name/:age/:sex&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> params = req.<span class="property">params</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)  <span class="comment">//&#123; name: &#x27;fsl&#x27;, age: &#x27;24&#x27;, sex: &#x27;1&#x27; &#125;</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;lala&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>)</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>在地址栏中输入  <code>http://127.0.0.1:3000/index/fsl/24/1</code> 即可访问，参数和定义的路由一一对应，少传参数或者多传都会访问不到，例如少传一个：<code>http://127.0.0.1:3000/index/fsl/24/</code> &#x3D;&gt;<code>Cannot GET /index/fsl/24/</code></p><h2 id="get参数和路由参数的区别"><a href="#get参数和路由参数的区别" class="headerlink" title="get参数和路由参数的区别"></a>get参数和路由参数的区别</h2><ol><li>get可以表单传参，可以url地址栏传参，url地址栏使用?进行传递  参数名&#x3D;参数值   多个参数使用&amp;进行分割；路由参数只能在url地址栏传参，url地址栏使用<code>/:key/:key</code>的方式传参  (例如：<code>/index/:name/:age/:sex</code>    <code>http://127.0.0.1:3000/index/fsl/24/1</code> )</li><li>路由传参参数名在路由上进行传递，接收，参数必须一一对应，参数数量必须保持一致，否则404</li><li>get参数通过<code>res.query</code>，路由参数通过<code>res.params</code>；(但都是对象)</li></ol><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><ul><li>传统写node，每次进行代码修改之后，需要<code>ctrl+c</code>然后重启服务，有点繁琐</li><li>下载第三方模块nodemon，需要全局下载<code>npm  install  nodemon  -g</code></li><li>直接<code>nodemon </code>运行程序</li><li>注：仅在测试的时候用，上线的时候不能用，因为上线之后一改就重启服务的话……hha……</li></ul>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> Express1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs2服务器</title>
      <link href="/articles/e4a31b2e.html"/>
      <url>/articles/e4a31b2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJs服务器"><a href="#NodeJs服务器" class="headerlink" title="NodeJs服务器"></a>NodeJs服务器</h1><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><p>res.end()；里面的内容可以展示在定义的接口网页中。</p><ul><li>method1：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用核心模块http模块进行创建</span></span><br><span class="line"><span class="comment"> * 涉及到的方法有:</span></span><br><span class="line"><span class="comment"> * createServer  创建一个Web服务器  内置一个参数  参数是回调函数  可以不传递参数</span></span><br><span class="line"><span class="comment"> * listen方法  这个是服务器的listen方法  主要进行监听</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建服务器  使用createServer方法</span></span><br><span class="line"><span class="comment">// 内置一个参数  参数是回调函数  回调内置两个参数</span></span><br><span class="line"><span class="comment">// 第一个参数是请求   第二个参数是响应</span></span><br><span class="line"><span class="comment">// 返回值是服务器对象</span></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello World&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 进行监听  设定浏览器访问的IP和端口</span></span><br><span class="line"><span class="comment">// 使用listen方法  内置三个参数</span></span><br><span class="line"><span class="comment">// 第一个参数是端口号  必选</span></span><br><span class="line"><span class="comment">// 第二个参数是IP地址   注意  IP地址必须合法  必须使用该电脑的IP  默认地址是127.0.0.1 || localhost</span></span><br><span class="line"><span class="comment">// 第三个参数是回调函数  没什么意义</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开服务器，然后浏览器输入 127.0.0.1:3000  即可看到 hello World </p><ul><li>method2：(事件驱动方式)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用createServer方法进行创建服务器</span></span><br><span class="line"><span class="comment">// 这里只是创建服务器对象  但是  不传参数  使用事件驱动</span></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行...&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用事件驱动  驱动服务器</span></span><br><span class="line"><span class="comment">// 使用server对象中的on方法进行驱动事件</span></span><br><span class="line"><span class="comment">// 绑定事件  使用server对象中的on方法  内置两个参数</span></span><br><span class="line"><span class="comment">// 第一个参数是事件的名字   固定事件   request</span></span><br><span class="line"><span class="comment">// 第二个参数是回调函数  事件的处理过程</span></span><br><span class="line"><span class="comment">// 回调参数内置两个参数   第一个是请求  第二个参数是响应</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello World!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开服务器，然后浏览器输入 127.0.0.1:3000  即可看到 hello World!</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="给客户端响应的结果数据"><a href="#给客户端响应的结果数据" class="headerlink" title="给客户端响应的结果数据"></a>给客户端响应的结果数据</h3><blockquote><p>在NodeJS创建的服务器上  我们可以响应一些内容   怎么把内容响应到浏览器上，涉及到响应的方法，肯定是response的方法 </p></blockquote><ul><li>response.write() 设置响应的内容，可以有多个，这种方式是直接写出数据，但是并没有关闭流；</li><li>response.end()  响应结束的信号 ，只能有一个，这种方式是写出最后的数据，并且写出后会关闭流；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//响应结果</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="返回状态码"><a href="#返回状态码" class="headerlink" title="返回状态码"></a>返回状态码</h3><blockquote><p>Http状态码（Http Status Code）是用来表示Http响应状态的数字代码；</p></blockquote><ul><li>Http状态码非常多，可以根据不同的情况，给客户端返回不同的状态码；</li><li>常见的状态码：</li></ul><table><thead><tr><th align="center">状态码</th><th align="center">状态描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">OK</td><td align="center">客户端请求成功</td></tr><tr><td align="center">400</td><td align="center">Bad Request</td><td align="center">由于客户端请求有语法错误，不能被服务器所理解。</td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="center">请求未经授权。这个状态代码必须和WWW-Authenticate<br/>报头域一起使用。</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="center">服务器收到请求，但是拒绝提供服务，服务器通常会在响<br/>应正文中给出不提供服务的原因</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="center">请求的资源不存在，例如，输入了错误的URL。</td></tr><tr><td align="center">500</td><td align="center">Internal Server Error</td><td align="center">服务器发生不可预期的错误，导致无法完成客户端的请求</td></tr><tr><td align="center">503</td><td align="center">Service Unavailable</td><td align="center">服务器当前不能够处理客户端的请求，在一段时间之后，<br/>服务器可能会恢复证常</td></tr></tbody></table><h3 id="设置状态码"><a href="#设置状态码" class="headerlink" title="设置状态码"></a>设置状态码</h3><ul><li>res.statusCode&#x3D;200；</li><li>res.writeHead(500);</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置状态码</span></span><br><span class="line">    <span class="comment">// res.statusCode=404;</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">500</span>);</span><br><span class="line">    <span class="comment">//响应结果</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="响应头文件"><a href="#响应头文件" class="headerlink" title="响应头文件"></a>响应头文件</h3><blockquote><p>设置响应的header；</p><p>返回头部信息，主要有两种方式：</p></blockquote><ul><li>res.setHeader：一次写入一个头部信息；</li><li>res.writeHead：同时写入header和status；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应的header</span></span><br><span class="line">    <span class="comment">// 设置方式一：</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;text/plain;charset=utf8&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置方式二： //设置为text/html时,可以解析html标签</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">401</span>,&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=utf8&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应结果</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;来啦&quot;</span>); <span class="comment">//设置header为charset=utf8,中文就不会乱码了;</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;&lt;h2&gt;作用&lt;/h2&gt;&quot;</span>); <span class="comment">// 设置为text/html时,可以解析html标签</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Header设置 Content-Type有什么作用呢？</p></blockquote><ul><li>设置为text&#x2F;html时,可以解析html标签；</li><li>设置header为charset&#x3D;utf8,中文就不会乱码了;</li><li>等等</li></ul><p>demo1: 通过设置writeHead()，来防止乱码，识别H5标签与设置状态码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>().<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行中...&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 设置响应头信息  设置MIME</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;)</span><br><span class="line">    <span class="comment">// 编辑响应内容</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;hellow&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;世界&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 响应结束</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;加油&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>demo2：通过上述可知，可以用html标签，但是上述这样写有点乱，进而直接读取外部的html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: yellowgreen</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>this i p <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>().<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 上述案例可以得知,可以用html，这里直接引入一个外部的html文件,而不是在这里写</span></span><br><span class="line">    <span class="keyword">let</span> contents = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./ce.html&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 直接用end响应到浏览器上,不用write了</span></span><br><span class="line">    res.<span class="title function_">end</span>(contents);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="request对象中封装了客户端给我们服务器传过来的所有信息"><a href="#request对象中封装了客户端给我们服务器传过来的所有信息" class="headerlink" title="request对象中封装了客户端给我们服务器传过来的所有信息:"></a>request对象中封装了客户端给我们服务器传过来的所有信息:</h3><ul><li>请求路径：req.url</li><li>请求方式：req.method</li><li>请求头：req.headers</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request对象中封装了客户端给我们服务器传过来的所有信息</span></span><br><span class="line"><span class="comment">     * 请求路径：req.url</span></span><br><span class="line"><span class="comment">     * 请求方式：req.method</span></span><br><span class="line"><span class="comment">     * 请求头：req.headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浏览器地址栏访问：http://127.0.0.1:3000/login?username=fwd&amp;password=123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);  <span class="comment">//  /login?username=fwd&amp;password=123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>); <span class="comment">// GET</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello server&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="string">&quot;0.0.0.0&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="如何通过不同的请求路由，做出不同响应呢？"><a href="#如何通过不同的请求路由，做出不同响应呢？" class="headerlink" title="如何通过不同的请求路由，做出不同响应呢？"></a>如何通过不同的请求路由，做出不同响应呢？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 浏览器地址栏访问：http://127.0.0.1:3000/login</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);  <span class="comment">//  /login</span></span><br><span class="line">    <span class="comment">// 浏览器地址栏访问：http://127.0.0.1:3000/login?username=fwd&amp;password=123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);  <span class="comment">//  /login?username=fwd&amp;password=123</span></span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello server&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>上面我们发现：GET请求的参数会拼接到路径上,导致即使都是”&#x2F;login”的路由，我们通过<code>req.url</code>获取到的内容也不相同；此时我们需要借助到<code>url</code>模块来进行路由的管理;借助<code>querystring</code>模块来进行参数的管理；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 浏览器地址栏访问：http://127.0.0.1:3000/login?username=fwd&amp;password=123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);  <span class="comment">//  /login?username=fwd&amp;password=123</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reqUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reqUrl);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Url &#123;</span></span><br><span class="line"><span class="comment">        protocol: null,</span></span><br><span class="line"><span class="comment">        slashes: null,</span></span><br><span class="line"><span class="comment">        auth: null,</span></span><br><span class="line"><span class="comment">        host: null,</span></span><br><span class="line"><span class="comment">        port: null,</span></span><br><span class="line"><span class="comment">        hostname: null,</span></span><br><span class="line"><span class="comment">        hash: null,</span></span><br><span class="line"><span class="comment">        search: &#x27;?username=fwd&amp;password=123&#x27;,</span></span><br><span class="line"><span class="comment">        query: &#x27;username=fwd&amp;password=123&#x27;,</span></span><br><span class="line"><span class="comment">        pathname: &#x27;/login&#x27;,</span></span><br><span class="line"><span class="comment">        path: &#x27;/login?username=fwd&amp;password=123&#x27;,</span></span><br><span class="line"><span class="comment">        href: &#x27;/login?username=fwd&amp;password=123&#x27;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 我们想将传过来的参数以对象的形式获取;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(qs.<span class="title function_">parse</span>(query));  <span class="comment">// [Object: null prototype] &#123; username: &#x27;fwd&#x27;, password: &#x27;123&#x27; &#125;</span></span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;欢迎回来！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;请注册~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>demo：如果路径是index.html则将ce.html的界面渲染上去；如果是别的路径，则将notFound.html的界面渲染上去；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>().<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行...&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 获取我们请求的路径</span></span><br><span class="line">    <span class="keyword">let</span> reqUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">if</span> (reqUrl == <span class="string">&quot;/favicon.ico&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (reqUrl == <span class="string">&quot;/index.html&quot;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title function_">thePath</span>(<span class="string">&quot;./ce.html&quot;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;</span><br><span class="line">            <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title function_">thePath</span>(<span class="string">&quot;./notFound.html&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thePath</span>(<span class="params">absolutePath</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, absolutePath), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何获取post请求body中的数据呢？"><a href="#如何获取post请求body中的数据呢？" class="headerlink" title="如何获取post请求body中的数据呢？"></a>如何获取post请求body中的数据呢？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取body中的参数(固定写法)</span></span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>()); <span class="comment">//获取到的是个buffer,所以需要toString();</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * &#123;</span></span><br><span class="line"><span class="comment">                    &quot;username&quot;:&quot;fwd&quot;,</span></span><br><span class="line"><span class="comment">                    &quot;password&quot;:123456</span></span><br><span class="line"><span class="comment">                   &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//但是获取到的是个字符串,需要转成对象；   </span></span><br><span class="line">                <span class="keyword">const</span> &#123; username, password &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(username, password); <span class="comment">// fwd  123456</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h3><blockquote><p>通过 <code>req.headers</code>获取到的headers对象属性；</p><p>在request对象的header中也包含很多有用的信息，客户端会默认传递过来一些信息：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;PostmanRuntime/7.30.0&#x27;</span>,</span><br><span class="line">  <span class="attr">accept</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;postman-token&#x27;</span>: <span class="string">&#x27;93700e4a-9978-4771-993a-8ecc016d0db5&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1:3000&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;accept-encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">  <span class="attr">connection</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;content-length&#x27;</span>: <span class="string">&#x27;50&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>content-type是这次请求携带的数据的类型：</p><ul><li>application&#x2F;json表示是一个json类型；</li><li>text&#x2F;plain表示是文本类型</li><li>application&#x2F;xml表示是xml类型；</li><li>multipart&#x2F;form-data表示是上传文件；</li></ul></li><li><p>content-length：文件的大小和长度；</p></li><li><p>connection:keep-alive：</p><ul><li>http是基于TCP协议的，但是通常在进行一次请求和响应结束后会立刻中断；</li><li>在http1.1中，所有连接默认是 connection: keep-alive的；</li><li>不同的Web服务器会有不同的保持 keep-alive的时间；</li><li>Node中默认是5s中；</li></ul></li><li><p>accept-encoding：告知服务器，客户端支持的文件压缩格式，比如js文件可以使用gzip编码，对应 .gz文件；</p></li><li><p>accept：告知服务器，客户端可接受文件的格式类型；</p></li><li><p>user-agent：客户端相关的信息；</p></li></ol><h2 id="登录注册案例"><a href="#登录注册案例" class="headerlink" title="登录注册案例"></a>登录注册案例</h2><p>仅仅是个小案例，好多没有限制，比如相同的用户名禁止注册。。。</p><ul><li>数组方法 find() 返回数组中第一个符合的元素的值(并且不检查剩余值)；参数：(item,index,arr)；找不到返回undefined。</li><li>异步写入writeFile：相对于同步，多了一个回调函数，内置一个参数err，用于返回错误。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- action是提交的地址,method是提交的方式,input中的name必须写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3000/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="number">123456</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isBloack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="number">123456</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isBloack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="number">123456</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isBloack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123321&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isBloack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AAS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;321&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isBloack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>().<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器正在运行...&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取我们请求的路径</span></span><br><span class="line">    <span class="keyword">let</span> requestUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">if</span>(requestUrl==<span class="string">&quot;/register.html&quot;</span>)&#123;</span><br><span class="line">      <span class="comment">// 设置头信息</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="title function_">thePath</span>(<span class="string">&quot;./register.html&quot;</span>))</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(requestUrl==<span class="string">&quot;/login.html&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// 设置头信息</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title function_">thePath</span>(<span class="string">&quot;./login.html&quot;</span>))</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (requestUrl == <span class="string">&quot;/add&quot;</span>) &#123;</span><br><span class="line">         <span class="comment">// 设置头信息</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;);</span><br><span class="line">        <span class="comment">// 我们获取路径中的get参数;可以先打印看一下属性,然后确定了用query属性</span></span><br><span class="line">        <span class="keyword">let</span> reqUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">query</span>; <span class="comment">//&#x27;username=zs&amp;password=20&#x27;</span></span><br><span class="line">        <span class="comment">//处理get参数  将get参数转化成对象格式</span></span><br><span class="line">        <span class="keyword">let</span> qsResult = qs.<span class="title function_">parse</span>(reqUrl); <span class="comment">//&#123; username: &#x27;zs&#x27;, password: &#x27;20&#x27; &#125;</span></span><br><span class="line">        <span class="keyword">let</span> jsonArr = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">thePath</span>(<span class="string">&quot;./member.json&quot;</span>)); <span class="comment">//默认是字符串,需转为数组(json)</span></span><br><span class="line">        <span class="comment">// 完善用户信息</span></span><br><span class="line">        qsResult.<span class="property">id</span> = jsonArr[jsonArr.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>, <span class="comment">//id的话直接用length-1的话,如果前面删除了,则会产生重复的id</span></span><br><span class="line">        qsResult.<span class="property">isBloack</span> = <span class="literal">false</span>;</span><br><span class="line">        jsonArr.<span class="title function_">push</span>(qsResult);  <span class="comment">// jsonArr也就是前端发送的数据(注册数据)追加到数组中</span></span><br><span class="line">        <span class="comment">// 因为要看是否存储成功,所以这里得用异步写入 (异步相较于同步多了callback 函数，单个参数 err 和用于返回错误。)</span></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./member.json&quot;</span>), <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonArr), &#123;</span><br><span class="line">            <span class="attr">flag</span>: <span class="string">&quot;w&quot;</span>,</span><br><span class="line">            <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        &#125;, <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error) res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;注册失败&#x27;);location.href=&#x27;http://127.0.0.1:3000/register.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;注册成功&#x27;);location.href=&#x27;http://127.0.0.1:3000/login.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (requestUrl==<span class="string">&quot;/login&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// 设置头信息</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment">// 获取路径中的get参数</span></span><br><span class="line">        <span class="keyword">let</span> reqUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">query</span>; <span class="comment">//&#x27;username=zs&amp;password=20&#x27;</span></span><br><span class="line">        <span class="comment">// 将get参数转为对象格式</span></span><br><span class="line">        <span class="keyword">let</span> qsResult = qs.<span class="title function_">parse</span>(reqUrl);</span><br><span class="line">        <span class="keyword">let</span> &#123;username,password&#125;=qsResult;</span><br><span class="line">        <span class="comment">// 将所有的数据取出</span></span><br><span class="line">        <span class="keyword">let</span> jsonArr = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">thePath</span>(<span class="string">&quot;./member.json&quot;</span>));</span><br><span class="line">        <span class="comment">//查看JSON中是否有用户名和密码  是否吻合</span></span><br><span class="line">        <span class="comment">// find 返回数组中第一个符合的元素的值(并且不检查剩余值);参数：(item,index,arr);找不到返回undefined</span></span><br><span class="line">        <span class="keyword">let</span> loginResult = jsonArr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">username</span>==username;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//console.log(loginResult)// &#123; username: &#x27;fwd&#x27;, password: &#x27;123321&#x27;, id: 4, isBloack: false &#125;</span></span><br><span class="line">        <span class="comment">// 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(loginResult==<span class="literal">undefined</span>)&#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;用户不存在&#x27;);location.href=&#x27;http://127.0.0.1:3000/register.html&#x27;&lt;/script&gt;&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否禁用</span></span><br><span class="line">            <span class="keyword">if</span> (loginResult.<span class="property">isBloack</span>==<span class="literal">true</span>)&#123;</span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;账户已被拉黑&#x27;);location.href=&#x27;http://127.0.0.1:3000/register.html&#x27;&lt;/script&gt;&quot;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(loginResult.<span class="property">password</span>!=password)&#123;</span><br><span class="line">                 <span class="comment">// 判断密码是否正确</span></span><br><span class="line">                    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;密码错误&#x27;);location.href=&#x27;http://127.0.0.1:3000/register.html&#x27;&lt;/script&gt;&quot;</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;登陆成功&#x27;);location.href=&#x27;http://127.0.0.1:3000/register.html&#x27;&lt;/script&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thePath</span>(<span class="params">absolutePath</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, absolutePath), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs1内置模块</title>
      <link href="/articles/8b67a7b3.html"/>
      <url>/articles/8b67a7b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJs内置模块"><a href="#NodeJs内置模块" class="headerlink" title="NodeJs内置模块"></a>NodeJs内置模块</h1><p>Tips：内置模块：下载NodeJs自带的模块。</p><h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><p>文件操作都是基于fs模块。</p><ul><li><p>readFileSync：同步读取(两个参数)   第二个参数可以是一个对象{encoding:’utf-8’};可以为字符串’utf-8’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找不到 字符串 是 undefined ; 找不到 对象 是 null;</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> result = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./a.txt&quot;</span>,&#123;<span class="attr">encoding</span>:<span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> results = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br></pre></td></tr></table></figure></li><li><p>writeFileSync：同步写入   文件写入的是<strong>字符串</strong>,所需需要JSON.stringify(); 写入操作 若文件名不存在,则<strong>自动创建</strong>。</p><ul><li>r：只读；</li><li>w：写入(复写)；</li><li>a：写入(追加写)；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的文件的写入</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> contents = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件写入的是字符串,所需需要JSON.stringify(); 写入操作 若文件名不存在,则自动创建</span></span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./bb.txt&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(contents),&#123;<span class="attr">flag</span>:<span class="string">&quot;w&quot;</span>,<span class="attr">encoding</span>:<span class="string">&quot;utf-8&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>readdirSync：查看文件夹信息；这是查看一个文件夹中的所有文件夹或者文件，类似与doc命令中的dir；返回值是一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步方法 readdirSync : 查看文件夹信息  查看一个文件夹中的所有文件夹, 类似于doc中的dir;</span></span><br><span class="line"><span class="comment">// 内置一个参数=&gt;路径</span></span><br><span class="line"><span class="comment">// 返回值是一个数组  查看的是文件夹的第一级的所有文件,第二级是么有的;</span></span><br><span class="line">   <span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">   <span class="keyword">let</span> result = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;./ce&#x27;</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//[ &#x27;ce.txt&#x27;, &#x27;ce1&#x27;, &#x27;ce2&#x27; ]</span></span><br></pre></td></tr></table></figure></li><li><p>statSync：查看文件夹或者目录信息；主要用到了其 isFile()方法来判断是否为文件；返回值是一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.文件夹</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> result = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./ce&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回一个对象,这个文件夹的所有信息</span></span><br><span class="line"><span class="comment"> Stats &#123;</span></span><br><span class="line"><span class="comment">  dev: 2658792828,</span></span><br><span class="line"><span class="comment">  mode: 16822,</span></span><br><span class="line"><span class="comment">  nlink: 1,</span></span><br><span class="line"><span class="comment">  uid: 0,</span></span><br><span class="line"><span class="comment">  gid: 0,</span></span><br><span class="line"><span class="comment">  rdev: 0,</span></span><br><span class="line"><span class="comment">  blksize: 4096,</span></span><br><span class="line"><span class="comment">  ino: 1688849860493693,</span></span><br><span class="line"><span class="comment">  size: 0,</span></span><br><span class="line"><span class="comment">  blocks: 0,</span></span><br><span class="line"><span class="comment">  atimeMs: 1645532058723.3967,</span></span><br><span class="line"><span class="comment">  mtimeMs: 1645532058722.3972,</span></span><br><span class="line"><span class="comment">  ctimeMs: 1645532058722.3972,</span></span><br><span class="line"><span class="comment">  birthtimeMs: 1645532035511.7517,</span></span><br><span class="line"><span class="comment">  atime: 2022-02-22T12:14:18.723Z,</span></span><br><span class="line"><span class="comment">  mtime: 2022-02-22T12:14:18.722Z,</span></span><br><span class="line"><span class="comment">  ctime: 2022-02-22T12:14:18.722Z,</span></span><br><span class="line"><span class="comment">  birthtime: 2022-02-22T12:13:55.512Z</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">isFile</span>()); <span class="comment">//false =&gt;因为是文件夹;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.文件</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> result = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./ce/ce.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">//和上面的一样,返回一个对象 这个文件的所有信息</span></span><br><span class="line"><span class="keyword">let</span> isFile = result.<span class="title function_">isFile</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isFile); <span class="comment">// true =&gt;这是个文件</span></span><br></pre></td></tr></table></figure></li><li><p>mkdirSync：创建文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步方法 mkdirSync </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内置一个或者两个参数</span></span><br><span class="line"><span class="comment"> * 第一个参数必选   创建文件夹的路径和创建的名称</span></span><br><span class="line"><span class="comment"> * 第二个参数可选  如果说没有第二个参数  那么只能创建一层目录</span></span><br><span class="line"><span class="comment"> * 第二个参数是一个对象  对象是 &#123;recursive : true&#125; 即:是否递归创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  一个参数</span></span><br><span class="line"><span class="comment">// let fs = require(&#x27;fs&#x27;);</span></span><br><span class="line"><span class="comment">// fs.mkdirSync(&#x27;./ce/ee/ff&#x27;); //一个参数  因为没有ee,没有ee/ff 会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个参数</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="string">&#x27;ce/ee/ff&#x27;</span>,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;) <span class="comment">//递归 创建成功了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>rmdirSync：删除文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法和mkdir是一模一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除的是文件夹,不能删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //  一个参数</span></span><br><span class="line"><span class="comment">// let fs = require(&#x27;fs&#x27;);</span></span><br><span class="line"><span class="comment">// fs.rmdirSync(&#x27;ce/ee&#x27;)  //出错,因为下面还有别的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  两个个参数</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// fs.rmdirSync(&#x27;ce/ee&#x27;,&#123;recursive:true&#125;)</span></span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(<span class="string">&#x27;ce/ce2&#x27;</span>,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;) </span><br></pre></td></tr></table></figure></li><li><p>unlinkSync：删除文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个参数,即删除文件的路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(<span class="string">&#x27;./ce/ce.txt&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>renameSync：修改文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改文件名</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  不仅仅可以修改文件名和修改后缀  还可以进行移动  内置两个参数</span></span><br><span class="line"><span class="comment"> *  第一个参数是原来的文件路径 + 文件名</span></span><br><span class="line"><span class="comment"> *  第二个参数是移动和更名后的文件路径 + 文件名</span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"> fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;./a.jpg&#x27;</span>,<span class="string">&quot;./ce/ee/b.png&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename);   <span class="comment">//查看当前文件的绝对路径  精确到文件名 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);    <span class="comment">//查看当前文件的绝对路径  精确到文件夹名</span></span><br></pre></td></tr></table></figure><h2 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h2><ul><li>我们只使用其中的一个方法  目的是解析url；</li><li>将一个完整的url解析成一个对象   使用url模块中的parse方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;https://www.baidu.com:443/kang/index.html?name=Eric&amp;age=18&quot;</span>;</span><br><span class="line"><span class="comment">// 使用url模块中的parse方法进行处理url</span></span><br><span class="line"><span class="comment">// 返回值是一个对象  内置一个参数  参数是url</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(str1));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Url &#123;</span></span><br><span class="line"><span class="comment">  protocol: &#x27;https:&#x27;,</span></span><br><span class="line"><span class="comment">  host: &#x27;www.baidu.com:443&#x27;,</span></span><br><span class="line"><span class="comment">  port: &#x27;443&#x27;,</span></span><br><span class="line"><span class="comment">  hostname: &#x27;www.baidu.com&#x27;,</span></span><br><span class="line"><span class="comment">  search: &#x27;?name=Eric&amp;age=18&#x27;,</span></span><br><span class="line"><span class="comment">  query: &#x27;name=Eric&amp;age=18&#x27;,</span></span><br><span class="line"><span class="comment">  pathname: &#x27;/kang/index.html&#x27;,</span></span><br><span class="line"><span class="comment">  path: &#x27;/kang/index.html?name=Eric&amp;age=18&#x27;,</span></span><br><span class="line"><span class="comment">  href: &#x27;https://www.baidu.com:443/kang/index.html?name=Eric&amp;age=18&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="querystring模块"><a href="#querystring模块" class="headerlink" title="querystring模块"></a>querystring模块</h2><ul><li>这个模块也是只有一个作用：用来处理get参数的；</li><li>因为我们直接获取到的get参数是一个字符串  不能使用   name&#x3D;Mary&amp;age&#x3D;19；</li><li>我们可以借助querystring模块进行处理  使用模块中parse方法进行处理；</li><li>将字符串格式的get参数  name&#x3D;Mary&amp;age&#x3D;19 转化成对象格式 { name: ‘Mary’, age: ‘19’ }</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;https://www.baidu.com:443/kang/index.html?name=Eric&amp;age=18&quot;</span>;</span><br><span class="line"><span class="comment">// 解析url地址  解析成为对象</span></span><br><span class="line"><span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(str1);</span><br><span class="line"><span class="comment">// 获取url对象中的get参数  存储在对象中的query属性中</span></span><br><span class="line"><span class="keyword">let</span> params = urlObj.<span class="property">query</span>;  <span class="comment">// name=Mary&amp;age=19</span></span><br><span class="line"><span class="comment">// 使用querystring模块中的方法  将参数name=Mary&amp;age=19解析成为对象</span></span><br><span class="line"><span class="keyword">let</span> result = qs.<span class="title function_">parse</span>(params);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//&#123; name: &#x27;Eric&#x27;, age: &#x27;18&#x27; &#125;</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125;=result;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//Eric</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">//18</span></span><br></pre></td></tr></table></figure><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><blockquote><p>node version： v16.18.0  (之前好像path.resolve()拼接好像没有盘符)</p></blockquote><blockquote><p>将两个路径拼接起来；看起来很简单，其实有坑：不同系统的路径分隔符可能不一样。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> basePath = <span class="string">&quot;/user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上面的路径拼接起来</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这样是不行的：</span></span><br><span class="line"><span class="comment"> * 因为不同系统的路径分隔符可能不一样</span></span><br><span class="line"><span class="comment"> * Linux/mac os 拼接符 /</span></span><br><span class="line"><span class="comment"> * window拼接符 /  \  \\</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> path= basePath +<span class="string">&quot;/&quot;</span>+filename;</span><br></pre></td></tr></table></figure><blockquote><p>使用 path.join(xx,xx);进行拼接;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> basePath = <span class="string">&quot;/user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上面的路径拼接起来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath= path.<span class="title function_">join</span>(basePath,filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath); <span class="comment">//   \user\why\abc.txt (上面的basePath的拼接符会根据不同系统自动转化的)</span></span><br></pre></td></tr></table></figure><p>path模块也是针对路径的模块  记住这些方法</p><ul><li>basename：获取路径的最后一部分</li><li>dirname：获取除了页面部分</li><li>extname：获取后缀名</li><li>parse：获取一个对象  对象上述的所有</li><li>join：连接路径  相对路径</li><li>resolve：连接路径  绝对路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递若干参数  把所有的参数当成路径进行连接</span></span><br><span class="line"><span class="comment">// path.resolve() 绝对路径;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);    <span class="comment">//查看当前文件的绝对路径  精确到文件夹名  E:\fsl\nodeJs\coderwhy\day4\path</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;b/c/d&#x27;</span>)); <span class="comment">//=&gt;双重保险        E:\fsl\nodeJs\coderwhy\day4\path\b\c\d</span></span><br></pre></td></tr></table></figure><h3 id="path-jon-与path-resolve-区别"><a href="#path-jon-与path-resolve-区别" class="headerlink" title="path.jon()与path.resolve()区别"></a>path.jon()与path.resolve()区别</h3><ul><li>path.resolve()的拼接路径字符串中，看是否有以 &#x2F; 、.&#x2F; 、..&#x2F;开头的路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);  <span class="comment">//   E:\fsl\nodeJs\coderwhy\day4\path</span></span><br><span class="line"><span class="comment">// path.resolve()的拼接路径字符串中，看是否有以 / 、./ 、../开头的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo1:  /开头</span></span><br><span class="line"><span class="keyword">const</span> basePath = <span class="string">&quot;/user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filePath1 = path.<span class="title function_">join</span>(basePath,filename);</span><br><span class="line"><span class="keyword">const</span> filePath2 = path.<span class="title function_">resolve</span>(basePath,filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath1);  <span class="comment">//  \user\why\abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath2);  <span class="comment">//  E:\user\why\abc.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo2: 没有/</span></span><br><span class="line"><span class="keyword">const</span> basePath2 = <span class="string">&quot;user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filePath3 = path.<span class="title function_">join</span>(basePath2,filename);</span><br><span class="line"><span class="keyword">const</span> filePath4 = path.<span class="title function_">resolve</span>(basePath2,filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath3);  <span class="comment">//   user\why\abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath4);  <span class="comment">//   E:\fsl\nodeJs\coderwhy\day4\path\user\why\abc.txt (__dirname+basePath2+filename);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo3: ./开头 (当前路径,和没有/是一样的)</span></span><br><span class="line"><span class="keyword">const</span> basePath3 = <span class="string">&quot;./user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filePath5 = path.<span class="title function_">join</span>(basePath3,filename);</span><br><span class="line"><span class="keyword">const</span> filePath6 = path.<span class="title function_">resolve</span>(basePath3,filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath5);  <span class="comment">//   user\why\abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath6);  <span class="comment">//   E:\fsl\nodeJs\coderwhy\day4\path\user\why\abc.txt (__dirname+basePath2+filename);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo4: ../开头</span></span><br><span class="line"><span class="keyword">const</span> basePath4 = <span class="string">&quot;../user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filePath7 = path.<span class="title function_">join</span>(basePath4,filename);</span><br><span class="line"><span class="keyword">const</span> filePath8 = path.<span class="title function_">resolve</span>(basePath4,filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath7);  <span class="comment">//  ..\user\why\abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath8);  <span class="comment">//  E:\fsl\nodeJs\coderwhy\day4\user\why\abc.txt(__dirname的上一层目录+basePath2+filename);</span></span><br></pre></td></tr></table></figure><blockquote><p>ps，如果第二个路径也有 &#x2F; </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> basePath = <span class="string">&quot;../user/why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> othername =<span class="string">&quot;/abc.txt&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> filePath1 = path.<span class="title function_">join</span>(basePath,othername);</span><br><span class="line"><span class="keyword">const</span> filePath2 = path.<span class="title function_">resolve</span>(basePath,othername);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath1);  <span class="comment">// ..\user\why\abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath2);  <span class="comment">// E:\abc.txt</span></span><br></pre></td></tr></table></figure><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><p>http模块用来做web服务器，详情见下篇。</p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> 内置模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs内置模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型与原型链</title>
      <link href="/articles/e8f85541.html"/>
      <url>/articles/e8f85541.html</url>
      
        <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。很简单吧，接下来进入正题：</p><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>每个函数或者类(其实本质就是一个函数)都天生自带prototype属性，prototype是对象数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 虽然写在注释里，但是你要注意：</span></span><br><span class="line"><span class="comment">// prototype是函数才会有的属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>) <span class="comment">// zs</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>) <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><p>那这个函数的prototype属性到底指向什么呢？是这个函数的原型吗？</p><p>其实，函数的prototype属性指向了一个对象，这个对象正是调用该构造函数而创建<strong>实例</strong>的原型，也就是上述例子中person1和person2的原型。</p><p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847783916yx.png" alt="原型1"></p><p>在这张图中我们用 Object.prototype 表示实例原型。</p><p>那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：</p><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h2><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>于是我们更新下关系图：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847817916yx2.png" alt="原型2"></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p><p>为了验证这一点，我们可以尝试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>所以再更新下关系图：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847852917yx3.png" alt="原型3"></p><p>综上我们已经得出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> == <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>以上内容可以用以下简述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  每个函数或者类(其实本质就是一个函数)都天生自带prototype属性   </span></span><br><span class="line"><span class="comment">  prototype是对象数据类型,浏览器天生给prototype这个对象增加了constructor属性,指向当前函数本身</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;哈哈&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Max</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hha&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(sum);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Max</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847890917yx4.png" alt="原型4"></p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>原型链是一种查找机制，当前实例用到某个属性或方法，当前实例自己有先用私有的，私有的没有，当前实例会通过__proto__这个属性，往当前这个实例所属类的原型进行查找，找不不到再通过__proto__这个属性往原型的原型进行查找，直到找不到为止就结束了；(找不到是null)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Kevin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Daisy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Daisy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.<strong>proto</strong> ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h2 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h2><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Kevin&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>其实原型对象(Person.prototype)就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847925973yx5.png" alt="原型链"></p><p>那Object.prototype 的原型呢？</p><p>null，我们可以打印：</p><p><code>console.log(Object.prototype.__proto__ === null) // true</code></p><p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。最后一张关系图也可以更新为：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847955916yx6.png" alt="原型与原型链"></p><p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://github.com/mqyqingfeng/Blog/issues/2">mqyqingfeng_blog</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 原型 </category>
          
          <category> 原型链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型 </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/articles/28239a8d.html"/>
      <url>/articles/28239a8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>在javaScript中我们我们有两大编程思想，面向过程（POP）和 面向对象（OOP）；</p><ul><li><p>面向过程：关心的是代码每一步的的实现，先去做什么然后再做什么</p></li><li><p>面向对象：不管新具体的代码实现细节，只关心结果；好处：减少代码冗余；便于后期维护；</p></li></ul><h2 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h2><ul><li>继承  -&gt;子类继承了父类的属性方法</li><li>封装-&gt; 将实现同样的代码段，放到一个函数中，可以重复使用，不需要关系代码实现的细节，实现代码的高内聚，低耦合</li><li>多态</li></ul><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><ul><li>类是对象的抽象，对象是类的具体</li><li>类是对象的模板，对象是类的产品</li></ul><h2 id="如何创建类"><a href="#如何创建类" class="headerlink" title="如何创建类"></a>如何创建类</h2><p>使用class关键字，class后面跟上类名，类名的命名使用帕斯卡命名法(首字母大写)</p><h2 id="如何实例化一个类"><a href="#如何实例化一个类" class="headerlink" title="如何实例化一个类"></a>如何实例化一个类</h2><p>实例化一个类就是创建一个实例(对象)，使用关键字new，后面跟上类名和实参列表，返回值是一个实例(对象)</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>构造器就是类中自带的一个方法，可以理解为前缀方法</li><li>当我们创建一个实例(对象)的同时，他会被自动调用，即出现new的时候，构造器自动执行；</li><li>每个类都有构造器，即使我们不定义构造器也存在，为空</li><li>构造器的方法是固定的，为constructor</li><li>因为class类没有传形参的地方，所以需要constructor()来传递形参，来实现动态类；</li></ul><p>简单demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;构造器执行了&quot;</span>)  <span class="comment">//构造器执行了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>创建一个动态类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义成员方法</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,age is <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>)  <span class="comment">//name is 张三,age is 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>一个类中存在另一个类的属性或方法，就是继承；</li><li>继承使用关键字extends；</li><li>继承的类称为子类，也叫派生类；</li><li>被继承的类称为父类，也叫基类；</li></ul><p>demo1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, money</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">money</span> = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义成员方法</span></span><br><span class="line">    <span class="title function_">kq</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的考勤&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">jx</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的绩效&quot;</span> + <span class="variable language_">this</span>.<span class="property">money</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">skq</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在审核考勤&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">worker.<span class="title function_">kq</span>(); <span class="comment">//张三的考勤</span></span><br><span class="line">worker.<span class="title function_">jx</span>(); <span class="comment">//张三的绩效10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boss = <span class="keyword">new</span> <span class="title class_">Boss</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">15000</span>);</span><br><span class="line">boss.<span class="title function_">kq</span>(); <span class="comment">//李四的考勤</span></span><br><span class="line">boss.<span class="title function_">jx</span>(); <span class="comment">//李四的绩效15000</span></span><br><span class="line">boss.<span class="title function_">skq</span>() <span class="comment">//李四正在审核考勤</span></span><br></pre></td></tr></table></figure><p>demo2：</p><p>有时候父类定义的方法不一定能满足子类的需求，可以通过在子类中重写该方法，会直接覆盖父类的方法  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, money</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">money</span> = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义成员方法</span></span><br><span class="line">    <span class="title function_">kq</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的考勤&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">kq</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的考勤跟你不一样,俺的是年度的~~~&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">worker.<span class="title function_">kq</span>(); <span class="comment">//张三的考勤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boss = <span class="keyword">new</span> <span class="title class_">Boss</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">15000</span>);</span><br><span class="line">boss.<span class="title function_">kq</span>(); <span class="comment">//李四的考勤跟你不一样,俺的是年度的~~~</span></span><br></pre></td></tr></table></figure><h2 id="继承构造器"><a href="#继承构造器" class="headerlink" title="继承构造器"></a>继承构造器</h2><ul><li>我们可以通过刚才的方法来重写一个方法，但如果父类的构造器无法满足子类的需求，得需要继承构造器；</li><li>关键字super；</li><li>我们需要在子类中重新定义一个构造器，并继承父类所有参数，然后在子类的构造器中，使用super继承父类的构造器；</li><li>其实就是子类用到的动态变量，父类没有，然后需要在子类中传形参；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, money</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">money</span> = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义成员方法</span></span><br><span class="line">    <span class="title function_">kq</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的工资为&quot;</span> + <span class="variable language_">this</span>.<span class="property">money</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Worker</span> &#123;</span><br><span class="line">    <span class="comment">// 1.子类中重新定义构造器 并继承父类所有参数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, money, sex</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.在子类的构造器中,使用super继承父类的构造器</span></span><br><span class="line">        <span class="variable language_">super</span>(name, money);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">kq</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的工资为&quot;</span> + <span class="variable language_">this</span>.<span class="property">money</span>+<span class="string">&quot;性别为&quot;</span>+<span class="variable language_">this</span>.<span class="property">sex</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">worker.<span class="title function_">kq</span>();  <span class="comment">//张三的工资为10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boss = <span class="keyword">new</span> <span class="title class_">Boss</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">15000</span>,<span class="number">1</span>);</span><br><span class="line">boss.<span class="title function_">kq</span>(); <span class="comment">//李四的工资为15000性别为1</span></span><br></pre></td></tr></table></figure><h1 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h1><h2 id="字面量方式"><a href="#字面量方式" class="headerlink" title="字面量方式"></a>字面量方式</h2><ul><li>优点：可以对命名空间进行划分,防止属性或方法冲突  (多个name也能区分开,因为属于对象私有属性或方法)</li><li>缺点：属于手工作业模式,不能实现批量生产 (相同功能的代码冗余)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优点：可以对命名空间进行划分,防止属性或方法冲突  (多个name也能区分开,因为属于对象私有属性或方法)</span></span><br><span class="line"><span class="comment">// 缺点：属于手工作业模式,不能实现批量生产 (相同功能的代码冗余)</span></span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;哈哈&quot;</span>,</span><br><span class="line">        <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;呵呵&quot;</span>,</span><br><span class="line">        <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>, obj2.<span class="property">name</span>);</span><br><span class="line">    obj1.<span class="title function_">fn</span>();</span><br><span class="line">    obj2.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><h2 id="工厂函数模式"><a href="#工厂函数模式" class="headerlink" title="工厂函数模式"></a>工厂函数模式</h2><p>我们可以封装一个函数，这个函数用于帮助我们创建一个对象，我们只需要重复调用这个函数即可；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, height</span>) &#123;</span><br><span class="line">    <span class="comment">//创建个空对象</span></span><br><span class="line">    <span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">    person.<span class="property">name</span> = name;</span><br><span class="line">    person.<span class="property">age</span> = age;</span><br><span class="line">    person.<span class="property">height</span> = height;</span><br><span class="line">    person.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将对象作为函数的返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title function_">createPerson</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">188</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title function_">createPerson</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">177</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title function_">createPerson</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">24</span>, <span class="number">178</span>);</span><br></pre></td></tr></table></figure><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><blockquote><p>在<code>ES5</code>之前，我们都是通过<code>function</code>来声明一个构造函数(类)的，之后通过<code>new</code>关键字来对其进行调用；(如果这么一个普通的函数被使用<code>new</code>操作符来调用了，那么这个函数就称之为是一个构造函数；其实为了区别开，声明的时候<strong>首字母建议大写</strong>)；</p><p>在<code>ES6</code>之后，JavaScript可以像别的语言一样，通过<code>class</code>来声明一个类；</p></blockquote><ul><li>优点：可以实现命名空间的划分，防止属性或方法冲突，可以实现批量生产，可以实例识别</li><li>缺点：不能实现公共的属性或方法公有，都是自己私有的</li></ul><p><strong>new的五步骤：</strong></p><blockquote><p>其实这个结合<code>工厂函数(普通函数共同属性封装)</code>更好理解。<code>构造函数</code>调用封装的函数，他既没有声明一个<code>新对象</code>，也没将函数内部的变量<code>return</code>出去，而且<code>构造函数</code>内部使用的是<code>this</code>与对象的属性产生关联；所以<code>实例化对象</code>的时候，按道理是报错的，所以构造函数创建新对象，返回新对象，内部使用的this与创建的新对象关系绑定等操作，需要一个东西来完成，这个东西就是在调用构造函数前，使用的<code>new</code>关键字来完成的。</p></blockquote><ol><li>创建一个新的空对象(空实例)(obj)</li><li>将构造函数的显式原型赋值给这个新对象，作为新对象的隐式原型</li><li>构造函数内部的this，会指向创建出来的新对象(this指向第一步的空对象)</li><li>执行函数体的代码块</li><li>返回对象</li></ol><p>简单实现一下new</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn,...args</span>)&#123;</span><br><span class="line"> <span class="comment">//第一步：创建一个空对象</span></span><br><span class="line"> <span class="keyword">const</span> obj=&#123;&#125;;</span><br><span class="line"> <span class="comment">//第二步：将构造函数的显式原型赋值给这个新对象,作为新对象的隐式原型</span></span><br><span class="line"> obj.<span class="property">__proto__</span>=fn.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"> <span class="comment">//第三步：this指向obj,并调用构造函数</span></span><br><span class="line"> fn.<span class="title function_">apply</span>(obj,args);</span><br><span class="line"> <span class="comment">//第四步：返回对象</span></span><br><span class="line"> <span class="keyword">return</span> obj; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>instance of：</strong>检测当前这个实例(对象)是否属于某个类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//instance of 检测当前这个实例(对象)是否属于某个类</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>简单案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类是对象的抽象，对象是类的具体    </span></span><br><span class="line"><span class="comment">//这个类是我们自己创建的(类名须大写,和普通函数区别)</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//当前实例 (person1,person2)</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new 类(); new了函数(类)就自己执行了，不用再去调用</span></span><br><span class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();  <span class="comment">//Person &#123;&#125;</span></span><br><span class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();  <span class="comment">//Person &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字:<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,年龄:<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 类(); new了函数(类)就自己执行了，不用再去调用</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1); <span class="comment">//Person &#123;name: &#x27;张三&#x27;, age: 19, say: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">//Person &#123;name: &#x27;李四&#x27;, age: 20, say: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">say</span> === person2.<span class="property">say</span>); <span class="comment">//false  缺点:这个方法是每个函数私有的</span></span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul><li>优点：可以实现命名空间的划分，防止属性或方法冲突，可以实现批量生产，可以实例识别，可以实现公共属性或方法公有；</li><li>原型模式的基于构造函数模式的；</li><li>原型模式将当前实例(对象)公有的属性或方法写到prototype上；</li><li>prototype是当前函数(类)的属性；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型模式的基于构造函数模式的;</span></span><br><span class="line"><span class="comment">// 原型模式将当前实例(对象)公有的属性或方法写到prototype上;</span></span><br><span class="line"><span class="comment">// prototype是当前函数(类)的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 私有的属性或方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共有的属性或方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`name:<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,age:<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">test</span> = <span class="string">&quot;我是测试用的~&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">say</span> === person2.<span class="property">say</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>详情可参考：</p><p><a href="https://fsllala.eu.org/2022/02/26/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/">原型与原型链</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 构造函数 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventLoop</title>
      <link href="/articles/df38ec5a.html"/>
      <url>/articles/df38ec5a.html</url>
      
        <content type="html"><![CDATA[<h1 id="EventLoop-事件循环"><a href="#EventLoop-事件循环" class="headerlink" title="EventLoop(事件循环)"></a>EventLoop(事件循环)</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>首先我们需要知道JS是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种“多线程”是通过单线程模仿的，也就是假的。那么就产生了同步任务和异步任务。</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656842096917eventLoop.png" alt="eventLoop"></p><p>导图要表达的内容用文字来表述的话：</p><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue(任务队列)。</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li><li>事件循环中，每进行一次循环操作称为tick。</li></ul><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><h3 id="线程和进程是操作系统中的两个概念："><a href="#线程和进程是操作系统中的两个概念：" class="headerlink" title="线程和进程是操作系统中的两个概念："></a>线程和进程是操作系统中的两个概念：</h3><ul><li>进程（process）：计算机已经运行的程序；</li><li>线程（thread）：操作系统能够运行运算调度的最小单位；</li></ul><h3 id="听起来很抽象，我们直观一点解释："><a href="#听起来很抽象，我们直观一点解释：" class="headerlink" title="听起来很抽象，我们直观一点解释："></a>听起来很抽象，我们直观一点解释：</h3><ul><li>进程：我们可以认为，启动一个应用程序，就会默认启动一个进程（也可能是多个进程）；</li><li>线程：每一个进程中，都会启动一个线程用来执行程序中的代码，这个线程被称之为主线程；</li><li>所以我们也可以说进程是线程的容器；</li></ul><h3 id="再用一个形象的例子解释："><a href="#再用一个形象的例子解释：" class="headerlink" title="再用一个形象的例子解释："></a>再用一个形象的例子解释：</h3><ul><li>操作系统类似于一个工厂；</li><li>工厂中里有很多车间，这个车间就是进程；</li><li>每个车间可能有一个以上的工人在工厂，这个工人就是线程；</li></ul><h2 id="多进程多线程开发"><a href="#多进程多线程开发" class="headerlink" title="多进程多线程开发"></a>多进程多线程开发</h2><blockquote><p>操作系统是如何做到同时让多个进程（边听歌、边写代码、边查阅资料）同时工作呢？</p></blockquote><ul><li>这是因为CPU的运算速度非常快，它可以快速的在多个进程之间迅速的切换；</li><li>当我们的进程中的线程获取获取到时间片时，就可以快速执行我们编写的代码；</li><li>对于用于来说是感受不到这种快速的切换的；</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/jincheng.png" alt="进程与线程"></p><h2 id="浏览器多进程"><a href="#浏览器多进程" class="headerlink" title="浏览器多进程"></a>浏览器多进程</h2><blockquote><p>浏览器是一个进程吗，它里面只有一个线程吗？</p></blockquote><ul><li>目前多数的浏览器其实都是多进程的，当我们打开一个tab页面时就会开启一个新的进程，这是为了防止一个 页面卡死而造成所有页面无法响应，整个浏览器需要强制退出；</li><li>每个进程中又有很多的线程，其中包括执行JavaScript代码的线程；</li></ul><blockquote><p>但是JavaScript的代码执行是在一个单独的线程中执行的。</p></blockquote><ul><li>这就意味着JavaScript的代码，在同一个时刻只能做一件事；</li><li>如果这件事是非常耗时的，就意味着当前的线程就会被阻塞；</li></ul><h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><p>宏任务是由宿主发起的，而微任务是由JS发起的。</p><table><thead><tr><th align="center">名称</th><th align="center">宏任务(macrotask)</th><th align="center">微任务(microtask)</th></tr></thead><tbody><tr><td align="center">谁发起的</td><td align="center">宿主(node、浏览器)</td><td align="center">JS引擎</td></tr><tr><td align="center">谁先运行</td><td align="center">后运行</td><td align="center">先运行</td></tr><tr><td align="center">会触发新一轮Tick吗</td><td align="center">会</td><td align="center">不会</td></tr></tbody></table><blockquote><p>事件循环中维护着两个队列</p></blockquote><ol><li>宏任务队列主要包括：</li></ol><ul><li>script(整体代码)  ps:可以理解为外层同步代码</li><li>ajax</li><li>setTimeout</li><li>setInterval</li><li>UI交互事件</li><li>I&#x2F;O（Node.js）</li><li>setImmediate(Node.js 环境)</li></ul><ol start="2"><li>微任务队列主要包括：</li></ol><ul><li>Promise的then回调</li><li>process.nextTick（Node.js）</li><li>Mutation Observer API</li><li>queueMicrotask()</li></ul><h2 id="宏任务与微任务是怎么执行的"><a href="#宏任务与微任务是怎么执行的" class="headerlink" title="宏任务与微任务是怎么执行的"></a>宏任务与微任务是怎么执行的</h2><ul><li><p>main script中的代码优先执行（编写的顶层script代码）；</p></li><li><p>在执行任何一个宏任务之前（不是队列，是一个宏任务），都会先查看微任务队列中是否有任务需要执行；</p></li><li><p>也就是宏任务执行之前，必须保证微任务队列是空的；</p></li><li><p>如果不为空，那么就优先执行微任务队列中的任务（回调）；</p></li><li><p>总结：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。（每次执行宏任务之前，都会在微任务队列里检查有没有微任务，有的话就先把微任务队列里执行完，然后再执行此个宏任务）</p></li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656842195916eventLoop1.png" alt="宏微任务"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>DEMO1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 5 3 4 1</span></span><br></pre></td></tr></table></figure><p>分析：(其实先找同步的，然后再找微任务，再找宏任务比较快)  ps：看第2条</p><ol><li>遇到setTimout，异步宏任务，放入宏任务队列中</li><li>遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出2</li><li>而Promise.then中注册的回调才是异步执行的，将其放入微任务队列中</li><li>遇到同步任务console.log(‘5’);输出5；主线程中同步任务执行完</li><li>从微任务队列中取出任务到主线程中，输出3、 4，微任务队列为空</li><li>从宏任务队列中取出任务到主线程中，输出1，宏任务队列为空</li></ol><p>DEMO2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before timeout&#x27;</span>);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;also before timeout&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//1 2 3 before timeout also before timeout 4 test</span></span><br></pre></td></tr></table></figure><p>分析：</p><ol><li>看到setTimeout，为宏任务，直接不用管了，往下找</li><li>看到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出1</li><li>而Promise.then中注册的回调才是异步执行的，将其放入微任务队列中</li><li>遇到同步任务console.log(‘2’);输出2；主线程中同步任务执行完</li><li>微任务队列中取出任务到主线程中，输出3，此微任务中又有微任务，Promise.resolve().then(微任务a).then(微任务b)，将其依次放入微任务队列中</li><li>从微任务队列中取出任务a到主线程中，输出 before timeout；</li><li>从微任务队列中取出任务b到主线程中，任务b又注册了一个微任务c，放入微任务队列中；</li><li>从微任务队列中取出任务c到主线程中，输出 also before timeout；微任务队列为空</li><li>从宏任务队列中取出任务到主线程，此任务中注册了一个微任务d，将其放入微任务队列中，接下来遇到输出4，宏任务队列为空</li><li>从微任务队列中取出任务d到主线程 ，输出test，微任务队列为空</li></ol><p>DEMO3：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//1 7 6 8 2 4 3 5 9 11 10 12</span></span><br></pre></td></tr></table></figure><p>分析：(大白话版)</p><ol><li>同步任务直接输出 1</li><li>遇到setTimeout，加入宏任务队列(后执行的那种，整个函数就先不用看了)</li><li>process.nextTick，加入微任务队列</li><li>new Promise,new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出7</li><li>而Promise.then中注册的回调才是异步执行的，将其放入微任务队列中</li><li>遇到setTimeout，加入宏任务队列(后执行的那种，整个函数就先不用看了)   主线程中同步任务执行完</li><li>找微任务，因为是栈，所以先入先出，所以从上往下找，process.nextTick 输出 6</li><li>new Promise.then  输出 8</li><li>找宏任务；在宏任务里面先找同步代码 输出 2 、4；然后找微任务：输出3、5</li><li>找宏任务；在宏任务里面先找同步代码 输出 9、11；然后找微任务：输出10、12</li></ol><p>DEMO4:</p><blockquote><p>async await是promise的语法糖</p></blockquote><ul><li>我们可以将await关键字后面执行的代码,看做是包裹在(resolve,reject)&#x3D;&gt;{函数执行}的代码；</li><li>await 的下一条语句,可以看做是then(res&#x3D;&gt;{函数执行})中的代码；</li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/asyncQuenen.png" alt="async执行"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"><span class="comment">//script start  async1 start  async2  promise1  script end  async1 end  promise2  setTimeout</span></span><br></pre></td></tr></table></figure><p>分析：</p><ol><li>遇到函数 async1，async2定义，不会执行，不用管；</li><li>同步任务：输出 “script start”</li><li>setTimeout，加入宏任务队列；</li><li>async1()调用，输出 “async1 start”；下一行：await async2();相当于promise里面的resolve包裹的代码,直接执行，输出”async2”；下一行 ：console.log(“async1 end”);相当于promise中的then，加入微任务队列；</li><li>输出”promise1”，resolve()调用.then中的代码,但是为微任务，加入微任务队列；</li><li>输出”script end”</li><li>在微任务队列中查找，不为空，依次执行队列：输出”async1 end”；输出”promise2”</li><li>在宏任务队列中查找，检查微任务队列是否为空，为空，执行此个宏任务，输出”setTimeout”</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/NancyFyn/article/details/118407548?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~LandingCtr~Rate-1.queryctrv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~LandingCtr~Rate-1.queryctrv4&utm_relevant_index=2">什么是宏任务、微任务？宏任务、微任务有哪些？又是怎么执行的？</a></li><li><a href="https://zhuanlan.zhihu.com/p/87684858">深入理解事件循环</a></li><li><a href="https://www.cnblogs.com/wangziye/p/9566454.html">JS宏任务和微任务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> EventLoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宏任务 </tag>
            
            <tag> 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖拽</title>
      <link href="/articles/ef0a4464.html"/>
      <url>/articles/ef0a4464.html</url>
      
        <content type="html"><![CDATA[<h1 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h1><h2 id="位置信息"><a href="#位置信息" class="headerlink" title="位置信息"></a>位置信息</h2><ul><li>clientX &#x2F; clientY       获取距离可视区域的距离；</li><li>pageX &#x2F; pageY        获取距离文档的（没有滚动条的时候与client一样）；</li><li>screenX &#x2F; screenY  获取距离屏幕 （指的电脑屏幕）；</li></ul><h2 id="拖拽涉及到的事件"><a href="#拖拽涉及到的事件" class="headerlink" title="拖拽涉及到的事件"></a>拖拽涉及到的事件</h2><ul><li>按下：onmousedown</li><li>移动：onmousemove</li><li>抬起：onmouseup</li></ul><h2 id="拖拽的实现"><a href="#拖拽的实现" class="headerlink" title="拖拽的实现"></a>拖拽的实现</h2><ol><li>找到一个固定值(不变的点)&#x3D;&gt;鼠标距离拖拽元素的距离(因为按下拖动的时候这个距离不变)。</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656848441915tz.png" alt="不变的坐标"></p><ol start="2"><li>获取拖拽后元素距离body的距离 (offset不行)</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656848491916tz2.png" alt="拖拽"></p><h2 id="第一版代码"><a href="#第一版代码" class="headerlink" title="第一版代码"></a>第一版代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 拖拽一共三个状态 ：</span></span><br><span class="line"><span class="comment"> 1.按下：onmousedown</span></span><br><span class="line"><span class="comment"> 2.移动：onmousemove</span></span><br><span class="line"><span class="comment"> 3.抬起：onmouseup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="comment">// 找到一个固定值(不变的点)=&gt;鼠标距离拖拽元素的距离(因为按下拖动的时候这个距离不变)</span></span><br><span class="line"> <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="comment">// 1.鼠标按下</span></span><br><span class="line"> box.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">     <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">     ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">     <span class="comment">// 获取鼠标距离拖拽元素的距离</span></span><br><span class="line">     <span class="keyword">var</span> x = ev.<span class="property">clientX</span> - box.<span class="property">offsetLeft</span>;</span><br><span class="line">     <span class="keyword">var</span> y = ev.<span class="property">clientY</span> - box.<span class="property">offsetTop</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.鼠标移动事件  肯定在鼠标按下事件里面</span></span><br><span class="line">     box.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">         <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">         ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">         <span class="comment">// 确定box的位置</span></span><br><span class="line">         <span class="keyword">var</span> left = ev.<span class="property">clientX</span> - x;</span><br><span class="line">         <span class="keyword">var</span> top = ev.<span class="property">clientY</span> - y;</span><br><span class="line">         <span class="comment">// 设置(得设置绝对定位)</span></span><br><span class="line">         box.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         box.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//  3.鼠标抬起(可以在鼠标按下里面,也可以不在里面)</span></span><br><span class="line"> box.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 移除鼠标的移动事件;  因为抬起了鼠标还可以移动</span></span><br><span class="line">     box.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>bug：鼠标移动过快，鼠标可能会离开div(box)，进而到文档上。</strong></p><h2 id="第二版代码"><a href="#第二版代码" class="headerlink" title="第二版代码"></a>第二版代码</h2><p><strong>将鼠标移动和抬起的对象设置为了文档，别的未修改。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 拖拽一共三个状态 ：</span></span><br><span class="line"><span class="comment"> 1.按下：onmousedown</span></span><br><span class="line"><span class="comment"> 2.移动：onmousemove</span></span><br><span class="line"><span class="comment"> 3.抬起：onmouseup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="comment">// 找到一个固定值(不变的点)=&gt;鼠标距离拖拽元素的距离(因为按下拖动的时候这个距离不变)</span></span><br><span class="line"> <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="comment">// 1.鼠标按下</span></span><br><span class="line"> box.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">     <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">     ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">     <span class="comment">// 获取鼠标距离拖拽元素的距离</span></span><br><span class="line">     <span class="keyword">var</span> x = ev.<span class="property">clientX</span> - box.<span class="property">offsetLeft</span>;</span><br><span class="line">     <span class="keyword">var</span> y = ev.<span class="property">clientY</span> - box.<span class="property">offsetTop</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.鼠标移动事件  肯定在鼠标按下事件里面</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">         <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">         ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">         <span class="comment">// 确定box的位置</span></span><br><span class="line">         <span class="keyword">var</span> left = ev.<span class="property">clientX</span> - x;</span><br><span class="line">         <span class="keyword">var</span> top = ev.<span class="property">clientY</span> - y;</span><br><span class="line">         <span class="comment">// 设置(得设置绝对定位)</span></span><br><span class="line">         box.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         box.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//  3.鼠标抬起(可以在鼠标按下里面,也可以不在里面)</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 移除鼠标的移动事件;  因为抬起了鼠标还可以移动</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>bug：能超出屏幕范围。</strong></p><h2 id="第三版代码"><a href="#第三版代码" class="headerlink" title="第三版代码"></a>第三版代码</h2><p><strong>限制边界，别的未修改。</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 拖拽一共三个状态 ：</span></span><br><span class="line"><span class="comment"> 1.按下：onmousedown</span></span><br><span class="line"><span class="comment"> 2.移动：onmousemove</span></span><br><span class="line"><span class="comment"> 3.抬起：onmouseup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="comment">// 找到一个固定值(不变的点)=&gt;鼠标距离拖拽元素的距离(因为按下拖动的时候这个距离不变)</span></span><br><span class="line"> <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="comment">// 1.鼠标按下</span></span><br><span class="line"> box.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">     <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">     ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">     <span class="comment">// 获取鼠标距离拖拽元素的距离</span></span><br><span class="line">     <span class="keyword">var</span> x = ev.<span class="property">clientX</span> - box.<span class="property">offsetLeft</span>;</span><br><span class="line">     <span class="keyword">var</span> y = ev.<span class="property">clientY</span> - box.<span class="property">offsetTop</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 2.鼠标移动事件  肯定在鼠标按下事件里面</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">         <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">         ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">         <span class="comment">// 确定box的位置</span></span><br><span class="line">         <span class="keyword">var</span> left = ev.<span class="property">clientX</span> - x;</span><br><span class="line">         <span class="keyword">var</span> top = ev.<span class="property">clientY</span> - y;</span><br><span class="line">         <span class="comment">// 边界判断</span></span><br><span class="line">         <span class="keyword">var</span> minLeft = <span class="number">0</span>,</span><br><span class="line">             maxLeft = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> - box.<span class="property">clientWidth</span>;</span><br><span class="line">         <span class="keyword">var</span> minTop = <span class="number">0</span>,</span><br><span class="line">             maxTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> - box.<span class="property">clientHeight</span>;</span><br><span class="line">         <span class="keyword">if</span> (left &lt;= minLeft) &#123;</span><br><span class="line">             left = minLeft;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= maxLeft) &#123;</span><br><span class="line">             left = maxLeft;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (top &lt;= minTop) &#123;</span><br><span class="line">             top = minTop;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= maxTop) &#123;</span><br><span class="line">             top = maxTop;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 设置(得设置绝对定位)</span></span><br><span class="line">         box.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         box.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//  3.鼠标抬起(可以在鼠标按下里面,也可以不在里面)</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 移除鼠标的移动事件;  因为抬起了鼠标还可以移动</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>bug：当div里面有图片或者文字的时候，会有默认行为。</strong></p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><p><strong>在鼠标按下里增加了阻止默认行为。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 拖拽一共三个状态 ：</span></span><br><span class="line"><span class="comment"> 1.按下：onmousedown</span></span><br><span class="line"><span class="comment"> 2.移动：onmousemove</span></span><br><span class="line"><span class="comment"> 3.抬起：onmouseup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="comment">// 找到一个固定值(不变的点)=&gt;鼠标距离拖拽元素的距离(因为按下拖动的时候这个距离不变)</span></span><br><span class="line"> <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;btn&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置一个数组存数值;</span></span><br><span class="line"> <span class="keyword">var</span> stepArr = []</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.鼠标按下</span></span><br><span class="line"> box.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">     <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">     ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">     stepArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">         <span class="attr">left</span>: <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(box).<span class="property">left</span>),</span><br><span class="line">         <span class="attr">top</span>: <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(box).<span class="property">top</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// 阻止默认行为</span></span><br><span class="line">     ev.<span class="property">preventDafault</span>?ev.<span class="title function_">preventDafault</span>():ev.<span class="property">returnValue</span>=<span class="literal">false</span>;</span><br><span class="line">     <span class="comment">// 获取鼠标距离拖拽元素的距离</span></span><br><span class="line">     <span class="keyword">var</span> x = ev.<span class="property">clientX</span> - box.<span class="property">offsetLeft</span>;</span><br><span class="line">     <span class="keyword">var</span> y = ev.<span class="property">clientY</span> - box.<span class="property">offsetTop</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.鼠标移动事件  肯定在鼠标按下事件里面</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">         <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">         ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">         <span class="comment">// 确定box的位置</span></span><br><span class="line">         <span class="keyword">var</span> left = ev.<span class="property">clientX</span> - x;</span><br><span class="line">         <span class="keyword">var</span> top = ev.<span class="property">clientY</span> - y;</span><br><span class="line">         <span class="comment">// 边界判断</span></span><br><span class="line">         <span class="keyword">var</span> minLeft = <span class="number">0</span>,</span><br><span class="line">             maxLeft = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> - box.<span class="property">clientWidth</span>;</span><br><span class="line">         <span class="keyword">var</span> minTop = <span class="number">0</span>,</span><br><span class="line">             maxTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> - box.<span class="property">clientHeight</span>;</span><br><span class="line">         <span class="keyword">if</span> (left &lt;= minLeft) &#123;</span><br><span class="line">             left = minLeft;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= maxLeft) &#123;</span><br><span class="line">             left = maxLeft;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (top &lt;= minTop) &#123;</span><br><span class="line">             top = minTop;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= maxTop) &#123;</span><br><span class="line">             top = maxTop;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 设置(得设置绝对定位)</span></span><br><span class="line">         box.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         box.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         <span class="comment">// 添加移动的坐标</span></span><br><span class="line">         stepArr.<span class="title function_">push</span>(&#123; <span class="string">&quot;left&quot;</span>: left &#125;, &#123; <span class="string">&quot;top&quot;</span>: top &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//  3.鼠标抬起(可以在鼠标按下里面,也可以不在里面)</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 移除鼠标的移动事件;  因为抬起了鼠标还可以移动</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 防止多次点击,先清除定时器</span></span><br><span class="line">     <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">     <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">     <span class="comment">// 设置定时器(自定义属性)</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="comment">// 拿取末尾的值;原来的数组会改变;</span></span><br><span class="line">         <span class="keyword">var</span> curStep = stepArr.<span class="title function_">pop</span>();</span><br><span class="line">         <span class="keyword">if</span> (stepArr.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">left</span> = curStep.<span class="property">left</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">top</span> = curStep.<span class="property">top</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">             <span class="comment">// 清除定时器</span></span><br><span class="line">             <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(that.<span class="property">timer</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">left</span> = curStep.<span class="property">left</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">top</span> = curStep.<span class="property">top</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;, <span class="number">10</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="拖拽自动回放"><a href="#拖拽自动回放" class="headerlink" title="拖拽自动回放"></a>拖拽自动回放</h2><p>设置一个数组用来存放坐标，每次通过pop()将末尾的值赋值给拖拽元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 拖拽一共三个状态 ：</span></span><br><span class="line"><span class="comment"> 1.按下：onmousedown</span></span><br><span class="line"><span class="comment"> 2.移动：onmousemove</span></span><br><span class="line"><span class="comment"> 3.抬起：onmouseup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="comment">// 找到一个固定值(不变的点)=&gt;鼠标距离拖拽元素的距离(因为按下拖动的时候这个距离不变)</span></span><br><span class="line"> <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;btn&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置一个数组存数值;</span></span><br><span class="line"> <span class="keyword">var</span> stepArr = []</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.鼠标按下</span></span><br><span class="line"> box.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">     <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">     ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">     <span class="comment">//存放初始值</span></span><br><span class="line">     stepArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">         <span class="attr">left</span>: <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(box).<span class="property">left</span>),</span><br><span class="line">         <span class="attr">top</span>: <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(box).<span class="property">top</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// 阻止默认行为</span></span><br><span class="line">     ev.<span class="property">preventDafault</span>?ev.<span class="title function_">preventDafault</span>():ev.<span class="property">returnValue</span>=<span class="literal">false</span>;</span><br><span class="line">     <span class="comment">// 获取鼠标距离拖拽元素的距离</span></span><br><span class="line">     <span class="keyword">var</span> x = ev.<span class="property">clientX</span> - box.<span class="property">offsetLeft</span>;</span><br><span class="line">     <span class="keyword">var</span> y = ev.<span class="property">clientY</span> - box.<span class="property">offsetTop</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.鼠标移动事件  肯定在鼠标按下事件里面</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">         <span class="comment">// 事件对象的兼容性处理</span></span><br><span class="line">         ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">         <span class="comment">// 确定box的位置</span></span><br><span class="line">         <span class="keyword">var</span> left = ev.<span class="property">clientX</span> - x;</span><br><span class="line">         <span class="keyword">var</span> top = ev.<span class="property">clientY</span> - y;</span><br><span class="line">         <span class="comment">// 边界判断</span></span><br><span class="line">         <span class="keyword">var</span> minLeft = <span class="number">0</span>,</span><br><span class="line">             maxLeft = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> - box.<span class="property">clientWidth</span>;</span><br><span class="line">         <span class="keyword">var</span> minTop = <span class="number">0</span>,</span><br><span class="line">             maxTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> - box.<span class="property">clientHeight</span>;</span><br><span class="line">         <span class="keyword">if</span> (left &lt;= minLeft) &#123;</span><br><span class="line">             left = minLeft;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= maxLeft) &#123;</span><br><span class="line">             left = maxLeft;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (top &lt;= minTop) &#123;</span><br><span class="line">             top = minTop;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= maxTop) &#123;</span><br><span class="line">             top = maxTop;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 设置(得设置绝对定位)</span></span><br><span class="line">         box.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         box.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         <span class="comment">// 添加移动的坐标</span></span><br><span class="line">         stepArr.<span class="title function_">push</span>(&#123; <span class="string">&quot;left&quot;</span>: left &#125;, &#123; <span class="string">&quot;top&quot;</span>: top &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//  3.鼠标抬起(可以在鼠标按下里面,也可以不在里面)</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 移除鼠标的移动事件;  因为抬起了鼠标还可以移动</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 防止多次点击,先清除定时器</span></span><br><span class="line">     <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">     <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">     <span class="comment">// 设置定时器(自定义属性)</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="comment">// 拿取末尾的值;原来的数组会改变;</span></span><br><span class="line">         <span class="keyword">var</span> curStep = stepArr.<span class="title function_">pop</span>();</span><br><span class="line">         <span class="keyword">if</span> (stepArr.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">left</span> = curStep.<span class="property">left</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">top</span> = curStep.<span class="property">top</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">             <span class="comment">// 清除定时器</span></span><br><span class="line">             <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(that.<span class="property">timer</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">left</span> = curStep.<span class="property">left</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">             box.<span class="property">style</span>.<span class="property">top</span> = curStep.<span class="property">top</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;, <span class="number">10</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 拖拽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拖拽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒加载</title>
      <link href="/articles/3d72a2c2.html"/>
      <url>/articles/3d72a2c2.html</url>
      
        <content type="html"><![CDATA[<h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>页面运行到浏览器，图片是不立即进行加载的。</p><h2 id="懒加载的优势"><a href="#懒加载的优势" class="headerlink" title="懒加载的优势"></a>懒加载的优势</h2><ol><li>保证图片一定能够加载成功，防止破图，增强用户体验。</li><li>有利于性能优化。</li></ol><h2 id="懒加载的实现"><a href="#懒加载的实现" class="headerlink" title="懒加载的实现"></a>懒加载的实现</h2><ol><li>在css中设置占位背景图，并将图片设置为display:none；</li><li>将真实的图片的地址放到结构的自定义属性上，不直接给到图片的src；</li><li>保证这个图片的地址是正确的，在赋值给这个图片的src；</li></ol><h2 id="首屏页面"><a href="#首屏页面" class="headerlink" title="首屏页面"></a>首屏页面</h2><p>保证图片资源一定能够加载成功才去加载当前这张图片，即延迟一定时间去展示图片。</p><p>步骤：</p><ol><li>先弄一个占位背景图；</li><li>默认图片是隐藏的；</li><li>创建一个临时的图片；</li><li>将真实图片的地址赋值给当前这个临时图片的src；</li><li>判断当前这个图片资源是否加载成功；</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="comment">/* 1.先弄一个占位背景图 */</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./img/loading.gif</span>) no-repeat center <span class="number">#efefef</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="comment">/* 2.默认图片是隐藏的 */</span></span><br><span class="line">        <span class="comment">/*注：图片隐藏了display:none 由于不站位,js盒模型的13个属性是获取不到值的 */</span></span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">trueSrc</span>=<span class="string">&quot;./img/0.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 页面运行到浏览器(1s后展示)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(imgLazy, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">imgLazy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3.先创建一个临时的图片</span></span><br><span class="line">    <span class="keyword">var</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.将真实图片的地址赋值给当前这个临时图片的src</span></span><br><span class="line">    oImg.<span class="property">src</span> = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;trueSrc&#x27;</span>);</span><br><span class="line">    <span class="comment">// 5.判断当前这个图片资源是否加载成功   </span></span><br><span class="line">    oImg.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//加载成功才会执行</span></span><br><span class="line">        img.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">src</span>;</span><br><span class="line">        img.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他屏页面"><a href="#其他屏页面" class="headerlink" title="其他屏页面"></a>其他屏页面</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">      * &#123;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">html</span> &#123;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.box</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">1000px</span> auto;</span><br><span class="line">          <span class="comment">/* 1.背景图占位 */</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./img/loading.gif</span>) no-repeat center <span class="number">#ededed</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">border</span>: none;</span><br><span class="line">          <span class="comment">/* 2.设置隐藏 */</span></span><br><span class="line">          <span class="comment">/* display none不占位,js的13个属性获取不到值 */</span></span><br><span class="line">          <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">trueSrc</span>=<span class="string">&quot;./img/0.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> winH = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scrollT = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="comment">// 判断：首屏高度+滚动条滚去的高度&gt;=图片底部到body的距离</span></span><br><span class="line">    <span class="comment">// 因为图片display:none,不占位,所以js盒模型的13个属性获取不到,故改用其父亲</span></span><br><span class="line">    <span class="keyword">if</span> (winH + scrollT &gt;= img.<span class="property">parentNode</span>.<span class="property">offsetTop</span> + img.<span class="property">parentNode</span>.<span class="property">clientHeight</span>) &#123;</span><br><span class="line">        <span class="title function_">imgLazy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">imgLazy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3.动态创建img标签</span></span><br><span class="line">    <span class="keyword">var</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">     <span class="comment">// 4.将真实图片的地址赋值给当前这个临时图片的src</span></span><br><span class="line">    oImg.<span class="property">src</span> = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;trueSrc&#x27;</span>);</span><br><span class="line">     <span class="comment">// 5.判断当前这个图片资源是否加载成功   </span></span><br><span class="line">    oImg.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        img.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">src</span>;</span><br><span class="line">        img.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 图片懒加载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS盒模型</title>
      <link href="/articles/16b55383.html"/>
      <url>/articles/16b55383.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS盒模型"><a href="#JS盒模型" class="headerlink" title="JS盒模型"></a>JS盒模型</h1><ul><li>JS盒子模型更快的去获取CSS盒子模型的值</li><li>3个系列，13个属性，获取到的都是<strong>具体的数值(不带单位)</strong></li></ul><h2 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h2><ul><li>clientWidth：元素自身的宽度+左右填充；<code>width + padding-left + padding-right</code></li><li>clientHeight：元素自身的高度+上下填充；<code>height + padding-top + padding-bottom</code></li><li>clientLeft：元素对象的左边框；<code>border-left</code></li><li>clientTop：元素对象的上边框；<code>border-top</code></li></ul><h2 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h2><ul><li>offsetWidth：clientWidth+左右边框；<code>clientWidth + border-left + border-right</code></li><li>offsetHeight：clientHeight+上下边框；<code>clientHeight + border-top + border-bottom</code></li></ul><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/offsetWidth120180816173539646.png" alt="offsetWidth"></p><ul><li><p>offsetParent：取已经定位的父集元素，没有已经定位的父集元素，就是获取body；</p></li><li><p>offsetLeft&#x2F;offsetTop：在不同的浏览器中其值不同，且与父元素的position属性（relative,absolute,fixed）有关。现分以下几种情况说明：</p><ol><li>在父元素均不设置position属性时，在Chrome，opera和IE浏览器中offsetLeft是元素边框外侧到浏览器窗口内侧的距离：</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/offsetLeft120180816171816115.png" alt="offsetLeft"></p><ol start="2"><li><p>当父元素设置position元素时又分为两种情况：</p><ol><li>如果父元素是body且body设置了position属性，在Chrome和opera浏览器中offsetLeft是元素边框外侧到body边框外侧的距离</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/offsetLeft220180816172015337.png" alt="offsetLeft"></p><ol start="2"><li>如果父元素不是body元素且设置了position属性时，offsetLeft为元素边框外侧到父元素边框内侧的距离（各浏览器情况一致）。</li></ol><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/offsetLeft320180816172126830.png" alt="offsetLeft"></p></li></ol></li></ul><h2 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h2><ul><li>内容没有溢出 相当于clientWidth &#x2F; clientHeight</li><li>内容溢出： (得到的值是一个约等于的值，而且不同浏览器有一定的差异，因为对字体，行高等渲染的机制不一样)<ul><li>scrollWidth：返回元素的整体宽度，包括由于溢出而无法展示在网页的不可见部分。</li><li>scrollHeight：返回元素的整体高度，包括由于溢出而无法展示在网页的不可见部分。</li></ul></li><li>scrollLeft &#x2F; scrollTop：滚动条卷去 相当于页面被卷去的</li></ul><h2 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h2><ol><li>js获取body&#x3D;&gt;document.body；</li><li>js获取html&#x3D;&gt;document.documentElement；</li><li>有h5的声明body不兼容;没有h5的声明html不兼容；</li><li>声明了文档类型就用html 没有声明文档类型就用body；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容处理</span></span><br><span class="line"><span class="keyword">var</span> scrollT = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line"><span class="keyword">var</span> scrollL = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>;</span><br></pre></td></tr></table></figure><h2 id="判断滚动条滚到页面底部"><a href="#判断滚动条滚到页面底部" class="headerlink" title="判断滚动条滚到页面底部"></a>判断滚动条滚到页面底部</h2><blockquote><p>需要了解三个dom元素，分别是：clientHeight、offsetHeight、scrollTop。</p></blockquote><ol><li><p>clientHeight：这个元素的高度，占用整个空间的高度，所以，如果一个div有滚动条，那个这个高度则是不包括滚动条没显示出来的下面部分的内容。而只是单纯的DIV的高度。</p></li><li><p>offsetHeight：是指元素内容的高度。依照上面的，那这个高度呢就是DIV内部的高度，包括可见部分及以滚动条下面的不可见部分。</p></li><li><p>scrollTop：这个是什么呢？他可以理解为滚动条可以滚动的长度。</p></li></ol><blockquote><p>举例，如果一个DIV高度是400px（即clientHeight为400），而里面的内容是一个很长的列表，内容的高度是1000px（即offsetHeight为1000）。那么，可见部分我们看到400px，1000px的内容中还有600px不可见。而这不可见的部分呢，正是我们通过拉动滚动条才能把这一部分显示出来。你如果滚动条不拉动，此时scrollTop为0，如果你把滚动条拉到底，显示出列表最下面的部分，此时，scrollTop为600。　所以scrollTop的取值区间为[0, 600]。　所以这个600可以理解为滚动条可以滚动的长度。</p></blockquote><p>理解完上面的这个概念之后。要判断是否滚动到底部就很好做了。</p><blockquote><p>首先，我们拉动滚动条，从最上面拉到最下面，变化的是scrollTop的值，而这个值是有一个区间的。<br>这个区间是： [0, (offsetHeight - clientHeight)]</p></blockquote><p>即，滚动条拉动的整个过程的变化在 0 到 (offsetHeight – clientHeight) 范围之内。</p><ul><li>判断滚动条滚动到最底端：<code> scrollTop == (offsetHeight – clientHeight)</code></li><li>在滚动条距离底端50px以内：<code> (offsetHeight – clientHeight) – scrollTop &lt;= 50</code></li><li>在滚动条距离底端5%以内：<code> scrollTop / (offsetHeight – clientHeight) &gt;= 0.95</code></li></ul><h2 id="文章阅读进度"><a href="#文章阅读进度" class="headerlink" title="文章阅读进度"></a>文章阅读进度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientHeight = box.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> offsetHeight = box.<span class="property">offsetHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = box.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> percent = <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.round(scrollTop / (offsetHeight - clientHeight) * <span class="number">100</span>)&#125;</span>%`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(percent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取首屏的宽度-x2F-高度"><a href="#获取首屏的宽度-x2F-高度" class="headerlink" title="获取首屏的宽度&#x2F;高度"></a>获取首屏的宽度&#x2F;高度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明了文档类型就用html 没有声明文档类型就用body</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取首屏或者是可视区域的宽度或高度</span></span><br><span class="line"><span class="comment">// var winW = document.body.clientWidth;</span></span><br><span class="line"><span class="comment">// var winH = document.body.clientHeight;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> winW = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line"><span class="keyword">var</span> winH = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br></pre></td></tr></table></figure><h2 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>=<span class="number">0</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">scroll</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//scroll(x,y)与scrollTo(x,y)是一样一样的;</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/willard_cui/article/details/81712989">offsetWidth与offsetLeft</a></p><p><a href="https://www.jb51.net/article/58688.htm">JS实现判断滚动条滚到页面底部并执行事件的方法</a></p><p><a href="https://blog.csdn.net/qq_41800366/article/details/85995432">JS 中 scrollWidth、scrollHeight、scrollLeft 、scrollTop 详解</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> JS盒模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dom</title>
      <link href="/articles/59b49683.html"/>
      <url>/articles/59b49683.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h1><p>文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标志语言的标准编程接口(API)。 (DOM就是用来处理HTML机构)。</p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>加载HTML页面时，web浏览器生成一个树型结构，用来表示页面内部结构，称之为DOM树，DOM将这种树型结构理解为由节点组成。</p><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><table><thead><tr><th>nodeType（节点类型）</th><th>nodeName（节点名称）</th><th>nodeValue（节点值）</th></tr></thead><tbody><tr><td>1（元素节点）</td><td>大写的标签名</td><td>null</td></tr><tr><td>3（文本节点）</td><td>#text</td><td>文本内容</td></tr><tr><td>8（注释节点）</td><td>#comment</td><td>注释内容</td></tr><tr><td>9（文档节点）</td><td>#document</td><td>null</td></tr></tbody></table><h3 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h3><p><strong>Tip：是属性，不是方法。</strong></p><ul><li>父亲节点.children; 获取<strong>直接元素</strong>子节点。注：即nodeType&#x3D;&#x3D;1的元素节点。</li><li>父亲节点.childNodes; 获取<strong>直接</strong>子节点 (和结构相关结构边了这个集合也会改变：比如去掉空格或者换行就相当于去掉了文本节点text)。</li><li>获取子节点，获取到了就是一个类数组集合，获取不到就是空集合。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;ul1&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oUl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> olis = oUl.<span class="property">children</span>;</span><br><span class="line"><span class="keyword">var</span> olis2 = oUl.<span class="property">childNodes</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(olis);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(olis2);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656841602904dom.png" alt="输出"></p><p>可以通过节点属性获取到想要的节点，比如P节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        &lt;ul id=<span class="string">&quot;ul1&quot;</span>&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> oUl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul1&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> olis = <span class="title class_">Array</span>.<span class="title function_">from</span>(oUl.<span class="property">children</span>);</span><br><span class="line">    <span class="keyword">var</span> oP=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    olis.<span class="title function_">forEach</span>(<span class="function"><span class="params">ele</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ele.<span class="property">nodeName</span>==<span class="string">&quot;P&quot;</span>)&#123;</span><br><span class="line">            oP=ele;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oP); <span class="comment">//&lt;p&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h3><p><strong>Tip：是属性，不是方法。</strong></p><ul><li>parentNode;   获取<strong>直接</strong>父节点    获取不到是null。</li><li>offsetParent;  获取<strong>已经定位</strong>的父集元素，如果说没有已经定位的父集元素获取到的就是body。</li><li>获取到的还是一个元素节点，所以可以链式操作&#x3D;&gt;test2.parentNode.parentNode。</li><li>获取到的是一个元素对象（具体的节点），获取不到就是null。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div id=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="keyword">var</span> test2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test2.<span class="property">parentNode</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> &lt;div id=&quot;test1&quot;&gt;</span></span><br><span class="line"><span class="comment">   &lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> &lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="节点的其他获取方式"><a href="#节点的其他获取方式" class="headerlink" title="节点的其他获取方式"></a>节点的其他获取方式</h3><ul><li>带Element的就是元素节点；不带的就是节点(基本都是文本节点#text)</li><li>firstElementChild： 获取<strong>第一个元素子节点</strong>（不兼容：IE8及以下没有这个属性 -&gt;undefined）</li><li>firstChild：获取<strong>第一个子节点</strong></li><li>lastElementChild：获取最后一个<strong>元素子节点</strong>（不兼容：IE8及以下没有这个属性 -&gt;undefined）</li><li>lastChild：获取最后一个<strong>子节点</strong></li><li>previousElementSibling：获取<strong>上一个相邻元素节点</strong>（不兼容：IE8及以下没有这个属性 -&gt;undefined）</li><li>previousSibling：获取<strong>上一个相邻节点</strong></li><li>nextElementSibling：获取<strong>下一个相邻元素节点</strong>（不兼容：IE8及以下没有这个属性 -&gt;undefined）</li><li>nextSibling：获取<strong>下一个相邻节点</strong></li></ul><h3 id="节点的操作"><a href="#节点的操作" class="headerlink" title="节点的操作"></a>节点的操作</h3><blockquote><p>节点的操作就包含了创建、添加、插入、替换、移除与克隆；</p></blockquote><p>插入元素的方式如下：(可一下传入多个)</p><ul><li><p>node.append(…nodes or strings)——在node<strong>下一级末尾</strong>插入节点或字符串；</p></li><li><p>node.prepend(…nodes or strings)——在node<strong>下一级开头</strong>插入节点或字符串；</p></li><li><p>node.before(…nodes or strings)——在node<strong>同级前面</strong>插入节点或字符串；</p></li><li><p>node.after(…nodes or strings)——在node<strong>同级后面</strong>插入节点或字符串；</p></li><li><p>node.replaceWith(…nodes or strings)——将node<strong>替换</strong>为给定的节点或字符串；</p></li><li><p>node.remove()——将node移除；</p></li><li><p>node.cloneNode(boolean)——将node克隆；</p><ul><li>boolean默认为false，只会clone本身；</li><li>boolean设置为true，深度克隆，子元素也会克隆；</li></ul></li><li><p>添加：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hhaa <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hhee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个DOM对象</span></span><br><span class="line"><span class="keyword">const</span> h2El = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h2&quot;</span>);</span><br><span class="line">h2El.<span class="property">className</span> = <span class="string">&quot;title&quot;</span>;</span><br><span class="line">h2El.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">h2El.<span class="property">textContent</span> = <span class="string">&quot;我是标题&quot;</span>;</span><br><span class="line"></span><br><span class="line">box.<span class="title function_">append</span>(h2El);</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hhaa <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hhee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title active&quot;</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="旧的节点操作方法"><a href="#旧的节点操作方法" class="headerlink" title="旧的节点操作方法"></a>旧的节点操作方法</h3><p>在很多地方我们也会看到一些旧的操作方法：**(不推荐使用)**</p><ul><li>parentElem.appendChild(node)：在parentElem的父元素最后位置添加一个子元素；</li><li>parentElem.insertBefore(node, nextSibling)：在parentElem的nextSibling前面插入一个子元素；</li><li>parentElem.replaceChild(node, oldChild)：在parentElem中，新元素替换之前的oldChild元素；</li><li>parentElem.removeChild(node)：在parentElem中，移除某一个元素；</li></ul><h2 id="操作元素结构上的属性"><a href="#操作元素结构上的属性" class="headerlink" title="操作元素结构上的属性"></a>操作元素结构上的属性</h2><blockquote><p>ps：color属性是style里的呀，所以style里面的属性用的是xxx.style.xxx；别的用的Attribute；</p></blockquote><h3 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h3><ul><li>标准的attribute：某些attribute属性是标准的，比如id、class、href、type、value等；</li><li>非标准的attribute：某些attribute属性是自定义的，比如abc、age、height等；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mydivClass&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;188&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>对于所有的attribute访问都支持如下的方法：</p></blockquote><ul><li>元素对象.hasAttribute(attr)；检查是否存在 返回boolean值；</li><li>元素对象.setAttribute(attr,val)； 设置</li><li>元素对象. getAttribute(attr)；获取</li><li>元素对象.removeAttribute(attr)；移除</li></ul><blockquote><p>attribute具备以下特征：</p></blockquote><ul><li>它们的名字是大小写不敏感的（id与ID相同）；</li><li>它们的值总是字符串类型的；</li></ul><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><blockquote><p>对象.属性的方式；</p></blockquote><ul><li>对于<strong>标准</strong>的attribute，会在DOM对象上创建与其对应的property属性：</li><li>对于<strong>非标准</strong>的attribute，为<code>undefined</code>：</li><li>除非特别情况，大多数情况下，设置、获取attribute，推荐使用property的方式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mydivClass&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;188&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;HEIGHT&#x27;</span>)); <span class="comment">// true(对小大写不敏感)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">id</span>); <span class="comment">// myDiv </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">className</span>); <span class="comment">// mydivClass (class要用className)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">age</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="data-自定义属性"><a href="#data-自定义属性" class="headerlink" title="data-*自定义属性"></a>data-*自定义属性</h3><blockquote><p>HTML5的data-*自定义属性，那么它们也是可以在dataset属性中获取到的：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mydivClass&quot;</span> <span class="attr">data-age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">data-height</span>=<span class="string">&quot;188&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">dataset</span>.<span class="property">age</span>);  <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">dataset</span>.<span class="property">height</span>);  <span class="comment">//188</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript动态修改样式"><a href="#JavaScript动态修改样式" class="headerlink" title="JavaScript动态修改样式"></a>JavaScript动态修改样式</h2><blockquote><p>其实用到了property，通过<code>.style</code> 的方式来修改；(即：标签有标准的attribute：style)；</p></blockquote><h3 id="常规写法"><a href="#常规写法" class="headerlink" title="常规写法"></a>常规写法</h3><blockquote><p>JS动态修改样式，要是修改的样式很多，用JS修改，后期不移维护；</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mydivClass&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>&gt;</span>fsllala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击div动态修改样式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 缺陷:要是修改的样式很多,用JS修改,后期不移维护;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">myDiv.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myDiv.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    myDiv.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;24px&quot;</span>;</span><br><span class="line">    myDiv.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="className"><a href="#className" class="headerlink" title="className"></a>className</h3><blockquote><p>通过className来动态修改样式，它会替换整个class中的字符串；</p></blockquote><blockquote><p>元素的class attribute，对应的property并非叫class，而是className；</p><p>这是因为JavaScript早期是不允许使用class这种关键字来作为对象的属性，所以DOM规范使用了className；</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mydivClass&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>&gt;</span>fsllala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">myDiv.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myDiv.<span class="property">className</span> = <span class="string">&quot;active&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完后，检查dom元素，可以看到原来的class被替换掉了；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>&gt;</span>fsllala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><blockquote><p>同className替换class名相比，如果我们需要添加或者移除单个的class，那么可以使用classList属性。</p></blockquote><ul><li>elem.classList是一个特殊的对象：<ul><li>elem.classList.add(class)：添加一个类；</li><li>elem.classList.remove(class)：添加&#x2F;移除类；</li><li>elem.classList.toggle(class)：如果类不存在就添加类，存在就移除它；</li><li>elem.classList.contains(class)：检查给定类，返回true&#x2F;false；</li></ul></li><li>classList是可迭代对象，可以通过for of进行遍历；</li></ul><p>将文章上方的className替换成classList.add：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">myDiv.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myDiv.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完后，检查dom元素，可以看到原来的class后面添加了新的class名为 active ；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mydivClass active&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>&gt;</span>fsllala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h2><blockquote><p>如果我们需要读取样式：</p></blockquote><ul><li><p>对于内联样式，是可以通过style.*的方式读取到的；</p></li><li><p>对于style、css文件中的样式，是读取不到的；</p></li></ul><blockquote><p>这个时候，我们可以通过getComputedStyle的全局函数来实现：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 900;&quot;</span>&gt;</span>fsllala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">myDiv.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">style</span>.<span class="property">color</span>);  <span class="comment">//  空</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDiv.<span class="property">style</span>.<span class="property">fontWeight</span>); <span class="comment">// 900</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(myDiv).<span class="property">fontSize</span>);<span class="comment">// 24px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Dom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预解析</title>
      <link href="/articles/31c1f94e.html"/>
      <url>/articles/31c1f94e.html</url>
      
        <content type="html"><![CDATA[<h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><ul><li>代码运行到浏览器，浏览器提供了一个供JS代码执行的环境(栈区)，在代码执行之前先进行预解析；预解析完成了，代码才会执行。</li><li>预解析又称为变量提升，预解析会对所有(全局与局部)带有var和function关键字的进行预解析；</li><li>预解析分为以下两部分：<ul><li>声明 var a；</li><li>定义 a&#x3D;100；(赋值)</li></ul></li><li>var的预解析只声明不定义；function的预解析声明+定义（function在预解析的声明+定义已经完成了）</li></ul><p><strong>知识点：</strong></p><ul><li><p>js中分为两大区域</p><ol><li>栈区：提供代码运行的环境</li><li>堆区：存储引用数据类型的值</li></ol></li><li><p>js中一旦遇到引用数据类型，就会开辟一块<strong>堆</strong>内存，将引用数据类型的值进行储存，并给这块堆内存分配一个16进制地址。</p></li><li><p>函数执行会生成一个私有作用域，里面代码从上到下执行。（栈区）</p></li></ul><p>栗子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b); <span class="comment">//undefined undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="title function_">sum</span>(); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2022平安喜乐&quot;</span>) <span class="comment">//2022平安喜乐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p>先进行预解析，预解析完了，代码从上往下开始运行；<strong>堆区是存储的，栈区才是代码执行；</strong></p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847602916yjx.png" alt="栗子1"></p><p>栗子2：</p><p>Tips：先把外层的函数合起来，这样就好分析了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">//undefined undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="title function_">sum</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);<span class="comment">//undefined undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2000</span>;</span><br><span class="line">    <span class="title function_">hello</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2022平安喜乐&quot;</span>) <span class="comment">//2022平安喜乐</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847640974yjx2.png" alt="栗子2"></p><p>栗子3：</p><p>Tips：先把外层的函数合起来，这样就好分析了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params">num1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">    a++;</span><br><span class="line">    b++;</span><br><span class="line">    c++;</span><br><span class="line">    num1++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, num1);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">30</span>;</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        c++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br></pre></td></tr></table></figure><p><strong>知识点：</strong></p><p><strong>作用域链：</strong></p><p>作用域链，是一种查找机制，在当前作用域下用到某个变量或方法，先看当前这个作用域有没有，有先用自己私有的，没有往上一级作用域进行查找，上一级作用域没有，再往上一级作用域进行查找，知道找到全局作用域为止（window为止）</p><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656847677915yjx3.png" alt="栗子3"></p><p>PS：函数执行完成会自动销毁，定义一个函数可以调用无数次，每次相互独立的；即从xxxfff000&lt;&#x3D;&gt;test(1)执行完，就销毁释放内存了；</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 预解析 </category>
          
          <category> 作用域链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 预解析 </tag>
            
            <tag> 变量提示 </tag>
            
            <tag> 作用域链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/articles/f2866b73.html"/>
      <url>/articles/f2866b73.html</url>
      
        <content type="html"><![CDATA[<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>箭头函数是ES6之后增加的一种编写函数的方法，并且它比函数表达式要更加简洁</p></blockquote><ul><li>箭头函数不会绑定this、arguments属性；</li><li>箭头函数不能作为构造函数来使用（不能和new一起来使用，会抛出错误）；–&gt; (因为箭头函数没有原型)；</li></ul><h2 id="和普通函数对比"><a href="#和普通函数对比" class="headerlink" title="和普通函数对比"></a>和普通函数对比</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// methods1: function声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods2 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> foo2 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数体代码&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数的完整写法(和之前 函数表达式 写法类似)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo3</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;箭头函数函数体代码&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="箭头函数简写"><a href="#箭头函数简写" class="headerlink" title="箭头函数简写"></a>箭头函数简写</h2><ol><li>如果箭头函数只有一个参数，那么()可以省略</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names =[<span class="string">&quot;fsllala&quot;</span>,<span class="string">&quot;fsl&quot;</span>,<span class="string">&quot;forward&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> nums =[<span class="number">20</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">66</span>,<span class="number">73</span>];</span><br><span class="line"></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>如果箭头函数只有一行执行代码,那么{}可以省略</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;fsllala&quot;</span>, <span class="string">&quot;fsl&quot;</span>, <span class="string">&quot;forward&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">73</span>];</span><br><span class="line"></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一行执行代码中如果有return关键字,省略&#123;&#125;,需要将return一起省略(下一条规则)</span></span><br><span class="line"><span class="keyword">const</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>只有一行执行代码,这行代码的表达式结果会作为函数的返回值默认返回</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">73</span>];</span><br><span class="line"><span class="keyword">const</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newNums&quot;</span>,newNums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数返回值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn1</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn</span> = (<span class="params"></span>)=&gt;<span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrFn</span>()); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><ol start="4"><li>如果默认返回值是一个对象，那么这个对象必须加()</li></ol><ul><li>我们先看如下现象，不难发现，当函数的返回值是对象形式的时候，不能区分<code>&#123;&#125;</code>到底是<strong>执行体</strong>，还是<strong>返回的对象</strong>；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn1</span> = (<span class="params"></span>) =&gt; <span class="number">123</span>;  <span class="comment">// 函数返回值是个 number</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn2</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;fsllala&quot;</span>;<span class="comment">// 函数返回值是个 string</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn3</span> = (<span class="params"></span>) =&gt; [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]; <span class="comment">// 函数返回值是个 array</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn4</span> = (<span class="params"></span>) =&gt; &#123; <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span> &#125;; <span class="comment">// 函数返回值是个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn5</span> = (<span class="params"></span>)=&gt;&#123;&#125; <span class="comment">//箭头函数执行体</span></span><br></pre></td></tr></table></figure><ul><li>为了区分，这个对象必须加()；代表箭头函数的<strong>默认返回值</strong>是个对象；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">arrFn4</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="箭头函数this指向"><a href="#箭头函数this指向" class="headerlink" title="箭头函数this指向"></a>箭头函数this指向</h2><blockquote><p>箭头函数不使用this的四种标准规则（也就是不绑定this）；箭头函数内部没有绑定自己的this，而是根据外层作用域来决定this；</p><p>所以<strong>箭头函数</strong>中的this和普通变量的查找机制一样，当前作用域没有，会向上层作用域查找；</p><p>普通函数没有这个this查找机制，而是遵循this的四种标准规则；详见：<a href="https://fsllala.eu.org/articles/feee8227.html">this</a></p></blockquote><ol><li>全局环境this</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接在全局环境输出this,this指向Window </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;window&quot;</span>, <span class="variable language_">this</span>); <span class="comment">// Window </span></span><br></pre></td></tr></table></figure><ol start="2"><li>隐式绑定</li></ol><blockquote><p>绑定改的是函数内部的this指向，但是箭头函数内部没有this，会向上层作用域查找this，但并没有改变上层作用域中的this指向</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// Window </span></span><br></pre></td></tr></table></figure><ol start="3"><li>显示绑定</li></ol><blockquote><p>绑定改的是函数内部的this指向，但是箭头函数内部没有this，会向上层作用域查找this，但并没有改变上层作用域中的this指向</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// Window</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&quot;aaa&quot;</span>); <span class="comment">// Window </span></span><br></pre></td></tr></table></figure><ol start="4"><li>箭头函数 例一：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = obj.<span class="title function_">say</span>();</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// &#123;name: &#x27;fsllala&#x27;, say: ƒ&#125; --&gt;obj对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*fn 是箭头函数:</span></span><br><span class="line"><span class="comment">        () =&gt; &#123;</span></span><br><span class="line"><span class="comment">            console.log(&quot;bar&quot;, this);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    fn()执行,即为箭头函数执行,箭头函数作用域没有this,会向上层作用域查找，即向:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        function () &#123;</span></span><br><span class="line"><span class="comment">        const bar = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">            console.log(&quot;bar&quot;, this);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return bar</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    进行查找,这个是普通函数,有this,this指向是看调用方式了,是隐式调用--&gt;obj.say()，即：this指向的是obj</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="5"><li>箭头函数 例二：</li></ol><blockquote><p>obj是个对象，是没有自己的作用域的；可能有人会说obj是用const声明的，但其实块级作用域形式为{ const xxx&#x3D;xxxx；}</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = obj.<span class="title function_">say</span>();</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*fn 是箭头函数:</span></span><br><span class="line"><span class="comment">        () =&gt; &#123;</span></span><br><span class="line"><span class="comment">            console.log(&quot;bar&quot;, this);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    fn()执行,即为箭头函数执行,箭头函数作用域没有this,会向上层作用域查找，即向:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ()=&gt; &#123;</span></span><br><span class="line"><span class="comment">        const bar = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">            console.log(&quot;bar&quot;, this);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return bar</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    进行查找,这个也是箭头函数,没有自己的this,接着向上层作用域查找，即到了全局作用域,全局作用域this指向Window</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="6"><li>箭头函数 例三：</li></ol><blockquote><p>模拟回调函数的实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络请求的工具函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrs = [<span class="string">&quot;fsl&quot;</span>, <span class="string">&quot;fsllala&quot;</span>, <span class="string">&#x27;forward&#x27;</span>];</span><br><span class="line">    <span class="title function_">callbackFn</span>(arrs);  <span class="comment">//回调函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际操作的位置(业务)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">names</span>: [],</span><br><span class="line">    <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">request</span>(<span class="string">&quot;/namesArr&quot;</span>, <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(params); <span class="comment">// [&quot;fsl&quot;, &quot;fsllala&quot;, &#x27;forward&#x27;]</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">network</span>();</span><br></pre></td></tr></table></figure><blockquote><p>需求：将回调函数返回的数据添加到obj.names中；</p></blockquote><ul><li>methods1：const that &#x3D; this;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络请求的工具函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrs = [<span class="string">&quot;fsl&quot;</span>, <span class="string">&quot;fsllala&quot;</span>, <span class="string">&#x27;forward&#x27;</span>];</span><br><span class="line">    <span class="title function_">callbackFn</span>(arrs);  <span class="comment">//回调函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际操作的位置(业务)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">names</span>: [],</span><br><span class="line">    <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="title function_">request</span>(<span class="string">&quot;/namesArr&quot;</span>, <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Window </span></span><br><span class="line">            that.<span class="property">names</span> = [...params];</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">network</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*分析:</span></span><br><span class="line"><span class="comment">   一:function(params)&#123;&#125;中的this 指向：</span></span><br><span class="line"><span class="comment">     普通函数,看函数调用; 网络请求的工具函数中callbackFn(arrs)调用的,独立调用,this指向window</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   二：that.names 中的that; function(params)&#123;&#125;没有变量that,向上级作用域找that;上级作用域  const that = this;</span></span><br><span class="line"><span class="comment">       即需要查找上级作用域的this,普通函数,看函数调用;obj.network(),所以this指向obj</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>methods2：箭头函数</li></ul><blockquote><p>实际操作的位置(业务)中讲普通函数改为了箭头函数；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际操作的位置(业务)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">names</span>: [],</span><br><span class="line">    <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="comment">// 这里改为了箭头函数</span></span><br><span class="line">        <span class="title function_">request</span>(<span class="string">&quot;/namesArr&quot;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">names</span> = [...params];</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络请求的工具函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrs = [<span class="string">&quot;fsl&quot;</span>, <span class="string">&quot;fsllala&quot;</span>, <span class="string">&#x27;forward&#x27;</span>];</span><br><span class="line">    <span class="title function_">callbackFn</span>(arrs);  <span class="comment">//回调函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际操作的位置(业务)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">names</span>: [],</span><br><span class="line">    <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">request</span>(<span class="string">&quot;/namesArr&quot;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">names</span> = [...params];</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">network</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">/*分析:</span></span><br><span class="line"><span class="comment">    (params)=&gt;&#123;&#125;中的this 指向:</span></span><br><span class="line"><span class="comment">        箭头函数,查找上级作用域的this; 上级作用域是普通函数,看函数调用;obj.network(),所以this指向obj</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 箭头函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/articles/feee8227.html"/>
      <url>/articles/feee8227.html</url>
      
        <content type="html"><![CDATA[<h1 id="This指向"><a href="#This指向" class="headerlink" title="This指向"></a>This指向</h1><ul><li>函数在调用时，JavaScript会默认给this绑定一个值；</li><li>this 的指向不是在创建时就绑定了，而是在调用时被绑定的；</li><li>this的绑定和定义的位置（编写的位置）没有关系；</li><li>this的绑定和<strong>调用方式</strong>以及<strong>调用的位置</strong>有关系；</li></ul><h2 id="四种绑定规则"><a href="#四种绑定规则" class="headerlink" title="四种绑定规则"></a>四种绑定规则</h2><ol><li>默认绑定；</li><li>隐式绑定；</li><li>显示绑定；</li><li>new绑定；</li></ol><h2 id="默认绑定-独立调用"><a href="#默认绑定-独立调用" class="headerlink" title="默认绑定(独立调用)"></a>默认绑定(独立调用)</h2><blockquote><p>独立的调用，this 就代表 window 对象。</p><p>独立调用：xxx()为调用，没有小括号的不叫调用；函数前面没有别的东西调用叫独立；</p></blockquote><ol><li>普通函数被独立的调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立的调用</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><ol start="2"><li>函数定义在对象中，但是独立调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象.属性调用,指向调用对象</span></span><br><span class="line"><span class="comment">// obj.say(); // obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立的调用</span></span><br><span class="line"><span class="keyword">const</span> newObj = obj.<span class="property">say</span>;</span><br><span class="line"><span class="title function_">newObj</span>(); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><ol start="3"><li>高阶函数，独立调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立的调用</span></span><br><span class="line"><span class="title function_">test</span>(obj.<span class="property">say</span>); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><ol start="4"><li>严格模式中，独立调用的函数中的this指向的是 undefined</li></ol><blockquote><p>严格模式中,独立调用的函数中的this指向的是 undefined ; webpack打包啥的可能自动设置为严格模式,所以 独立调用的函数建议不要写this,直接写window;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 严格模式中,独立调用的函数中的this指向的是 undefined ; webpack打包啥的可能自动设置为严格模式,所以 独立调用的函数建议不要写this,直接写window;</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: foo,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = obj1.<span class="property">say</span>;</span><br><span class="line"><span class="title function_">newObj</span>();</span><br></pre></td></tr></table></figure><h2 id="隐式绑定-对象环境-属性调用"><a href="#隐式绑定-对象环境-属性调用" class="headerlink" title="隐式绑定(对象环境(属性调用))"></a>隐式绑定(对象环境(属性调用))</h2><blockquote><p>也就是它的调用位置中，是通过某个对象发起的函数调用。</p><p>当函数被保存为一个<strong>对象的属性</strong>时，它就可称为这个<strong>对象的方法</strong>。当一个方法被调用时，this被绑定到这个对象上。如果调用表达式包含一个提取属性的动作（. 或 []），那么它被称为方法调用。下面两种在对象环境中都可以解释的通。</p></blockquote><ol><li><strong>对象环境指向对象</strong></li><li><strong>谁调用，this指向谁</strong>。</li></ol><p> <strong>函数作为对象的属性去调用 例一：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局变量&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name1 :<span class="string">&quot;局部变量&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>();  <span class="comment">//obj调用,this指向obj; 从function开始找对象环境&#x27;&#123;&#125;&#x27;,找到的是obj,所以this指向obj;</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 局部变量</span></span><br></pre></td></tr></table></figure><p> <strong>函数作为对象的属性去调用 例二：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">222</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.<span class="property">fn</span> = obj2.<span class="property">fn</span>;</span><br><span class="line">obj1.<span class="title function_">fn</span>(); <span class="comment">//222 //虽然obj1.fn是从obj2.fn赋值而来，但是调用函数的是obj1，所以this指向obj1。</span></span><br></pre></td></tr></table></figure><p> <strong>函数作为对象的属性去调用 例三：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;world&quot;</span>,</span><br><span class="line">        <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">b</span>.<span class="title function_">say</span>(); <span class="comment">//world   //a.b调用，所以this指向a.b; 从function开始找对象环境&#x27;&#123;&#125;&#x27;,找到的是b,所以this指向b;</span></span><br></pre></td></tr></table></figure><p> <strong>函数作为对象的属性去调用 例四：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;小红&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>();<span class="comment">//小明  //obj调用,所以this指向obj; foo就是函数foo()&#123;&#125;,直接替换了,找对象环境&#x27;&#123;&#125;&#x27;,找到的是obj,所以this指向obj;</span></span><br></pre></td></tr></table></figure><p> <strong>函数作为对象的属性去调用 例五：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bj=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;八戒&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">500</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//window</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bj</span>);<span class="comment">//10</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);<span class="comment">//undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()();</span><br></pre></td></tr></table></figure><ol><li>为啥是obj.say()()：因为obj.say()执行之后返回了一个函数，并不会执行return函数里面的代码；</li><li>为啥是window：因为obj.say()返回了一个函数，然后在()；相当于直接**函数名()**来调用的；所以指向window；</li></ol><p> <strong>函数作为对象的属性去调用 例六：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;second&#x27;</span>,</span><br><span class="line">            <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldObj.<span class="title function_">say</span>().<span class="title function_">say</span>())<span class="comment">//&#123;name: &#x27;second&#x27;, say: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h2 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h2><blockquote><p>通过call、apply、bind明确的绑定了this指向的对象，所以称之为显式绑定；</p><p>函数的调用为 xxx()；其实这个只是在调用前加上了绑定：xxx.绑定(“绑定对象”)；也可以不写绑定对象：xxx.绑定()，效果和xxx()一样；</p></blockquote><p>场景：需求：执行如下函数，并且函数中的this指向obj；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">nama</span>: <span class="string">&quot;fsllala&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo函数&quot;</span>,<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>隐式绑定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">foo</span>=foo;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><blockquote><p>如果我们不希望在对象内部包含这个函数的引用，同时又希望在这个对象上进行强制调用，该怎么做呢？</p></blockquote><ul><li>显式绑定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行函数,并且强制this就是obj对象;</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&quot;obj&quot;</span>);</span><br></pre></td></tr></table></figure><p>那让我们系统的了解一下他们的用法吧~</p><h3 id="call、apply"><a href="#call、apply" class="headerlink" title="call、apply"></a>call、apply</h3><ul><li>JavaScript所有的函数都可以使用call和apply方法；</li><li>第一个参数是相同的，要求传入一个对象；这个对象的作用是什么呢？就是给this准备的，在调用这个函数时，会将this绑定到这个传入的对象上。</li><li>后面的参数，apply为数组，call为参数列表；<ul><li><code>func.apply(thisArg,[argsArray])</code></li><li><code>func.call(thisArg,arg1,arg2,...)</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo被调用&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印参数&quot;</span>, name, age, height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ()调用</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;fsllala&quot;</span>, <span class="number">18</span>, <span class="number">173</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">repeat</span>(<span class="number">34</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*apply</span></span><br><span class="line"><span class="comment">    第一个参数:绑定this</span></span><br><span class="line"><span class="comment">    第二个参数:传入额外的参数,以数组的形式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;apply&#x27;</span>, [<span class="string">&quot;fsl&quot;</span>, <span class="number">24</span>, <span class="number">174</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">repeat</span>(<span class="number">34</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*call</span></span><br><span class="line"><span class="comment">    第一个参数:绑定this</span></span><br><span class="line"><span class="comment">    第二个参数:传入额外的参数,以参数列表的形式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&quot;call&quot;</span>,<span class="string">&quot;forward&quot;</span>,<span class="number">25</span>,<span class="number">175</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/this1675947654697.png" alt="this"></p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>需求：调用foo时,总是绑定到obj对象身上,并不希望foo对象身上有添加的函数;</p><ul><li>可以通过call或apply实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;fsllala&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 可以通过call或apply实现</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是如果多次调用,每次都要这么写,有点繁琐</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj);</span><br><span class="line">foo.<span class="title function_">call</span>(obj);</span><br><span class="line">foo.<span class="title function_">call</span>(obj);</span><br><span class="line">foo.<span class="title function_">call</span>(obj);</span><br><span class="line">foo.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure><blockquote><p>那有没有什么简单的写法呢，即：<code>foo.call(obj)</code>简写一下子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;fsllala&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(obj); <span class="comment">//将obj于this绑定,生成一个新的堆,并赋值给bar变量;</span></span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">//直接调用即可;</span></span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure><blockquote><p>可能有人会想：独立函数调用this不指向<code>window</code>了么这不就，其实有个优先级(下文有提到)，独立函数的优先级比较低，低于bind绑定；</p></blockquote><h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定:"></a>new绑定:</h2><h3 id="new做了什么事情"><a href="#new做了什么事情" class="headerlink" title="new做了什么事情"></a>new做了什么事情</h3><ol><li>创建一个新的空对象 (空实例)(obj)</li><li>将构造函数的显式原型赋值给这个新对象，作为新对象的隐式原型</li><li>构造函数内部的 this，会指向创建出来的新对象 (this 指向第一步的空对象)</li><li>执行函数体的代码块</li><li>返回对象</li></ol><blockquote><p>所以说：构造函数中的 this 会指向创建出来的实例对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">TestClass</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> subClass = <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line">subClass.<span class="property">name</span> = <span class="string">&#x27;cn&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subClass.<span class="property">name</span>); <span class="comment">//cn</span></span><br><span class="line"><span class="keyword">var</span> subClass1 = <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subClass1.<span class="property">name</span>) <span class="comment">//111</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;zs&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>)<span class="comment">//zs</span></span><br></pre></td></tr></table></figure><h2 id="this优先级"><a href="#this优先级" class="headerlink" title="this优先级"></a>this优先级</h2><blockquote><p>如果new、bind、apply、call、隐式绑定和默认绑定同时出发多个的话，this会指向谁呢？</p></blockquote><p>这里先说一下结论，下面做验证，优先级排名为：</p><ol><li>new</li><li>bind</li><li>apply&#x2F;call</li><li>隐式绑定</li><li>默认绑定</li></ol><p>接下来可通过代码进行如上验证：</p><ul><li>显示优先级(call&#x2F;apply)高于隐式优先级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.显示绑定&gt;隐式绑定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">say</span>: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// &#123;say: ƒ&#125;--&gt;obj对象</span></span><br><span class="line">obj.<span class="property">say</span>.<span class="title function_">call</span>(<span class="string">&quot;lala&quot;</span>); <span class="comment">// String &#123;&#x27;lala&#x27;&#125;   --&gt;string包装类型</span></span><br></pre></td></tr></table></figure><ul><li>显示优先级(bind)高于隐式优先级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(<span class="string">&quot;aaa&quot;</span>); <span class="comment">// --&gt;类似于深拷贝了一份foo</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">say</span>: bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// String &#123;&#x27;aaa&#x27;&#125;  --&gt;string包装类型</span></span><br></pre></td></tr></table></figure><ul><li>new优先级高于隐式优先级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;fsllala&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">say</span>(); <span class="comment">// say &#123;&#125;  --&gt;一个空对象</span></span><br></pre></td></tr></table></figure><ul><li>new不能和call&#x2F;apply一起使用</li><li>new优先级高于bind优先级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"><span class="comment">// bar(); // String &#123;&#x27;bbb&#x27;&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">bar</span>(); <span class="comment">// foo &#123;&#125;  --&gt;是个空对象,所以new高级bind</span></span><br></pre></td></tr></table></figure><ul><li>bind比apply&#x2F;call优先级高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">bar.<span class="title function_">call</span>(<span class="string">&quot;ddd&quot;</span>); <span class="comment">// String &#123;&#x27;ccc&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="事件对象："><a href="#事件对象：" class="headerlink" title="事件对象："></a>事件对象：</h2><p><strong>在 DOM 事件中使用 this，this 指向了触发事件的 DOM 元素本身</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//li</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="箭头函数："><a href="#箭头函数：" class="headerlink" title="箭头函数："></a>箭头函数：</h2><p>详见：<a href="https://fsllala.eu.org/articles/f2866b73.html">箭头函数</a></p><h2 id="setTimeout与setInterval"><a href="#setTimeout与setInterval" class="headerlink" title="setTimeout与setInterval:"></a>setTimeout与setInterval:</h2><ul><li><p><strong>setInterval和setTimeout中传入函数时，函数中的this会指向window对象</strong></p></li><li><p><strong>可以在定(延)时器外面var that &#x3D; this;来解决这个问题</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;) <span class="comment">//window</span></span><br></pre></td></tr></table></figure><ol><li>这是最最常用的常见的定时器用法，回调函数里的this指向的是window。</li><li>我的理解是：由于setTimeout属于宏任务，它的回调在延时之后才进入到主线程执行，而函数执行的时候才明确 this 的指向。执行的时候，由于没有设置内部this的指向。相当于是普通函数调用。所以会默认指向window</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">getage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">getage</span>, <span class="number">1000</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    obj.<span class="title function_">getage</span>() <span class="comment">// 10</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ol><li>第一个setTimeout，执行obj.getage 之后，相当于setTimeout的回调是一个匿名函数，执行的时候，函数内部未设置this的指向。相当于是普通函数调用。所以this默认指向window，所以结果是undefined。</li><li>第二个setTimeout，传给setTimeout的也是一个匿名回调函数，执行匿名函数，执行到 obj.getage() 的时候，getage函数里的this，指向的就是obj了，所以能打印出10。<strong>还是遵循 谁调用产生 this指针的函数，this就指向谁的规则</strong></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p><a href="https://blog.csdn.net/weixin_37722222/article/details/81625826">this指向总结</a></p></li><li><p><a href="https://blog.csdn.net/qq_33562825/article/details/63679335?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.no_search_link">关于this的指向问题</a></p></li><li><p><a href="https://www.cnblogs.com/noxussj/p/15217990.html">谈谈你对 this 指向的了解</a></p></li><li><p><a href="https://www.cnblogs.com/zjjDaily/p/9482958.html">深入理解js函数中this指针的指向</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> this指向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this指向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/articles/42ce80b9.html"/>
      <url>/articles/42ce80b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h1><h2 id="一、websocket是什么"><a href="#一、websocket是什么" class="headerlink" title="一、websocket是什么"></a>一、websocket是什么</h2><ul><li>websocket是一种网络通信协议，是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。</li><li>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。（维基百科）</li></ul><h2 id="二、websocket与http网络协议的联系与区别"><a href="#二、websocket与http网络协议的联系与区别" class="headerlink" title="二、websocket与http网络协议的联系与区别"></a>二、websocket与http网络协议的联系与区别</h2><h3 id="联系："><a href="#联系：" class="headerlink" title="联系："></a>联系：</h3><ol><li>都是基于TPC的；</li><li>都是可靠性传输协议；</li><li>都是应用层协议；</li><li>WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的；</li></ol><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p>http是一种无状态的、无连接的单向的应用层协议、采用请求&#x2F;响应模式。即，通信请求只能由客户端发起，服务端对请求做出应答处理。</p><ul><li>无状态：协议对于事务处理没有记忆能力；在传统的方式上(long pull 与 ajax 轮询)，要不断的建立，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 <code>identity info</code> （鉴别信息），来告诉服务端你是谁。降低了效率，消耗了过多的流量&#x2F;时间。</li><li>无连接：每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。</li><li>单向：每次请求（request）都要由客户端（如 浏览器）主动发起，服务端进行处理后返回response结果，而服务端不能主动向客户端发送数据。</li></ul><p>websocket:最大的特点就是服务端可以主动向客户端推送消息，客户端也可以主动向服务端发送消息。应用场景：</p><ul><li>即时聊天通信</li><li>多玩家游戏</li><li>在线协同编辑&#x2F;编辑</li><li>实时数据流的拉取与推送</li><li>体育&#x2F;游戏实况</li><li>实时地图位置</li><li>游戏应用程序：在游戏应用程序中，你可能会注意到，服务器会持续接收数据，而不会刷新用户界面。屏幕上的用户界面会自动刷新，而且不需要建立新的连接，因此在<code>WebSocket</code>游戏应用程序中非常有帮助</li></ul><h2 id="三、long-pull-与ajax-轮询"><a href="#三、long-pull-与ajax-轮询" class="headerlink" title="三、long pull 与ajax 轮询"></a>三、long pull 与ajax 轮询</h2><p>从下面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议非常消耗资源与被动性。</p><h3 id="ajax轮询："><a href="#ajax轮询：" class="headerlink" title="ajax轮询："></a>ajax轮询：</h3><p>ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。</p><h4 id="情景再现："><a href="#情景再现：" class="headerlink" title="情景再现："></a>情景再现：</h4><p>客户端：啦啦啦，有没有新信息(Request)</p><p>服务端：没有（Response）</p><p>客户端：啦啦啦，有没有新信息(Request)</p><p>服务端：没有。。（Response）</p><p>客户端：啦啦啦，有没有新信息(Request)</p><p>服务端：你好烦啊，没有啊。。（Response）</p><p>客户端：啦啦啦，有没有新消息（Request）</p><p>服务端：好啦好啦，有啦给你。（Response）</p><p>客户端：啦啦啦，有没有新消息（Request）</p><p>服务端：。。。。。没。。。。没。。。没有（Response） -loop</p><h2 id="long-pull"><a href="#long-pull" class="headerlink" title="long pull:"></a>long pull:</h2><p>其实原理跟 <code>ajax轮询</code> 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p><h4 id="情景再现：-1"><a href="#情景再现：-1" class="headerlink" title="情景再现："></a>情景再现：</h4><p>客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）</p><p>服务端：额。。 等待到有消息的时候。。来 给你（Response）</p><p>客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop</p><p><strong>总结：ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</strong></p><h2 id="websocket-1"><a href="#websocket-1" class="headerlink" title="websocket"></a>websocket</h2><p>当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。</p><h4 id="情景再现：-2"><a href="#情景再现：-2" class="headerlink" title="情景再现："></a>情景再现：</h4><p>客户端：啦啦啦，我要建立Websocket协议，需要的服务：chat，Websocket协议版本：17（HTTP Request）</p><p>服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）</p><p>客户端：麻烦你有信息的时候推送给我噢。。</p><p>服务端：ok，有的时候会告诉你的。</p><p>服务端：balabalabalabala</p><p>服务端：balabalabalabala</p><p>服务端：哈哈哈哈哈啊哈哈哈哈</p><p>服务端：笑死我了哈哈哈哈哈哈哈</p><p><strong>总结：websocket只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你 ）</strong></p><h2 id="四、websocket的其他特点"><a href="#四、websocket的其他特点" class="headerlink" title="四、websocket的其他特点"></a>四、websocket的其他特点</h2><ol><li>建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信。</li><li>协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</li></ol><h2 id="五、创建websocket对象"><a href="#五、创建websocket对象" class="headerlink" title="五、创建websocket对象"></a>五、创建websocket对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url, 指定连接的 URL</span></span><br><span class="line"><span class="comment">// protocol 是可选的，指定可接受的子协议。</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Socket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url, [protocol] );</span><br></pre></td></tr></table></figure><h2 id="六、websocket属性"><a href="#六、websocket属性" class="headerlink" title="六、websocket属性"></a>六、websocket属性</h2><p><img src="https://s4.ax1x.com/2022/01/18/7wUE8A.png" alt="websocket state">*</p><h2 id="七、websocket事件"><a href="#七、websocket事件" class="headerlink" title="七、websocket事件"></a>七、websocket事件</h2><table><thead><tr><th align="center">事件</th><th align="center">事件处理程序</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">open</td><td align="center">Socket.onopen</td><td align="center">连接建立时触发</td></tr><tr><td align="center">message</td><td align="center">Socket.onmessage</td><td align="center">客户端接收服务端数据时触发</td></tr><tr><td align="center">error</td><td align="center">Socket.onerror</td><td align="center">通信发生错误时触发</td></tr><tr><td align="center">close</td><td align="center">Socket.onclose</td><td align="center">连接关闭时触发</td></tr></tbody></table><h2 id="八、websocket方法"><a href="#八、websocket方法" class="headerlink" title="八、websocket方法"></a>八、websocket方法</h2><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Socket.send()</td><td align="center">使用连接发送数据</td></tr><tr><td align="center">Socket.close()</td><td align="center">关闭连接</td></tr></tbody></table><h2 id="九、websocket实例"><a href="#九、websocket实例" class="headerlink" title="九、websocket实例"></a>九、websocket实例</h2><ol><li><p>最基本写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url);</span><br><span class="line"><span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接成功建立的回调方法</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接已打开&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收到消息的回调方法</span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;客户端接收服务端数据时触发&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接关闭的回调方法</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接已关闭&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>稍加复杂</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> ws = <span class="literal">null</span>; <span class="comment">//websocket实例</span></span><br><span class="line">    <span class="keyword">var</span> wsUrl = <span class="string">&quot;ws://localhost:8888/websocket/name&quot;</span>;</span><br><span class="line"><span class="comment">//1.第一步页面初始化，先调用createWebSocket函数，目的是创建一个websocket的方法：new WebSocket(wsUrl);因此封装成函数内如下代码：</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createWebsocket</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WebSocket</span>) &#123;</span><br><span class="line">            ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url);</span><br><span class="line">            <span class="title function_">init</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;浏览器不支持WebSocket!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.第二步调用init方法，该方法内把一些监听事件封装如下：</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">        ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 连接成功建立的回调方法</span></span><br><span class="line">        ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接已打开&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收到消息的回调方法</span></span><br><span class="line">        ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;客户端接收服务端数据时触发&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 连接关闭的回调方法</span></span><br><span class="line">        ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接已关闭&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            websocket.<span class="title function_">close</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">createWebsocket</span>();</span><br></pre></td></tr></table></figure></li></ol><h1 id="心跳重连机制"><a href="#心跳重连机制" class="headerlink" title="心跳重连机制"></a>心跳重连机制</h1><h2 id="一、概念："><a href="#一、概念：" class="headerlink" title="一、概念："></a>一、概念：</h2><p>在使用websocket的过程中，有时候会遇到网络断开的情况，比如信号不好，或者网络临时性关闭，但是在网络断开的时候服务器端并没有触发onclose的事件。这样会有：服务器会继续向客户端发送多余的链接，并且这些数据还会丢失。所以就需要一种机制来检测客户端和服务端是否处于正常的链接状态。因此就有了websocket的心跳了。还有心跳，说明还活着，没有心跳说明已经挂掉了。</p><h2 id="二、心跳包概念："><a href="#二、心跳包概念：" class="headerlink" title="二、心跳包概念："></a>二、心跳包概念：</h2><p>它像心跳一样每隔固定时间发一次，以此来告诉服务器，这个客户端还活着。事实上这是为了保持长连接，至于这个包的内容，是没有什么特别规定的，不过一般都是很小的包，或者只包含包头的一个空包。</p><h2 id="三、心跳机制概念："><a href="#三、心跳机制概念：" class="headerlink" title="三、心跳机制概念："></a>三、心跳机制概念：</h2><p>心跳机制是每隔一段时间会向服务器发送一个数据包，告诉服务器自己还活着，同时客户端会确认服务器端是否还活着，如果还活着的话，就会回传一个数据包给客户端来确定服务器端也还活着，否则的话，有可能是网络断开连接了。需要重连~</p><h2 id="四、实现心跳检测的思路："><a href="#四、实现心跳检测的思路：" class="headerlink" title="四、实现心跳检测的思路："></a>四、实现心跳检测的思路：</h2><p><strong>大白话：</strong></p><p>每隔一段固定的时间，向服务器端发送一个ping数据，如果在正常的情况下，服务器会返回一个pong给客户端，如果客户端通过<br>onmessage事件能监听到的话，说明请求正常，这里我们使用了一个定时器，每隔xx秒的情况下，如果是网络断开的情况下，在指定的时间内服务器端并没有返回心跳响应消息，因此服务器端断开了，因此这个时候我们使用ws.close关闭连接，在一段时间后(在不同的浏览器下，时间是不一样的，firefox响应更快)，可以通过 onclose事件监听到。因此在onclose事件内，我们可以调用 reconnect事件进行重连操作。</p><p><strong>整理一下：</strong></p><ol><li>客户端每隔一段固定的时间发送一个探测包给服务器。</li><li>客户端发包时启动一个超时定时器。</li><li>服务器端接收到检测包，应该回应一个包。</li><li>如果客户机收到服务器的应答包，则说明服务器正常，删除超时定时器。</li><li>如果客户端的超时定时器超时，依然没有收到应答包，则说明服务器挂了。</li></ol><p><strong>心跳检测代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//心跳检测</span></span><br><span class="line"><span class="keyword">var</span> heartCheck = &#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">60000</span>,<span class="comment">//60秒</span></span><br><span class="line">    <span class="attr">timeoutObj</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">serverTimeoutObj</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeoutObj</span>);</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">serverTimeoutObj</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">start</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timeoutObj</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//这里发送一个心跳，后端收到后，返回一个心跳消息，</span></span><br><span class="line">            <span class="comment">//onmessage拿到返回的心跳就说明连接正常</span></span><br><span class="line">            ws.<span class="title function_">send</span>(<span class="string">&quot;HeartBeat&quot;</span>);</span><br><span class="line">            self.<span class="property">serverTimeoutObj</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//如果超过一定时间还没重置，说明后端主动断开了</span></span><br><span class="line">                ws.<span class="title function_">close</span>();<span class="comment">//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次</span></span><br><span class="line">            &#125;, self.<span class="property">timeout</span>)</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">timeout</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WebSocket心跳重连机制完整代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="literal">null</span>; <span class="comment">//websocket实例</span></span><br><span class="line"><span class="keyword">var</span> tt = <span class="literal">null</span>; <span class="comment">//reconnect的setTimeout</span></span><br><span class="line"><span class="keyword">var</span> wsUrl = <span class="string">&quot;ws://localhost:8888/websocket/name&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> lockReconnect = <span class="literal">false</span>; <span class="comment">//避免重复连接 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWebsocket</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WebSocket</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url);</span><br><span class="line">            <span class="title function_">init</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="title function_">reconnect</span>(url); <span class="comment">//这里的url是形参，因为调用createWebsocket函数的时候传的url就是wsUrl;</span></span><br><span class="line">            <span class="comment">//可以理解为先看最外面的函数有没有形参，没有的话这里面的就是实参，有的话就是最外面函数的形参</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;浏览器不支持WebSocket!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">    ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接失败&quot;</span>);</span><br><span class="line">        <span class="title function_">reconnect</span>(wsUrl); <span class="comment">//重连(函数的调用,最外面的函数有没有形参,所以是实参)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 连接成功建立的回调方法</span></span><br><span class="line">    ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接已打开&quot;</span>);</span><br><span class="line">        <span class="comment">//心跳检测重置</span></span><br><span class="line">        heartCheck.<span class="title function_">reset</span>().<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收到消息的回调方法</span></span><br><span class="line">    ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">//如果获取到消息，心跳检测重置</span></span><br><span class="line">        <span class="comment">//拿到任何消息都说明当前连接是正常的</span></span><br><span class="line">        heartCheck.<span class="title function_">reset</span>().<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 连接关闭的回调方法</span></span><br><span class="line">    ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket连接已关闭&quot;</span>);</span><br><span class="line">        <span class="title function_">reconnect</span>(wsUrl); <span class="comment">//重连(函数的调用,最外面的函数有没有形参,所以是实参)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        websocket.<span class="title function_">close</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重连函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconnect</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lockReconnect) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    lockReconnect = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//没连接上会一直重连，设置延迟避免请求过多</span></span><br><span class="line">    tt &amp;&amp; <span class="built_in">clearTimeout</span>(tt);</span><br><span class="line">    tt = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">createWebSocket</span>(url);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在重连，当前时间&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        lockReconnect = <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="number">60000</span>); <span class="comment">//这里设置重连间隔(ms)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//心跳检测</span></span><br><span class="line"><span class="keyword">var</span> heartCheck = &#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">60000</span>, <span class="comment">//60秒</span></span><br><span class="line">    <span class="attr">timeoutObj</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">serverTimeoutObj</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">reset</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeoutObj</span>);</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">serverTimeoutObj</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">//返回当前对象heartCheck</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">start</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timeoutObj</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//这里发送一个心跳，后端收到后，返回一个心跳消息，</span></span><br><span class="line">            <span class="comment">//onmessage拿到返回的心跳就说明连接正常</span></span><br><span class="line">            ws.<span class="title function_">send</span>(<span class="string">&quot;HeartBeat&quot;</span>);</span><br><span class="line">            self.<span class="property">serverTimeoutObj</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//如果超过一定时间还没重置，说明后端主动断开了</span></span><br><span class="line">                ws.<span class="title function_">close</span>(); <span class="comment">//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次</span></span><br><span class="line">            &#125;, self.<span class="property">timeout</span>)</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">timeout</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createWebsocket</span>(wsUrl);</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.jianshu.com/p/dfde99d46ef4">初探和实现websocket心跳重连</a></li><li><a href="https://github.com/iaiai/websocket">一楼的github详细代码</a></li><li><a href="https://blog.csdn.net/qq_33922980/article/details/102646295">WebSocket心跳及重连机制</a></li><li><a href="https://www.cnblogs.com/tugenhua0707/p/8648044.html">理解WebSocket心跳及重连机制</a></li><li><a href="https://blog.csdn.net/qq_38128179/article/details/93708860">WebSocket 网络通信协议介绍</a></li><li><a href="https://juejin.cn/post/7020964728386093093#heading-8">WebSocket 原理</a></li><li><a href="https://juejin.cn/post/6844903606211215373">WebSocket 原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
            <tag> 心跳重连机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步处理</title>
      <link href="/articles/957893b.html"/>
      <url>/articles/957893b.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、回调函数"><a href="#一、回调函数" class="headerlink" title="一、回调函数"></a>一、回调函数</h1><ul><li><p>概念：一个函数作为另一个函数的参数；先执行一个函数，把他的执行结果作为另一个函数的参数；</p></li><li><p>弊端：会产生回调地狱。(回调函数的层层嵌套 例如：京东首页的tab栏，家用电器里面有电视，电视里面有各种牌子，不同牌子又有不同的配色等等，类似这样下一级的参数为上一级的返回值的)</p></li></ul><h1 id="二、Promise"><a href="#二、Promise" class="headerlink" title="二、Promise"></a>二、Promise</h1><ul><li><p>概念：</p><ol><li>Promise 是异步编程的一种解决方案，比传统的回调函数和事件更合理、更强大</li><li>ES6的Promise是一个构造函数, 用来生成Promise实例, Promise实例是异步操作管理者</li><li>Promise代表了未来某个将要发生的事件(通常是一个异步操作) 有了Promise对象</li><li>可以将异步操作以同步的流程表达出来, 避免了层层嵌套的回调函数(回调地狱)</li><li>Promise本身还是在使用回调函数(只不过比回调函数多了一种状态管理)</li><li>promise三个状态：<ul><li>初始化状态  pending</li><li>成功状态  fullfilled</li><li>失败状态  rejected</li></ul></li></ol></li><li><p>如何使用</p><ol><li><p>因为promise是构造方法,就是一个类,所以说使用的时候需要进行实例化</p></li><li><p>使用new进行实例化一个Promise   内置有三种状态</p></li><li><p>promise内置一个参数  参数是回调函数  回调函数中有两个参数  其实都是函数,这两个参数代表着成功状态和失败状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// 回调函数中有两个参数,这两个参数都是函数,</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> resolve); <span class="comment">//function</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> reject); <span class="comment">//function</span></span><br><span class="line">    <span class="comment">// 初始化状态其实就是许诺状态</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上是我们创建的promise</p><p>但是创建之后如何使用 现在的promise对象和没写一样 一点作用都没有</p><p>使用promise对象进行触发 promise对象中的then方法</p><p>then中内置一个或者两个参数 第一个参数是我们定义成功状态的执行方法</p><p>第二个参数是我们定义的失败状态的执行方法 也就是说两个参数 都是函数</p><ul><li>传统写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise内置一个参数  参数是回调函数  回调内置两个参数</span></span><br><span class="line"><span class="comment">// 第一个参数是成功状态  第二个参数是失败状态</span></span><br><span class="line"><span class="comment">// 这两个参数其实都是函数  只不过还没有定义</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化一个值</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 判定</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">90</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ps:可以理解为上面的resolve(&quot;成功&quot;)和reject(&quot;失败&quot;)为函数的调用,括号里传的为实参;而promise.then里面的两个参数为函数的声明,data和err为形参;</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行已经&#x27;</span> + data);</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行出现了&#x27;</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>链式操作(现写法)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化一个值</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aaa);</span><br><span class="line">    <span class="comment">// 判定</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">90</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 我们一般不会在then方法中同时传递两个参数(传统写法),因为如果说传递两个参数  那么不会进行异常处理</span></span><br><span class="line"><span class="comment">// 所以说  失败的状态  我们一般情况下  使用catch状态进行触发  这样经过了异常处理</span></span><br><span class="line"><span class="comment">// 使用then方法触发成功状态  使用catch方法触发失败状态</span></span><br><span class="line"><span class="comment">// 但是注意  catch不是promise的方法  而是then的返回值的方法</span></span><br><span class="line"><span class="comment">// 也就是说  promise对象使用then触发之后   then方法的返回值也是一个promise</span></span><br><span class="line">   <span class="comment">//常规写法</span></span><br><span class="line">    <span class="keyword">let</span> p =promise.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前状态为:&quot;</span>+data)</span><br><span class="line">    &#125;)</span><br><span class="line">    p.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前状态为:&quot;</span>+err)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 链式操作</span></span><br><span class="line">    promise.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>链式操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;一级栏目&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;没出来&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个promise中的无论是成功状态还是失败装填的返回值</span></span><br><span class="line"><span class="comment">// 都作为链式操作中第二个promise的resolve（成功）状态</span></span><br><span class="line"><span class="comment">// let p = promise.then(data=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(data);</span></span><br><span class="line"><span class="comment">//     return data; //记得return出去</span></span><br><span class="line"><span class="comment">// &#125;).catch(err=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(err);</span></span><br><span class="line"><span class="comment">//     return err; //记得return出去</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p.then(data1=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;根据&quot; + data1 + &quot;获取二级栏目&quot;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p =promise.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="keyword">return</span> data;<span class="comment">//记得return出去</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data1</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;根据&quot;</span>+data1+<span class="string">&quot;获取二级栏目&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;根据&quot;</span>+data1+<span class="string">&quot;获取二级栏目&quot;</span>;<span class="comment">//记得return出去</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data2</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data2+<span class="string">&quot;获取三级栏目&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data3;<span class="comment">//记得return出去</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    一级栏目</span></span><br><span class="line"><span class="comment">    根据一级栏目获取二级栏目</span></span><br><span class="line"><span class="comment">    根据一级栏目获取二级栏目获取三级栏目</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><ul><li>Promise.all()<ol><li>all方法是处理Promise的方法  他是Promise中的一个静态方法  static</li><li>也就是说  我们使用的时候  不需要实例化  我们直接使用Promise.all方法就可以</li><li>它主要的作用是执行所有的promise</li><li>内置一个参数  参数是一个数组</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;2s钟之后执行p1&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;3s钟之后执行p2&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;1s钟之后执行p3&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// all方法是执行所有的Promise</span></span><br><span class="line"><span class="comment">// 内置一个参数  参数是一个数组</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(data));<span class="comment">//[&#x27;2s钟之后执行p1&#x27;, &#x27;3s钟之后执行p2&#x27;, &#x27;1s钟之后执行p3&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>Promise.race()<ol><li>all方法是处理Promise的方法  他是Promise中的一个静态方法  static</li><li>也就是说  我们使用的时候  不需要实例化  我们直接使用Promise.race方法就可以</li><li>他只执行最快的那个promise</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;2s钟之后执行p1&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;3s钟之后执行p2&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;1s钟之后执行p3&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//race方法是执行最快的Promise</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(data));<span class="comment">//1s钟之后执行p3</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="三、async"><a href="#三、async" class="headerlink" title="三、async"></a>三、async</h1><ul><li><p>概念：</p><ol><li>真正意义上去解决异步回调的问题，同步流程表达异步操作</li><li>本质上async 是Promise的语法糖</li></ol></li><li><p>特点：</p><ol><li>async函数是一个异步函数 但是主要的作用是处理函数内部的异步问题</li><li>将函数内部的异步代码转化为同步代码 再执行 </li><li>在函数中 如果说程序碰到await 程序会陷入阻塞状态 </li><li>也就是说 在async函数中有await关键字 这个关键字只能出现在async函数中</li><li>一直到程序执行完成await后面的表达式  程序才会向下进行</li></ol></li><li><p>async函数主要有三点</p><ol><li><p>函数必须使用async进行修饰</p></li><li><p>函数的返回值是一个promise</p></li><li><p>await将异步代码转化为同步代码</p></li><li><p>await可以直接获取Promise中的resolve状态 并且是异常处理过后的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> v1 = <span class="keyword">await</span> <span class="string">&quot;这是第一行代码&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> v2 = <span class="keyword">await</span> <span class="string">&quot;这是第二行代码&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//这是第一行代码</span></span><br><span class="line">      <span class="comment">//这是第二行代码</span></span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="title function_">resolve</span>(<span class="string">&#x27;2s钟之后执行p1&#x27;</span>);</span><br><span class="line">           &#125;, <span class="number">2000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">     </span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="title function_">resolve</span>(<span class="string">&#x27;3s钟之后执行p2&#x27;</span>);</span><br><span class="line">           &#125;, <span class="number">3000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">     </span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="title function_">resolve</span>(<span class="string">&#x27;1s钟之后执行p3&#x27;</span>);</span><br><span class="line">           &#125;, <span class="number">1000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 定义async函数</span></span><br><span class="line">   <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> v1 = <span class="keyword">await</span> <span class="title function_">fn1</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(v1)</span><br><span class="line">       <span class="keyword">let</span> v2 = <span class="keyword">await</span> <span class="title function_">fn2</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(v2)</span><br><span class="line">       <span class="keyword">let</span> v3 = <span class="keyword">await</span> <span class="title function_">fn3</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(v3)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>();</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   2s钟之后执行p1</span></span><br><span class="line"><span class="comment">   3s钟之后执行p2</span></span><br><span class="line"><span class="comment">   1s钟之后执行p3</span></span><br><span class="line"><span class="comment">   */</span></span><br></pre></td></tr></table></figure><p>案例传参：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connect = <span class="built_in">require</span>(<span class="string">&#x27;./lib/connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        connect.<span class="title function_">query</span>(<span class="string">&#x27;select * from category_first&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = data[<span class="number">1</span>].<span class="property">first_id</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        connect.<span class="title function_">query</span>(<span class="string">&#x27;select * from category_second where first_id = ?&#x27;</span>,v,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = data[<span class="number">0</span>].<span class="property">second_id</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        connect.<span class="title function_">query</span>(<span class="string">&#x27;select * from category_thired where second_id = ?&#x27;</span>,v,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = data[<span class="number">0</span>].<span class="property">thired_id</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        connect.<span class="title function_">query</span>(<span class="string">&#x27;select goods_name,goods_id from goods_list where thired_id = ?&#x27;</span>,v,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> v1 = <span class="keyword">await</span> <span class="title function_">fn1</span>();</span><br><span class="line">    <span class="keyword">let</span> v2 = <span class="keyword">await</span> <span class="title function_">fn2</span>(v1);</span><br><span class="line">    <span class="keyword">let</span> v3 = <span class="keyword">await</span> <span class="title function_">fn3</span>(v2);</span><br><span class="line">    <span class="keyword">let</span> v4 = <span class="keyword">await</span> <span class="title function_">fn4</span>(v3);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>后续补充</p></li></ul><ol><li><p>async函数返一个promise对象，当函数执行的时候，一旦遇到await就会先返回，等到触发的异步任务完成，再接着执行后面的语句；(为了验证，看如下代码)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是不是先执行&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我什么时候执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line"><span class="comment">// 我什么时候执行</span></span><br><span class="line"><span class="comment">//（1s后）我是不是最开始执行</span></span><br></pre></td></tr></table></figure><p>我们发现，并非我们预想的执行顺序，先打印‘我是不是最开始执行’，而是从下面先开始执行了？其实，这里是<strong>有条件</strong>的：</p><ul><li><p>如果<strong>await后面跟的是promise对象</strong>，会<strong>将promise异步操作转为同步</strong>，<strong>等待promise的resolve&#x2F;reject返回结果，再接着执行函数体后面的语句</strong>；</p><p>(继续测试如下)：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是不是先执行&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我什么时候执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line"><span class="comment">// (1s后) 我是不是最开始执行</span></span><br></pre></td></tr></table></figure><p>我们发现，这跟预期的还是不一样。最下面的 console.log（‘我什么时候执行’）没执行。</p><p>原来：</p><ul><li>如果await的是一个promise对象，那么要等待这个对象解析完成；</li><li>如果没有resolve&#x2F;reject，那么后面的内容就不再执行；</li></ul><p>我们再修改，测试如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是不是先执行&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我什么时候执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line"><span class="comment">// (1s后) 我是不是最开始执行    </span></span><br><span class="line"><span class="comment">// (1s后，和上面同时) 我什么时候执行 </span></span><br></pre></td></tr></table></figure></li></ol><ul><li>小结论</li></ul><p>所以我们可以得出一个<strong>结论</strong>！</p><ol><li><p>await后面如果<code>不是一个promise对象</code>，那么它就<code>按正常的js顺序执行</code>，先执行同步代码，当主线程空闲了，再去执行异步队列的任务；</p></li><li><p>await后面如果<code>是promise对象</code>那么要等待这个对象解析完成，如果<code>没有resolve或者reject</code>，那么<code>后面的内容就不会执行</code>；如果<code>有resolve或者reject</code>，那么<code>后面的内容正常执行</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">     <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">resolve</span>()</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//等价于</span></span><br><span class="line"> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">     <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">resolve</span>()</span><br><span class="line">     &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>));</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ul><li>await的返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await1&quot;</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&quot;pkpkq&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await2&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//await1</span></span><br><span class="line"><span class="comment">//(1s后)await2 pkpkq</span></span><br><span class="line"><span class="comment">//(1s后)pkpkq</span></span><br></pre></td></tr></table></figure><p>我们发现：</p><ul><li>await的返回值就是Promise的resolve&#x2F;reject返回结果，然后通过async函数return出来，相当于Promise.resolve(“返回结果”)；</li></ul><h1 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h1><p><a href="https://blog.csdn.net/MRlaochen/article/details/118799759?spm=1001.2014.3001.5502">异步回调中Async Await和Promise区别</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> 异步处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> async await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机自启</title>
      <link href="/articles/ee7734c7.html"/>
      <url>/articles/ee7734c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>客户要求计算机开启，自动执行bat文件。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="方法一：使用bat"><a href="#方法一：使用bat" class="headerlink" title="方法一：使用bat"></a>方法一：使用bat</h2><ol><li><p>win+R： <code>shell:startup</code>,打开的路径所存放的软件电脑在开机的时候会自动运行。</p></li><li><p>将bat文件放入这个路径下(这里可能会出现问题,见后文)。</p></li><li><p>修改bat文件的代码：因为路径改了，所以修改的是路径代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c盘路径下切换到C盘根路径:  cd /</span></span><br><span class="line"><span class="comment">c盘路径下切换到D盘: d:</span></span><br><span class="line"><span class="comment">需要切换到存到软件的路径下,而不是cd D:\nodejs起本地服务\server.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">d</span>:</span><br><span class="line">cd <span class="attr">D</span>:\nodejs起本地服务</span><br><span class="line">node server.<span class="property">js</span></span><br><span class="line"><span class="comment">//增加pause,报错的时候dos页面也不会闪退。</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ol start="4"><li>可以双击运行，看是否可以正常运行。</li></ol></li></ol><h2 id="方法二：使用vbs"><a href="#方法二：使用vbs" class="headerlink" title="方法二：使用vbs"></a>方法二：使用vbs</h2><ol><li><p>win+R： <code>shell:startup</code>,打开的路径所存放的软件电脑在开机的时候会自动运行。</p></li><li><p>在这个路径下新建文件夹,后缀改为vbs,然后文件–&gt;另存为–&gt;保存类型选<strong>所有文件</strong>–&gt;编码选<strong>ANSI</strong>(这里可能会出现问题,见后文)。</p></li><li><p>输入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bat文件可能会闪退,目前还不知道为啥</span></span><br><span class="line"><span class="comment">路径两边的三个双引号一个都不能少，VBS要用2个双引号来给一个双引号转义,笑cry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">wscript.<span class="title function_">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>).<span class="property">run</span> <span class="string">&quot;&quot;</span><span class="string">&quot;D:\nodejs起本地服务\start.bat&quot;</span><span class="string">&quot;&quot;</span>,<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以打开别的任意的软件 例如：</span></span><br><span class="line">wscript.<span class="title function_">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>).<span class="property">run</span> <span class="string">&quot;&quot;</span><span class="string">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</span><span class="string">&quot;&quot;</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><p>这段代码的意思是启动Chrome浏览器并最小化,代码最后面的参数作用如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0     后台</span><br><span class="line">1     普通</span><br><span class="line">2     最小化</span><br><span class="line">3     最大化</span><br></pre></td></tr></table></figure></li></ol><h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><p>复制到启动路径的时候提示没有管理员权限。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li><p>win+R,键入<strong>gpedit.msc</strong></p></li><li><p><img src="https://cdn.chrelyonly.cf/gh/fsllala/img@main/1656848388974gly.png" alt="管理员权限"></p></li><li><p>已启动了换已禁用，已禁用了换已启用试试，然后重启。(ps:其实我是没效果的)</p></li><li><p>我习惯性开机用电脑管家杀一些进程，发现没有杀的时候，是可以操作的，不需要管理员权限。</p></li></ol><h1 id="vbs拓展"><a href="#vbs拓展" class="headerlink" title="vbs拓展"></a>vbs拓展</h1><p>VBS是基于Visual Basic的脚本语言。</p><h2 id="一些有意思的脚本代码："><a href="#一些有意思的脚本代码：" class="headerlink" title="一些有意思的脚本代码："></a>一些有意思的脚本代码：</h2><ol><li>实现多条消息快速发送</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set wshshell=wscript.<span class="title function_">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>) </span><br><span class="line">wshshell.<span class="property">AppActivate</span><span class="string">&quot;要发送的人的名字&quot;</span> </span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span> to <span class="number">100</span></span><br><span class="line">wscript.<span class="property">sleep</span> <span class="number">100</span> </span><br><span class="line">wshshell.<span class="property">sendKeys</span> <span class="string">&quot;^v&quot;</span> </span><br><span class="line">wshshell.<span class="property">sendKeys</span> <span class="string">&quot;%s&quot;</span> </span><br><span class="line">next</span><br></pre></td></tr></table></figure><p>其实就是模仿了键盘的<strong>ctrl+v</strong>,<strong>enter</strong>操作，所以需要先<strong>ctrl+c</strong>一下要发送的东西，然后将vbs文件拖到要发送人的窗口，双击vbs文件即可。</p><ol start="2"><li>一直说You are cute!</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//do...loop循环类脚本：</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">msgbox <span class="string">&quot;You are cute!&quot;</span></span><br><span class="line">loop</span><br></pre></td></tr></table></figure><ol start="3"><li>打开无数个计算器（慎用）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会死机!!!</span></span><br><span class="line">set wsh=<span class="title function_">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">wsh.<span class="property">run</span> <span class="string">&quot;calc&quot;</span> </span><br><span class="line">loop </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开机自启 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
            <tag> vbs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhotoShop</title>
      <link href="/articles/4c664111.html"/>
      <url>/articles/4c664111.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片背景设置为透明色"><a href="#图片背景设置为透明色" class="headerlink" title="图片背景设置为透明色"></a>图片背景设置为透明色</h1><ol><li>文件–&gt;打开–&gt;图片。</li><li>按住<strong>Ctrl+J</strong>来复制图层。</li><li>选择<strong>魔棒工具</strong>，然后点击图片。</li><li>上面有个<strong>容差</strong>，范围1-100，可以10、50，100这样子来试着调。</li><li>按键盘上的<strong>Delete</strong>键。</li><li>将ps中右下角的<strong>背景</strong>的小眼睛去掉</li><li>将图片的格式另存为<strong>PNG</strong>格式（JPG格式的图片背景会默认为白色，所以保存时不能保存为JPG格式）</li></ol>]]></content>
      
      
      <categories>
          
          <category> PhotoShop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PhotoShop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs起本地服务</title>
      <link href="/articles/73805dbf.html"/>
      <url>/articles/73805dbf.html</url>
      
        <content type="html"><![CDATA[<h1 id="搭建背景"><a href="#搭建背景" class="headerlink" title="搭建背景"></a>搭建背景</h1><p>客户定制了静态页，我需要将写好的本地文件放置到客户的Windows Server 2016的服务器操作系统上，进而实现局域网的访问。</p><h1 id="NodeJs-Express框架"><a href="#NodeJs-Express框架" class="headerlink" title="NodeJs   Express框架"></a>NodeJs   Express框架</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。</p><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><p>官网下载NodeJs,安装即可。</p><h2 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h2><p>安装 Express 并将其保存到依赖列表中：(这里如果是在桌面新建了一个文件夹，然后在文件夹里面cmd，输入如下命令后，文件夹内不会出现node_modules目录，而是在 “C盘–&gt;用户–&gt;现在登录的用户”的目录下)</p><p><code>npm install express --save</code></p><p>以上命令会将 Express 框架安装在当前目录的 <strong>node_modules</strong> 目录中， <strong>node_modules</strong> 目录下会自动创建 express 目录。安装完后，我们可以查看下 express 使用的版本号：</p><p><code>npm list express</code></p><h2 id="创建express服务器"><a href="#创建express服务器" class="headerlink" title="创建express服务器"></a>创建express服务器</h2><p>在根目录下(与node_modules同级目录)新建一个js文件，例如：<strong>server.js</strong>。</p><p><strong>注：</strong>本地起服务走的都是HTTP协议，默认端口是80，在<strong>指定监听端口</strong>时，如果是设置的是80，则可以直接输入本地地址\IPV4地址进行访问，如果不是80端口，还需加上端口号才能进行访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js文件</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//指定根目录显示的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line"> res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//指定监听端口(这里设置的80)</span></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">let</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建bat"><a href="#创建bat" class="headerlink" title="创建bat"></a>创建bat</h2><ul><li>其实可以直接在目录下，执行指令 <code>node server.js </code>。创建bat的好处就是不用每次都输入同样的指令了，用的时候直接双击bat即可。</li><li>在bat里面输入<code>node server.js </code></li><li>双击bat</li></ul><p><strong>注：</strong>如果是用记事本创建，然后直接将txt改为js，可能会出现乱码的情况，这时候进入bat文件，将另存为的格式设置为<strong>utf-8</strong>。</p><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。</p><p>可以使用 express.static 中间件来设置静态文件路径。例如，如果<strong>将图片， CSS, JavaScript 文件放在 public 目录下</strong>，可以这么写：(在根目录下创建public文件夹，里面放要展示的静态文件)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取public绝对路径  (设在在public下查找资源 ; 以public为根目录来查找资源 )</span></span><br><span class="line">这里所采用的的目录结构为：</span><br><span class="line">- demo</span><br><span class="line">     -public </span><br><span class="line">           -html</span><br><span class="line">               -staticImg.<span class="property">html</span></span><br><span class="line">           -img</span><br><span class="line">               -<span class="number">01</span>.<span class="property">jpg</span></span><br><span class="line">     -server.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pubilcPath = path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;public&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(pubilcPath));</span><br></pre></td></tr></table></figure><p>将上面代码添加处理静态文件的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> =<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个项目中,会有一个静态文件夹,假如为public</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取public绝对路径  (设在在public下查找资源 ; 以public为根目录来查找资源 )</span></span><br><span class="line"><span class="keyword">let</span> pubilcPath = path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;public&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(pubilcPath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// public文件夹下有img文件夹,下有01.jpg图片</span></span><br><span class="line"><span class="comment">// public文件夹下有html文件夹,下有staticImg.html文件  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/img/01.jpg 即可查看图片</span></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/html/staticImg.html 即可查看html文件</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running port:<span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//staticImg.html展示01.jpg图片</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小青蛙 express.static()<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个路径地址,看请求头里面 view source 的 get地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>双击bat文件</p><p>在浏览器中访问 <a href="http://127.0.0.1:3000/html/staticImg.html">http://127.0.0.1:3000/html/staticImg.html</a></p><h2 id="添加访问前缀"><a href="#添加访问前缀" class="headerlink" title="添加访问前缀"></a>添加访问前缀</h2><p>想通过 <a href="http://127.0.0.1:3000/static/img/01.jpg">http://127.0.0.1:3000/static/img/01.jpg</a>  来查看图片,又不想加目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> =<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个项目中,会有一个静态文件夹,假如为public</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取public绝对路径  (设在在public下查找资源 ; 以public为根目录来查找资源 )</span></span><br><span class="line"><span class="keyword">let</span> pubilcPath = path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;public&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想通过 http://127.0.0.1:3000/static/img/01.jpg来查看图片,又不想加目录;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/static&quot;</span>,express.<span class="title function_">static</span>(pubilcPath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// public文件夹下有img文件夹,下有01.jpg图片</span></span><br><span class="line"><span class="comment">// public文件夹下有html文件夹,下有staticImg.html文件  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/static/img/01.jpg 即可查看图片</span></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/static/html/staticImg.html 即可查看html文件</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running port:<span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//staticImg.html展示01.jpg图片</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小青蛙 express.static()<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个路径地址,看请求头里面 view source 的 get地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>如上需要访问静态文件不仅需要输入IP还需要输入xxx.html，那有没有办法仅仅输入IP就可以了呢。</p><p><strong>知识点：</strong></p><ul><li>Express是一个基于Node.js实现的Web框架，其响应HTTP请求的response对象中有两个用于URL跳转方法res.location()和res.redirect()，使用它们可以实现URL的301或302重定向。</li><li>当状态码为<code>301</code>或<code>302</code>时（<code>301</code>－永久重定向、<code>302</code>－临时重定向），表示资源位置发生了改变，需要进行重定向。</li><li><code>Location</code>头信息表示了资源的改变的位置，即：要跳重定向的URL。</li></ul><ol><li><p>res.redirect():</p><p><code>res.redirect([status,] path)</code></p><p>参数:</p><ul><li><code>status</code>：{Number}，表示要设置的HTTP状态码</li><li><code>path</code>：{String}，要设置到<code>Location</code>头中的URL</li></ul><p>重定义到<code>path</code>所指定的URL，重定向时可以同时指定<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP状态码</a>，不指定状态码默认为<code>302</code></p><p>使用<code>redirect()</code>重定向时，可以是几下几种设置方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;/foo/bar&#x27;</span>);  <span class="comment">//浏览器打开http://127.0.0.1，页面跳转到http://127.0.0.1/foo/bar。</span></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://itbilu.com&#x27;</span>);<span class="comment">//浏览器打开http://127.0.0.1，页面跳转到http://itbilu.com。</span></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="number">301</span>, <span class="string">&#x27;http://itbilu.com&#x27;</span>);<span class="comment">//浏览器打开http://127.0.0.1，页面跳转到http://itbilu.com。</span></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://itbilu.com&#x27;</span>, <span class="number">301</span>);<span class="comment">//浏览器打开http://127.0.0.1，页面跳转到http://itbilu.com。</span></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;../login&#x27;</span>); <span class="comment">// /blog/post/1 -&gt; /blog/login</span></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;back&#x27;</span>);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://itbilu.com/&#x27;</span>);　</span><br><span class="line"><span class="comment">//res.redirect(301,&#x27;http://itbilu.com/&#x27;);</span></span><br><span class="line">res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>浏览器打开<a href="http://127.0.0.1:3000，">http://127.0.0.1:3000，</a> 页面跳转到<a href="http://itbilu.com./">http://itbilu.com。</a></p></li><li><p>res.location():</p></li></ol><p><code>res.location(path)</code></p><p>设置响应的<a href="http://itbilu.com/other/relate/EJ3fKUwUx.html#http-response-headers"><code>HTTP Location</code></a>头。<code>path</code>可以是以下几种设置形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">location</span>(<span class="string">&#x27;/foo/bar&#x27;</span>);<span class="comment">//浏览器打开http://127.0.0.1，页面跳转到http://127.0.0.1/foo/bar。</span></span><br><span class="line">res.<span class="title function_">location</span>(<span class="string">&#x27;../login&#x27;</span>);</span><br><span class="line">res.<span class="title function_">location</span>(<span class="string">&#x27;http://itbilu.com&#x27;</span>);<span class="comment">//浏览器打开http://127.0.0.1，页面跳转到http://itbilu.com。</span></span><br><span class="line">res.<span class="title function_">location</span>(<span class="string">&#x27;back&#x27;</span>);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">301</span>, &#123;<span class="string">&#x27;Location&#x27;</span>: <span class="string">&#x27;http://itbilu.com/&#x27;</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">_header</span>);</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>浏览器打开<a href="http://127.0.0.1:3000，页面跳转到http://itbilu.com。">http://127.0.0.1:3000，页面跳转到http://itbilu.com。</a></p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> =<span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个项目中,会有一个静态文件夹,假如为public</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取public绝对路径  (设在在public下查找资源 ; 以public为根目录来查找资源 )</span></span><br><span class="line"><span class="keyword">let</span> pubilcPath = path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;public&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(pubilcPath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// public文件夹下有img文件夹,下有01.jpg图片</span></span><br><span class="line"><span class="comment">// public文件夹下有html文件夹,下有staticImg.html文件  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/img/01.jpg 即可查看图片</span></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/html/staticImg.html 即可查看html文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是我只想输入 127.0.0.1:3000 就像看图片, 需要用到 重定向;</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 我在浏览器输入了127.0.0.1:3000,其实端口后面有个/,路由匹配到了/,就进行了重定向的操作,即用/img/01.jpg路由替换了/路由==&gt;http://127.0.0.1:3000/img/01.jpg</span></span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/img/01.jpg&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是我只想输入 127.0.0.1:3000/fsl 就像看图片, 需要用到 重定向;  即访问/fsl接口的时候</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/fsl&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 我在浏览器输入了127.0.0.1:3000/fsl,路由匹配到了/fsl,就进行了重定向的操作,即用/img/01.jpg路由替换了/fsl路由==&gt;http://127.0.0.1:3000/img/01.jpg</span></span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/img/01.jpg&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running port:<span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ps：如果将端口设置为<code>80</code>，则只需输入<code>IP</code>即可，因为<code>HTTP</code>默认端口为<code>80</code>；</p><h1 id="NodeJs-Koa框架"><a href="#NodeJs-Koa框架" class="headerlink" title="NodeJs Koa框架"></a>NodeJs Koa框架</h1><blockquote><p>koa是express同一个团队开发的一个新的Web框架；相对于express具有更强的异步处理能力；Koa的核心代码只有1600+行，是一个更加轻量级的框架，我们可以根据需要安装和使用中间件；</p></blockquote><ol><li>初始化 <code>npm init -y</code>；</li><li>安装Koa<code>npm i koa</code>；</li><li>安装静态服务器<code>npm install koa-static</code>；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//koa并没有内置部署相关的功能，所以我们需要使用第三方库：npm install koa-static</span></span><br><span class="line"><span class="comment">// 导出的是个类,所以K大写</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="comment">// 引入内置模块path</span></span><br><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// koa并没有内置部署相关的功能，所以我们需要使用第三方库</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-static&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  因为是个类,所以需要实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;public&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">static</span>(filePath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// public文件夹下有img文件夹,下有01.jpg图片</span></span><br><span class="line"><span class="comment">// public文件夹下有html文件夹,下有staticImg.html文件  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/img/01.jpg 即可查看图片</span></span><br><span class="line"><span class="comment">// 则在浏览器输入 http://127.0.0.1:3000/html/staticImg.html 即可查看html文件</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running port is <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小青蛙 express.static()<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个路径地址,看请求头里面 view source 的 get地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加访问前缀和重定向同<code>express</code>；</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.runoob.com/nodejs/nodejs-express-framework.html">菜鸟教程</a></li><li><a href="https://www.cnblogs.com/exclusiveMemory/p/6611322.html">Nodejs的express使用教程</a></li><li><a href="https://www.cnblogs.com/gamedaybyday/p/6639077.html">nodejs 重定向 (redirect + writeHead(Location))</a></li><li><a href="https://blog.csdn.net/yanyang1116/article/details/54837613">res.location()与res.redirect()</a></li><li><a href="https://blog.csdn.net/yanyang1116/article/details/54837603">Node.js实现301、302重定向服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
          <category> 本地服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora常用快捷键</title>
      <link href="/articles/12a67745.html"/>
      <url>/articles/12a67745.html</url>
      
        <content type="html"><![CDATA[<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>一款编写Markdown的软件</p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="一、标题的使用："><a href="#一、标题的使用：" class="headerlink" title="一、标题的使用："></a>一、标题的使用：</h2><p># 一阶标题 或者快捷键Ctrl+1</p><p>##二阶标题 或者快捷键Ctrl+2</p><p>###三阶标题 或者快捷键Ctrl+3</p><p>####四阶标题 或者快捷键Ctrl+4</p><p>#####五阶标题 或者快捷键Ctrl+5</p><p>######六阶标题 或者快捷键Ctrl+6</p><h2 id="二、字体样式："><a href="#二、字体样式：" class="headerlink" title="二、字体样式："></a>二、字体样式：</h2><p><strong>加粗</strong> ：ctrl+B</p><p><em>倾斜</em> ：ctrl+I</p><p><u>下划线</u> ：ctrl+U</p><p><del>删除线</del>：alt + shift + 5</p><h2 id="三、分割线："><a href="#三、分割线：" class="headerlink" title="三、分割线："></a>三、分割线：</h2><p>+++</p><p>可以使用三个及以上的 <code>+</code> 号或 <code>*</code> 号或 <code>-</code> 来表示一条分割线；</p><h2 id="四、列表："><a href="#四、列表：" class="headerlink" title="四、列表："></a>四、列表：</h2><h3 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h3><p>可以使用<code>*</code>，<code>+</code>或<code>-</code>标记符号来表示无序列表项，记住要在标记符号后<strong>添加一个空格</strong> 语法如下：</p><ul><li>无序</li><li>列表</li></ul><h3 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h3><p>可以使用<strong>数字加上<code>.</code>再加上空格</strong>来表示有序列表，语法如下：</p><ol><li><p>有序</p></li><li><p>列表</p></li></ol><h2 id="五、插入代码："><a href="#五、插入代码：" class="headerlink" title="五、插入代码："></a>五、插入代码：</h2><p>一行代码：可以使用段内代码块来表示，用一对 **&#96;**（数字1旁边的符号）括住代码。</p><p>代码段：可以使用<strong>三个 &#96; 加Enter&#x2F;空格+编程语言</strong>来表示。</p><h2 id="六、插入图片："><a href="#六、插入图片：" class="headerlink" title="六、插入图片："></a>六、插入图片：</h2><p>ctrl + shift + I</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">![本地png图片PictureTest.png](./img/PictureTest.png)</span><br><span class="line"></span><br><span class="line">![本地jpg图片](./img/PictureTest.jpg)</span><br><span class="line"></span><br><span class="line">![网络图片](http://static.runoob.com/images/runoob-logo.png &quot;菜鸟教程&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、插入表格："><a href="#七、插入表格：" class="headerlink" title="七、插入表格："></a>七、插入表格：</h2><p>ctrl+T</p><h2 id="八、插入链接："><a href="#八、插入链接：" class="headerlink" title="八、插入链接："></a>八、插入链接：</h2><p>ctrl+k</p><p>链接的使用方式有两种语法，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](链接地址)</span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">链接地址</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以使用链接打开网页，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com/)</span><br><span class="line">&lt;https://www.baidu.com/&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><a href="https://www.baidu.com/">百度</a></p><p><a href="https://www.baidu.com/">https://www.baidu.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
